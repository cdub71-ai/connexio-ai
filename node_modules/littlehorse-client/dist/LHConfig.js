"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LHConfig = exports.CONFIG_NAMES = void 0;
const nice_grpc_1 = require("nice-grpc");
const service_1 = require("./proto/service");
const getPropertiesFile_1 = __importDefault(require("./utils/getPropertiesFile"));
const getPropertiesArgs_1 = __importDefault(require("./utils/getPropertiesArgs"));
const fs_1 = require("fs");
exports.CONFIG_NAMES = [
    'LHC_API_HOST',
    'LHC_API_PORT',
    'LHC_API_PROTOCOL',
    'LHC_TENANT_ID',
    'LHC_CA_CERT',
];
const DEFAULT_CONFIG = {
    LHC_API_HOST: 'localhost',
    LHC_API_PORT: '2023',
    LHC_TENANT_ID: 'default',
    LHC_API_PROTOCOL: 'PLAINTEXT',
};
class LHConfig {
    constructor(config) {
        this.apiHost = 'localhost';
        this.apiPort = '2023';
        this.protocol = 'PLAINTEXT';
        this.tenantId = 'default';
        const mergedConfig = { ...DEFAULT_CONFIG, ...config };
        this.apiHost = mergedConfig.LHC_API_HOST;
        this.apiPort = mergedConfig.LHC_API_PORT;
        this.protocol = mergedConfig.LHC_API_PROTOCOL;
        this.tenantId = mergedConfig.LHC_TENANT_ID;
        this.caCert = mergedConfig.LHC_CA_CERT;
        let channelCredentials;
        if (this.protocol === 'TLS') {
            const rootCa = this.caCert ? (0, fs_1.readFileSync)(this.caCert) : undefined;
            channelCredentials = nice_grpc_1.ChannelCredentials.createSsl(rootCa);
        }
        this.channel = (0, nice_grpc_1.createChannel)(`${this.apiHost}:${this.apiPort}`, channelCredentials);
    }
    /**
     * Instantiate LHConfig from properties file
     * @param file - path to properties file
     * @returns LHConfig instance
     */
    static fromConfigFile(file) {
        const config = (0, getPropertiesFile_1.default)(file);
        return new LHConfig(config);
    }
    static from(args) {
        const config = (0, getPropertiesArgs_1.default)(args);
        return new LHConfig(config);
    }
    /**
     * Get gRPC client for littlehorse
     *
     * For more documentation about it's method please go to {@link https://littlehorse.dev}
     *
     * @param options - An object optionally containing `accessToken` and `tenantId`
     * @returns a gRPC client for littlehorse
     */
    getClient(accessToken) {
        return (0, nice_grpc_1.createClientFactory)()
            .use((call, options) => call.next(call.request, {
            ...options,
            metadata: this.getMetadata(options.metadata, accessToken),
        }))
            .create(service_1.LittleHorseDefinition, this.channel);
    }
    getMetadata(metadata, accessToken) {
        let newMetadata = (0, nice_grpc_1.Metadata)(metadata);
        if (this.tenantId) {
            newMetadata = newMetadata.append('tenantId', this.tenantId);
        }
        if (accessToken) {
            newMetadata = newMetadata.append('Authorization', `Bearer ${accessToken}`);
        }
        return newMetadata;
    }
}
exports.LHConfig = LHConfig;
//# sourceMappingURL=LHConfig.js.map