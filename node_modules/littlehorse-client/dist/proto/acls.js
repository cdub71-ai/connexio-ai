"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               v4.23.4
// source: acls.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PutTenantRequest = exports.DeletePrincipalRequest = exports.PutPrincipalRequest_PerTenantAclsEntry = exports.PutPrincipalRequest = exports.ServerACL = exports.ServerACLs = exports.Tenant = exports.Principal_PerTenantAclsEntry = exports.Principal = exports.aCLActionToNumber = exports.aCLActionFromJSON = exports.ACLAction = exports.aCLResourceToNumber = exports.aCLResourceFromJSON = exports.ACLResource = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const timestamp_1 = require("./google/protobuf/timestamp");
const object_id_1 = require("./object_id");
/** Defines a resource type for ACL's. */
var ACLResource;
(function (ACLResource) {
    /** ACL_WORKFLOW - Refers to `WfSpec` and `WfRun` */
    ACLResource["ACL_WORKFLOW"] = "ACL_WORKFLOW";
    /** ACL_TASK - Refers to `TaskDef` and `TaskRun` */
    ACLResource["ACL_TASK"] = "ACL_TASK";
    /** ACL_EXTERNAL_EVENT - Refers to `ExternalEventDef` and `ExternalEvent` */
    ACLResource["ACL_EXTERNAL_EVENT"] = "ACL_EXTERNAL_EVENT";
    /** ACL_USER_TASK - Refers to `UserTaskDef` and `UserTaskRun` */
    ACLResource["ACL_USER_TASK"] = "ACL_USER_TASK";
    /**
     * ACL_PRINCIPAL - Refers to the `Principal` resource. Currently, the `ACL_PRINCIPAL` permission is only
     * valid in the `global_acls` field of the `Principal`. A `Principal` who only has access
     * to a specific Tenant cannot create othe Principals because a Principal is scoped
     * to the Cluster, and not to a Tenant.
     */
    ACLResource["ACL_PRINCIPAL"] = "ACL_PRINCIPAL";
    /**
     * ACL_TENANT - Refers to the `Tenant` resource. The `ACL_TENANT` permission is only valid in the
     * `global_acls` field of the `Principal`. This is because the `Tenant` resource is
     * cluste-rscoped.
     */
    ACLResource["ACL_TENANT"] = "ACL_TENANT";
    /**
     * ACL_ALL_RESOURCES - Refers to all resources. In the `global_acls` field, this includes `Principal` and `Tenant`
     * resources. In the `per_tenant_acls` field, this does not include `Principal` and `Tenant` since
     * those are cluster-scoped resources.
     */
    ACLResource["ACL_ALL_RESOURCES"] = "ACL_ALL_RESOURCES";
    /** ACL_TASK_WORKER_GROUP - Refers to the `TaskWorkerGroup` associated with a TaskDef */
    ACLResource["ACL_TASK_WORKER_GROUP"] = "ACL_TASK_WORKER_GROUP";
    ACLResource["UNRECOGNIZED"] = "UNRECOGNIZED";
})(ACLResource || (exports.ACLResource = ACLResource = {}));
function aCLResourceFromJSON(object) {
    switch (object) {
        case 0:
        case "ACL_WORKFLOW":
            return ACLResource.ACL_WORKFLOW;
        case 1:
        case "ACL_TASK":
            return ACLResource.ACL_TASK;
        case 2:
        case "ACL_EXTERNAL_EVENT":
            return ACLResource.ACL_EXTERNAL_EVENT;
        case 3:
        case "ACL_USER_TASK":
            return ACLResource.ACL_USER_TASK;
        case 4:
        case "ACL_PRINCIPAL":
            return ACLResource.ACL_PRINCIPAL;
        case 5:
        case "ACL_TENANT":
            return ACLResource.ACL_TENANT;
        case 6:
        case "ACL_ALL_RESOURCES":
            return ACLResource.ACL_ALL_RESOURCES;
        case 7:
        case "ACL_TASK_WORKER_GROUP":
            return ACLResource.ACL_TASK_WORKER_GROUP;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ACLResource.UNRECOGNIZED;
    }
}
exports.aCLResourceFromJSON = aCLResourceFromJSON;
function aCLResourceToNumber(object) {
    switch (object) {
        case ACLResource.ACL_WORKFLOW:
            return 0;
        case ACLResource.ACL_TASK:
            return 1;
        case ACLResource.ACL_EXTERNAL_EVENT:
            return 2;
        case ACLResource.ACL_USER_TASK:
            return 3;
        case ACLResource.ACL_PRINCIPAL:
            return 4;
        case ACLResource.ACL_TENANT:
            return 5;
        case ACLResource.ACL_ALL_RESOURCES:
            return 6;
        case ACLResource.ACL_TASK_WORKER_GROUP:
            return 7;
        case ACLResource.UNRECOGNIZED:
        default:
            return -1;
    }
}
exports.aCLResourceToNumber = aCLResourceToNumber;
/** Describes an Action that can be taken over a specific set of resources. */
var ACLAction;
(function (ACLAction) {
    /**
     * READ - Allows all RPC's that start with `Get`, `List`, and `Search` in relation to the
     * metadata (eg. `TaskDef` for `ACL_TASK`) or run data (eg. `TaskRun` for `ACL_TASK`)
     */
    ACLAction["READ"] = "READ";
    /**
     * RUN - Allows RPC's that are needed for mutating the _runs_ of the resource. For
     * example, `RUN` over `ACL_TASK` allows the `ReportTask` and `PollTask` RPC's,
     * and `RUN` over `ACL_WORKFLOW` allows the `RunWf`, `DeleteWfRun`, `StopWfRun`,
     * and `ResumeWfRun` RPC's.
     */
    ACLAction["RUN"] = "RUN";
    /**
     * WRITE_METADATA - Allows mutating metadata. For example, `WRITE_METADATA` over `ACL_WORKFLOW` allows
     * mutating `WfSpec`s, and `WRITE_METADATA` over `ACL_TASK` allows mutating `TaskDef`s.
     */
    ACLAction["WRITE_METADATA"] = "WRITE_METADATA";
    /** ALL_ACTIONS - Allows all actions related to a resource. */
    ACLAction["ALL_ACTIONS"] = "ALL_ACTIONS";
    ACLAction["UNRECOGNIZED"] = "UNRECOGNIZED";
})(ACLAction || (exports.ACLAction = ACLAction = {}));
function aCLActionFromJSON(object) {
    switch (object) {
        case 0:
        case "READ":
            return ACLAction.READ;
        case 1:
        case "RUN":
            return ACLAction.RUN;
        case 2:
        case "WRITE_METADATA":
            return ACLAction.WRITE_METADATA;
        case 3:
        case "ALL_ACTIONS":
            return ACLAction.ALL_ACTIONS;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ACLAction.UNRECOGNIZED;
    }
}
exports.aCLActionFromJSON = aCLActionFromJSON;
function aCLActionToNumber(object) {
    switch (object) {
        case ACLAction.READ:
            return 0;
        case ACLAction.RUN:
            return 1;
        case ACLAction.WRITE_METADATA:
            return 2;
        case ACLAction.ALL_ACTIONS:
            return 3;
        case ACLAction.UNRECOGNIZED:
        default:
            return -1;
    }
}
exports.aCLActionToNumber = aCLActionToNumber;
function createBasePrincipal() {
    return { id: undefined, createdAt: undefined, perTenantAcls: {}, globalAcls: undefined };
}
exports.Principal = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== undefined) {
            object_id_1.PrincipalId.encode(message.id, writer.uint32(10).fork()).ldelim();
        }
        if (message.createdAt !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(18).fork()).ldelim();
        }
        Object.entries(message.perTenantAcls).forEach(([key, value]) => {
            exports.Principal_PerTenantAclsEntry.encode({ key: key, value }, writer.uint32(26).fork()).ldelim();
        });
        if (message.globalAcls !== undefined) {
            exports.ServerACLs.encode(message.globalAcls, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePrincipal();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.PrincipalId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.createdAt = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    const entry3 = exports.Principal_PerTenantAclsEntry.decode(reader, reader.uint32());
                    if (entry3.value !== undefined) {
                        message.perTenantAcls[entry3.key] = entry3.value;
                    }
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.globalAcls = exports.ServerACLs.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.Principal.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBasePrincipal();
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.PrincipalId.fromPartial(object.id) : undefined;
        message.createdAt = (_a = object.createdAt) !== null && _a !== void 0 ? _a : undefined;
        message.perTenantAcls = Object.entries((_b = object.perTenantAcls) !== null && _b !== void 0 ? _b : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = exports.ServerACLs.fromPartial(value);
            }
            return acc;
        }, {});
        message.globalAcls = (object.globalAcls !== undefined && object.globalAcls !== null)
            ? exports.ServerACLs.fromPartial(object.globalAcls)
            : undefined;
        return message;
    },
};
function createBasePrincipal_PerTenantAclsEntry() {
    return { key: "", value: undefined };
}
exports.Principal_PerTenantAclsEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.ServerACLs.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePrincipal_PerTenantAclsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = exports.ServerACLs.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.Principal_PerTenantAclsEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBasePrincipal_PerTenantAclsEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (object.value !== undefined && object.value !== null)
            ? exports.ServerACLs.fromPartial(object.value)
            : undefined;
        return message;
    },
};
function createBaseTenant() {
    return { id: undefined, createdAt: undefined };
}
exports.Tenant = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== undefined) {
            object_id_1.TenantId.encode(message.id, writer.uint32(10).fork()).ldelim();
        }
        if (message.createdAt !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTenant();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.TenantId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.createdAt = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.Tenant.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseTenant();
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.TenantId.fromPartial(object.id) : undefined;
        message.createdAt = (_a = object.createdAt) !== null && _a !== void 0 ? _a : undefined;
        return message;
    },
};
function createBaseServerACLs() {
    return { acls: [] };
}
exports.ServerACLs = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.acls) {
            exports.ServerACL.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseServerACLs();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.acls.push(exports.ServerACL.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.ServerACLs.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseServerACLs();
        message.acls = ((_a = object.acls) === null || _a === void 0 ? void 0 : _a.map((e) => exports.ServerACL.fromPartial(e))) || [];
        return message;
    },
};
function createBaseServerACL() {
    return { resources: [], allowedActions: [], name: undefined, prefix: undefined };
}
exports.ServerACL = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        writer.uint32(10).fork();
        for (const v of message.resources) {
            writer.int32(aCLResourceToNumber(v));
        }
        writer.ldelim();
        writer.uint32(18).fork();
        for (const v of message.allowedActions) {
            writer.int32(aCLActionToNumber(v));
        }
        writer.ldelim();
        if (message.name !== undefined) {
            writer.uint32(26).string(message.name);
        }
        if (message.prefix !== undefined) {
            writer.uint32(34).string(message.prefix);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseServerACL();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag === 8) {
                        message.resources.push(aCLResourceFromJSON(reader.int32()));
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.resources.push(aCLResourceFromJSON(reader.int32()));
                        }
                        continue;
                    }
                    break;
                case 2:
                    if (tag === 16) {
                        message.allowedActions.push(aCLActionFromJSON(reader.int32()));
                        continue;
                    }
                    if (tag === 18) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.allowedActions.push(aCLActionFromJSON(reader.int32()));
                        }
                        continue;
                    }
                    break;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.prefix = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.ServerACL.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseServerACL();
        message.resources = ((_a = object.resources) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.allowedActions = ((_b = object.allowedActions) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        message.name = (_c = object.name) !== null && _c !== void 0 ? _c : undefined;
        message.prefix = (_d = object.prefix) !== null && _d !== void 0 ? _d : undefined;
        return message;
    },
};
function createBasePutPrincipalRequest() {
    return { id: "", perTenantAcls: {}, globalAcls: undefined, overwrite: false };
}
exports.PutPrincipalRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        Object.entries(message.perTenantAcls).forEach(([key, value]) => {
            exports.PutPrincipalRequest_PerTenantAclsEntry.encode({ key: key, value }, writer.uint32(18).fork()).ldelim();
        });
        if (message.globalAcls !== undefined) {
            exports.ServerACLs.encode(message.globalAcls, writer.uint32(26).fork()).ldelim();
        }
        if (message.overwrite !== false) {
            writer.uint32(40).bool(message.overwrite);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePutPrincipalRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    const entry2 = exports.PutPrincipalRequest_PerTenantAclsEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.perTenantAcls[entry2.key] = entry2.value;
                    }
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.globalAcls = exports.ServerACLs.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.overwrite = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.PutPrincipalRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBasePutPrincipalRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.perTenantAcls = Object.entries((_b = object.perTenantAcls) !== null && _b !== void 0 ? _b : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = exports.ServerACLs.fromPartial(value);
            }
            return acc;
        }, {});
        message.globalAcls = (object.globalAcls !== undefined && object.globalAcls !== null)
            ? exports.ServerACLs.fromPartial(object.globalAcls)
            : undefined;
        message.overwrite = (_c = object.overwrite) !== null && _c !== void 0 ? _c : false;
        return message;
    },
};
function createBasePutPrincipalRequest_PerTenantAclsEntry() {
    return { key: "", value: undefined };
}
exports.PutPrincipalRequest_PerTenantAclsEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.ServerACLs.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePutPrincipalRequest_PerTenantAclsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = exports.ServerACLs.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.PutPrincipalRequest_PerTenantAclsEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBasePutPrincipalRequest_PerTenantAclsEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (object.value !== undefined && object.value !== null)
            ? exports.ServerACLs.fromPartial(object.value)
            : undefined;
        return message;
    },
};
function createBaseDeletePrincipalRequest() {
    return { id: undefined };
}
exports.DeletePrincipalRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== undefined) {
            object_id_1.PrincipalId.encode(message.id, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeletePrincipalRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.PrincipalId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.DeletePrincipalRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseDeletePrincipalRequest();
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.PrincipalId.fromPartial(object.id) : undefined;
        return message;
    },
};
function createBasePutTenantRequest() {
    return { id: "" };
}
exports.PutTenantRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePutTenantRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.PutTenantRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBasePutTenantRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function toTimestamp(dateStr) {
    const date = new globalThis.Date(dateStr);
    const seconds = Math.trunc(date.getTime() / 1000);
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis).toISOString();
}
//# sourceMappingURL=acls.js.map