/// <reference types="node" />
import _m0 from "protobufjs/minimal";
import { VariableId, WfSpecId } from "./object_id";
/**
 * VariableValue is a structure containing a value in LittleHorse. It can be
 * used to pass input variables into a WfRun/ThreadRun/TaskRun/etc, as output
 * from a TaskRun, as the value of a WfRun's Variable, etc.
 */
export interface VariableValue {
    /** A String representing a serialized json object. */
    jsonObj?: string | undefined;
    /** A String representing a serialized json list. */
    jsonArr?: string | undefined;
    /** A 64-bit floating point number. */
    double?: number | undefined;
    /** A boolean. */
    bool?: boolean | undefined;
    /** A string. */
    str?: string | undefined;
    /** A 64-bit integer. */
    int?: number | undefined;
    /** An arbitrary String of bytes. */
    bytes?: Buffer | undefined;
}
/** A Variable is an instance of a variable assigned to a WfRun. */
export interface Variable {
    /**
     * ID of this Variable. Note that the VariableId contains the relevant
     * WfRunId inside it, the threadRunNumber, and the name of the Variabe.
     */
    id: VariableId | undefined;
    /** The value of this Variable. */
    value: VariableValue | undefined;
    /** When the Variable was created. */
    createdAt: string | undefined;
    /** The ID of the WfSpec that this Variable belongs to. */
    wfSpecId: WfSpecId | undefined;
}
export declare const VariableValue: {
    encode(message: VariableValue, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): VariableValue;
    create(base?: DeepPartial<VariableValue>): VariableValue;
    fromPartial(object: DeepPartial<VariableValue>): VariableValue;
};
export declare const Variable: {
    encode(message: Variable, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Variable;
    create(base?: DeepPartial<Variable>): Variable;
    fromPartial(object: DeepPartial<Variable>): Variable;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=variable.d.ts.map