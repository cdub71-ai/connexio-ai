/** Status used for WfRun, ThreadRun, and NodeRun */
export declare enum LHStatus {
    STARTING = "STARTING",
    RUNNING = "RUNNING",
    COMPLETED = "COMPLETED",
    HALTING = "HALTING",
    HALTED = "HALTED",
    ERROR = "ERROR",
    EXCEPTION = "EXCEPTION",
    UNRECOGNIZED = "UNRECOGNIZED"
}
export declare function lHStatusFromJSON(object: any): LHStatus;
export declare function lHStatusToNumber(object: LHStatus): number;
/** Status of a Metadata Object, such as WfSpec or TaskDef */
export declare enum MetadataStatus {
    /** ACTIVE - ACTIVE means the object can be used. */
    ACTIVE = "ACTIVE",
    /**
     * ARCHIVED - An ARCHIVED WfSpec can no longer be used to create new WfRun's, but
     * existing WfRun's will be allowed to run to completion.
     */
    ARCHIVED = "ARCHIVED",
    /**
     * TERMINATING - A TERMINATING WfSpec is actively deleting all running WfRun's, and will
     * self-destruct once all of its child WfRun's are terminated.
     */
    TERMINATING = "TERMINATING",
    UNRECOGNIZED = "UNRECOGNIZED"
}
export declare function metadataStatusFromJSON(object: any): MetadataStatus;
export declare function metadataStatusToNumber(object: MetadataStatus): number;
/** Status of a TaskRun. */
export declare enum TaskStatus {
    /** TASK_SCHEDULED - Scheduled in the Task Queue but not yet picked up by a Task Worker. */
    TASK_SCHEDULED = "TASK_SCHEDULED",
    /** TASK_RUNNING - Picked up by a Task Worker, but not yet reported or timed out. */
    TASK_RUNNING = "TASK_RUNNING",
    /** TASK_SUCCESS - Successfully completed. */
    TASK_SUCCESS = "TASK_SUCCESS",
    /** TASK_FAILED - Task Worker reported a technical failure while attempting to execute the TaskRun */
    TASK_FAILED = "TASK_FAILED",
    /** TASK_TIMEOUT - Task Worker did not report a result in time. */
    TASK_TIMEOUT = "TASK_TIMEOUT",
    /** TASK_OUTPUT_SERIALIZING_ERROR - Task Worker reported that it was unable to serialize the output of the TaskRun. */
    TASK_OUTPUT_SERIALIZING_ERROR = "TASK_OUTPUT_SERIALIZING_ERROR",
    /**
     * TASK_INPUT_VAR_SUB_ERROR - Task Worker was unable to deserialize the input variables into appropriate language-specific
     * objects to pass into the Task Function
     */
    TASK_INPUT_VAR_SUB_ERROR = "TASK_INPUT_VAR_SUB_ERROR",
    /** TASK_EXCEPTION - Task Function business logic determined that there was a business exception. */
    TASK_EXCEPTION = "TASK_EXCEPTION",
    /**
     * TASK_PENDING - Refers to a TaskAttempt that is not yet scheduled. This happens when using retries
     * with an ExponentialBackoffRetryPolicy: the TaskAttempt isn't supposed to be scheduled
     * until it "matures", but it does already exist.
     */
    TASK_PENDING = "TASK_PENDING",
    UNRECOGNIZED = "UNRECOGNIZED"
}
export declare function taskStatusFromJSON(object: any): TaskStatus;
export declare function taskStatusToNumber(object: TaskStatus): number;
/** Metrics */
export declare enum MetricsWindowLength {
    MINUTES_5 = "MINUTES_5",
    HOURS_2 = "HOURS_2",
    DAYS_1 = "DAYS_1",
    UNRECOGNIZED = "UNRECOGNIZED"
}
export declare function metricsWindowLengthFromJSON(object: any): MetricsWindowLength;
export declare function metricsWindowLengthToNumber(object: MetricsWindowLength): number;
/**
 * Type of a Varaible in LittleHorse. Corresponds to the possible value type's of a
 * VariableValue.
 */
export declare enum VariableType {
    /** JSON_OBJ - An object represented as a json string. */
    JSON_OBJ = "JSON_OBJ",
    /** JSON_ARR - A list represented as a json array string. */
    JSON_ARR = "JSON_ARR",
    /** DOUBLE - A 64-bit floating point number. */
    DOUBLE = "DOUBLE",
    /** BOOL - A boolean */
    BOOL = "BOOL",
    /** STR - A string */
    STR = "STR",
    /** INT - A 64-bit integer */
    INT = "INT",
    /** BYTES - A byte array */
    BYTES = "BYTES",
    UNRECOGNIZED = "UNRECOGNIZED"
}
export declare function variableTypeFromJSON(object: any): VariableType;
export declare function variableTypeToNumber(object: VariableType): number;
/** This enum is all of the types of technical failure that can occur in a WfRun. */
export declare enum LHErrorType {
    /** CHILD_FAILURE - A child ThreadRun failed with a technical ERROR. */
    CHILD_FAILURE = "CHILD_FAILURE",
    /** VAR_SUB_ERROR - Failed substituting input variables into a NodeRun. */
    VAR_SUB_ERROR = "VAR_SUB_ERROR",
    /** VAR_MUTATION_ERROR - Failed mutating variables after a NodeRun successfully completed. */
    VAR_MUTATION_ERROR = "VAR_MUTATION_ERROR",
    /** USER_TASK_CANCELLED - A UserTaskRun was cancelled (EVOLVING: this will become a Business EXCEPTION) */
    USER_TASK_CANCELLED = "USER_TASK_CANCELLED",
    /** TIMEOUT - A NodeRun failed due to a timeout. */
    TIMEOUT = "TIMEOUT",
    /** TASK_FAILURE - A TaskRun failed due to an unexpected error. */
    TASK_FAILURE = "TASK_FAILURE",
    /** VAR_ERROR - Wrapper for VAR_SUB_ERROR and VAR_MUTATION_ERROR */
    VAR_ERROR = "VAR_ERROR",
    /** TASK_ERROR - Wrapper for TASK_FALIURE and TIMEOUT */
    TASK_ERROR = "TASK_ERROR",
    /** INTERNAL_ERROR - An unexpected LittleHorse Internal error occurred. This is not expected to happen. */
    INTERNAL_ERROR = "INTERNAL_ERROR",
    UNRECOGNIZED = "UNRECOGNIZED"
}
export declare function lHErrorTypeFromJSON(object: any): LHErrorType;
export declare function lHErrorTypeToNumber(object: LHErrorType): number;
//# sourceMappingURL=common_enums.d.ts.map