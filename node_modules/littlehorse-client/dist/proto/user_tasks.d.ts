import _m0 from "protobufjs/minimal";
import { VariableType } from "./common_enums";
import { NodeRunId, TaskRunId, UserTaskDefId, UserTaskRunId } from "./object_id";
import { VariableValue } from "./variable";
/** The status that a UserTaskRun can be in. */
export declare enum UserTaskRunStatus {
    /** UNASSIGNED - Not assigned to a specific user yet. */
    UNASSIGNED = "UNASSIGNED",
    /** ASSIGNED - Assigned to a specific user, but not completed or cancelled yet. */
    ASSIGNED = "ASSIGNED",
    /** DONE - Done. */
    DONE = "DONE",
    /** CANCELLED - Cancelled. */
    CANCELLED = "CANCELLED",
    UNRECOGNIZED = "UNRECOGNIZED"
}
export declare function userTaskRunStatusFromJSON(object: any): UserTaskRunStatus;
export declare function userTaskRunStatusToNumber(object: UserTaskRunStatus): number;
/** UserTaskDef is the metadata blueprint for UserTaskRuns. */
export interface UserTaskDef {
    /** The name of the `UserTaskDef` */
    name: string;
    /** The version of the `UserTaskDef`. Only simple versioning is supported. */
    version: number;
    /**
     * Metadata field that does not impact WfRun execution. Useful for providing
     * context on the UserTaskRun, for example when displaying it on a general-purpose
     * task manager application.
     */
    description?: string | undefined;
    /**
     * These are the fields comprise the User Task. A User Task Manager application, or
     * any application used to complete a UserTaskRun, should inspect these fields and
     * display form entries for each one.
     */
    fields: UserTaskField[];
    /** The time the UserTaskRun was created. */
    createdAt: string | undefined;
}
/** A UserTaskField is a specific field of data to be entered into a UserTaskRun. */
export interface UserTaskField {
    /**
     * The name of the field. When a UserTaskRun is completed, the NodeOutput is a
     * single-level JSON_OBJ. Each key is the name of the field. Must be unique.
     */
    name: string;
    /** The type of the output. Must be a primitive type (STR, BOOL, INT, DOUBLE). */
    type: VariableType;
    /**
     * Optional description which can be displayed by the User Task UI application.
     * Does not affect WfRun execution.
     */
    description?: string | undefined;
    /**
     * The name to be displayed by the User Task UI application. Does not affect
     * WfRun execution.
     */
    displayName: string;
    /** Whether this field is required for UserTaskRun completion. */
    required: boolean;
}
/**
 * A UserTaskRun is a running instance of a UserTaskDef. It is created when a
 * ThreadRun arrives at a Node of type `USER_TASK`.
 */
export interface UserTaskRun {
    /** The ID of the UserTaskRun. */
    id: UserTaskRunId | undefined;
    /** The ID of the UserTaskDef that this UserTaskRun comes from. */
    userTaskDefId: UserTaskDefId | undefined;
    /**
     * Denotes the UserTaskRun as belonging to a specific User Group.
     *
     * The `user_group` does not refer to a group that is stored in LittleHorse; rather, it
     * is the responsibility of the application to keep track of user/group identity and ensure
     * that the user_group does indeed exist.
     *
     * Either `user_id` or `user_group` or both are set at any time.
     */
    userGroup?: string | undefined;
    /**
     * Denotes the UserTaskRun as assigned to a specific User ID. If this is set, then
     * the UserTaskRun is either in the ASSIGNED, DONE, or CANCELLED status.
     *
     * The `user_id` does not refer to a User that is stored in LittleHorse; rather, it
     * is the responsibility of the application to keep track of user identity and ensure
     * that the user_id does indeed exist.
     *
     * Either `user_id` or `user_group` or both are set at any time.
     */
    userId?: string | undefined;
    /**
     * The results of the UserTaskRun. Empty if the UserTaskRun has not yet been completed.
     * Each key in this map is the `name` of a corresponding `UserTaskField` on the
     * UserTaskDef.
     */
    results: {
        [key: string]: VariableValue;
    };
    /** Status of the UserTaskRun. Can be UNASSIGNED, ASSIGNED, DONE, or CANCELLED. */
    status: UserTaskRunStatus;
    /** A list of events that have happened. Used for auditing information. */
    events: UserTaskEvent[];
    /**
     * Notes about this UserTaskRun that are **specific to the WfRun**. These notes
     * are set by the WfSpec based on variables inside the specific `WfRun` and are
     * intended to be displayed on the User Task Manager application. They do not
     * affect WfRun execution.
     */
    notes?: string | undefined;
    /** The time that the UserTaskRun was created/scheduled. */
    scheduledTime: string | undefined;
    /** The NodeRun with which the UserTaskRun is associated. */
    nodeRunId: NodeRunId | undefined;
    /**
     * Current observed epoch of the UserTaskRun, related to the number of times it has been
     * updated or re-assigned. Used internally to implement automated reassignment and reminder
     * tasks.
     */
    epoch: number;
}
export interface UserTaskRun_ResultsEntry {
    key: string;
    value: VariableValue | undefined;
}
/** Re-Assigns a UserTaskRun to a specific userId or userGroup. */
export interface AssignUserTaskRunRequest {
    /** The UserTaskRun to assign to a new user_id or user_group. */
    userTaskRunId: UserTaskRunId | undefined;
    /**
     * If override_claim is set to false and the UserTaskRun is already assigned to
     * a user_id, then the request throws a FAILED_PRECONDITION error. If set to
     * true, then the old claim is overriden and the UserTaskRun is assigned to
     * the new user.
     */
    overrideClaim: boolean;
    /**
     * The new user_group to which the UserTaskRun is assigned. If not set, then
     * the user_group of the UserTaskRun is actively unset by this request. At least
     * one of the user_group and user_id must be set.
     */
    userGroup?: string | undefined;
    /**
     * The new user_id to which the UserTaskRun is assigned. If not set, then
     * the user_id of the UserTaskRun is actively unset by this request. At least
     * one of the user_group and user_id must be set.
     */
    userId?: string | undefined;
}
/** Completes a UserTaskRun with provided values. */
export interface CompleteUserTaskRunRequest {
    /** The id of UserTaskRun to complete. */
    userTaskRunId: UserTaskRunId | undefined;
    /**
     * A map from UserTaskField.name to a VariableValue containing the results of the
     * user filling out the form.
     */
    results: {
        [key: string]: VariableValue;
    };
    /** The ID of the user who executed the task. */
    userId: string;
}
export interface CompleteUserTaskRunRequest_ResultsEntry {
    key: string;
    value: VariableValue | undefined;
}
/** Cancels a UserTaskRun. */
export interface CancelUserTaskRunRequest {
    /** The id of the UserTaskRun to cancel. */
    userTaskRunId: UserTaskRunId | undefined;
}
/**
 * All TaskRun's have a "trigger reference" which refers to the WfRun Element that
 * caused the TaskRun to be scheduled. For example, a TaskRun on a regular TASK_NODE
 * has a TaskNodeReference.
 *
 * The UserTaskTriggerReference serves as the "Trigger Reference" for a TaskRun that
 * was scheduled by a lifecycle hook on a UserTaskRun (eg. a reminder task).
 *
 * The UserTaskTriggerReference is most useful in the WorkerContext of the Task Worker
 * SDK, which allows the Task Method to determine where the TaskRun comes from.
 */
export interface UserTaskTriggerReference {
    /** Is the NodeRun that the UserTaskRun belongs to. */
    nodeRunId: NodeRunId | undefined;
    /**
     * Is the index in the `events` field of the UserTaskRun that the TaskRun corresponds
     * to.
     */
    userTaskEventNumber: number;
    /**
     * Is the user_id that the UserTaskRun is assigned to. Unset if UserTaskRun is not
     * asigned to a specific user_id.
     */
    userId?: string | undefined;
    /**
     * Is the user_id that the UserTaskRun is assigned to. Unset if UserTaskRun is not
     * asigned to a specific user_id.
     */
    userGroup?: string | undefined;
}
/**
 * This is an event stored in the audit log of a `UserTaskRun` purely for observability
 * purposes.
 */
export interface UserTaskEvent {
    /** the time the event occurred. */
    time: string | undefined;
    /** Denotes that a TaskRun was scheduled via a trigger. */
    taskExecuted?: UserTaskEvent_UTETaskExecuted | undefined;
    /** Denotes that the UserTaskRun was assigned. */
    assigned?: UserTaskEvent_UTEAssigned | undefined;
    /** Denotes that the UserTaskRun was cancelled. */
    cancelled?: UserTaskEvent_UTECancelled | undefined;
}
/** Empty message used to denote that the `UserTaskRun` was cancelled. */
export interface UserTaskEvent_UTECancelled {
    message: string;
}
/** Message to denote that a `TaskRun` was scheduled by a trigger for this UserTaskRun. */
export interface UserTaskEvent_UTETaskExecuted {
    /** The `TaskRunId` of the scheduled `TaskRun` */
    taskRun: TaskRunId | undefined;
}
/** Message denoting that the UserTaskRun was assigned. */
export interface UserTaskEvent_UTEAssigned {
    /** The user_id before the ownership change, if set. */
    oldUserId?: string | undefined;
    /** The user_group before the ownership change, if set. */
    oldUserGroup?: string | undefined;
    /** The user_id after the ownership change, if set. */
    newUserId?: string | undefined;
    /** The user_group after the ownership change, if set. */
    newUserGroup?: string | undefined;
}
export declare const UserTaskDef: {
    encode(message: UserTaskDef, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserTaskDef;
    create(base?: DeepPartial<UserTaskDef>): UserTaskDef;
    fromPartial(object: DeepPartial<UserTaskDef>): UserTaskDef;
};
export declare const UserTaskField: {
    encode(message: UserTaskField, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserTaskField;
    create(base?: DeepPartial<UserTaskField>): UserTaskField;
    fromPartial(object: DeepPartial<UserTaskField>): UserTaskField;
};
export declare const UserTaskRun: {
    encode(message: UserTaskRun, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserTaskRun;
    create(base?: DeepPartial<UserTaskRun>): UserTaskRun;
    fromPartial(object: DeepPartial<UserTaskRun>): UserTaskRun;
};
export declare const UserTaskRun_ResultsEntry: {
    encode(message: UserTaskRun_ResultsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserTaskRun_ResultsEntry;
    create(base?: DeepPartial<UserTaskRun_ResultsEntry>): UserTaskRun_ResultsEntry;
    fromPartial(object: DeepPartial<UserTaskRun_ResultsEntry>): UserTaskRun_ResultsEntry;
};
export declare const AssignUserTaskRunRequest: {
    encode(message: AssignUserTaskRunRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AssignUserTaskRunRequest;
    create(base?: DeepPartial<AssignUserTaskRunRequest>): AssignUserTaskRunRequest;
    fromPartial(object: DeepPartial<AssignUserTaskRunRequest>): AssignUserTaskRunRequest;
};
export declare const CompleteUserTaskRunRequest: {
    encode(message: CompleteUserTaskRunRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CompleteUserTaskRunRequest;
    create(base?: DeepPartial<CompleteUserTaskRunRequest>): CompleteUserTaskRunRequest;
    fromPartial(object: DeepPartial<CompleteUserTaskRunRequest>): CompleteUserTaskRunRequest;
};
export declare const CompleteUserTaskRunRequest_ResultsEntry: {
    encode(message: CompleteUserTaskRunRequest_ResultsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CompleteUserTaskRunRequest_ResultsEntry;
    create(base?: DeepPartial<CompleteUserTaskRunRequest_ResultsEntry>): CompleteUserTaskRunRequest_ResultsEntry;
    fromPartial(object: DeepPartial<CompleteUserTaskRunRequest_ResultsEntry>): CompleteUserTaskRunRequest_ResultsEntry;
};
export declare const CancelUserTaskRunRequest: {
    encode(message: CancelUserTaskRunRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CancelUserTaskRunRequest;
    create(base?: DeepPartial<CancelUserTaskRunRequest>): CancelUserTaskRunRequest;
    fromPartial(object: DeepPartial<CancelUserTaskRunRequest>): CancelUserTaskRunRequest;
};
export declare const UserTaskTriggerReference: {
    encode(message: UserTaskTriggerReference, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserTaskTriggerReference;
    create(base?: DeepPartial<UserTaskTriggerReference>): UserTaskTriggerReference;
    fromPartial(object: DeepPartial<UserTaskTriggerReference>): UserTaskTriggerReference;
};
export declare const UserTaskEvent: {
    encode(message: UserTaskEvent, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserTaskEvent;
    create(base?: DeepPartial<UserTaskEvent>): UserTaskEvent;
    fromPartial(object: DeepPartial<UserTaskEvent>): UserTaskEvent;
};
export declare const UserTaskEvent_UTECancelled: {
    encode(message: UserTaskEvent_UTECancelled, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserTaskEvent_UTECancelled;
    create(base?: DeepPartial<UserTaskEvent_UTECancelled>): UserTaskEvent_UTECancelled;
    fromPartial(object: DeepPartial<UserTaskEvent_UTECancelled>): UserTaskEvent_UTECancelled;
};
export declare const UserTaskEvent_UTETaskExecuted: {
    encode(message: UserTaskEvent_UTETaskExecuted, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserTaskEvent_UTETaskExecuted;
    create(base?: DeepPartial<UserTaskEvent_UTETaskExecuted>): UserTaskEvent_UTETaskExecuted;
    fromPartial(object: DeepPartial<UserTaskEvent_UTETaskExecuted>): UserTaskEvent_UTETaskExecuted;
};
export declare const UserTaskEvent_UTEAssigned: {
    encode(message: UserTaskEvent_UTEAssigned, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserTaskEvent_UTEAssigned;
    create(base?: DeepPartial<UserTaskEvent_UTEAssigned>): UserTaskEvent_UTEAssigned;
    fromPartial(object: DeepPartial<UserTaskEvent_UTEAssigned>): UserTaskEvent_UTEAssigned;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=user_tasks.d.ts.map