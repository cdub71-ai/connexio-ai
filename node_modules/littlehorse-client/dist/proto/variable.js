"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               v4.23.4
// source: variable.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Variable = exports.VariableValue = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const timestamp_1 = require("./google/protobuf/timestamp");
const object_id_1 = require("./object_id");
function createBaseVariableValue() {
    return {
        jsonObj: undefined,
        jsonArr: undefined,
        double: undefined,
        bool: undefined,
        str: undefined,
        int: undefined,
        bytes: undefined,
    };
}
exports.VariableValue = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.jsonObj !== undefined) {
            writer.uint32(18).string(message.jsonObj);
        }
        if (message.jsonArr !== undefined) {
            writer.uint32(26).string(message.jsonArr);
        }
        if (message.double !== undefined) {
            writer.uint32(33).double(message.double);
        }
        if (message.bool !== undefined) {
            writer.uint32(40).bool(message.bool);
        }
        if (message.str !== undefined) {
            writer.uint32(50).string(message.str);
        }
        if (message.int !== undefined) {
            writer.uint32(56).int64(message.int);
        }
        if (message.bytes !== undefined) {
            writer.uint32(66).bytes(message.bytes);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVariableValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.jsonObj = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.jsonArr = reader.string();
                    continue;
                case 4:
                    if (tag !== 33) {
                        break;
                    }
                    message.double = reader.double();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.bool = reader.bool();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.str = reader.string();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.int = longToNumber(reader.int64());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.bytes = reader.bytes();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.VariableValue.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseVariableValue();
        message.jsonObj = (_a = object.jsonObj) !== null && _a !== void 0 ? _a : undefined;
        message.jsonArr = (_b = object.jsonArr) !== null && _b !== void 0 ? _b : undefined;
        message.double = (_c = object.double) !== null && _c !== void 0 ? _c : undefined;
        message.bool = (_d = object.bool) !== null && _d !== void 0 ? _d : undefined;
        message.str = (_e = object.str) !== null && _e !== void 0 ? _e : undefined;
        message.int = (_f = object.int) !== null && _f !== void 0 ? _f : undefined;
        message.bytes = (_g = object.bytes) !== null && _g !== void 0 ? _g : undefined;
        return message;
    },
};
function createBaseVariable() {
    return { id: undefined, value: undefined, createdAt: undefined, wfSpecId: undefined };
}
exports.Variable = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== undefined) {
            object_id_1.VariableId.encode(message.id, writer.uint32(10).fork()).ldelim();
        }
        if (message.value !== undefined) {
            exports.VariableValue.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        if (message.createdAt !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(26).fork()).ldelim();
        }
        if (message.wfSpecId !== undefined) {
            object_id_1.WfSpecId.encode(message.wfSpecId, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVariable();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.VariableId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = exports.VariableValue.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.createdAt = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.wfSpecId = object_id_1.WfSpecId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.Variable.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseVariable();
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.VariableId.fromPartial(object.id) : undefined;
        message.value = (object.value !== undefined && object.value !== null)
            ? exports.VariableValue.fromPartial(object.value)
            : undefined;
        message.createdAt = (_a = object.createdAt) !== null && _a !== void 0 ? _a : undefined;
        message.wfSpecId = (object.wfSpecId !== undefined && object.wfSpecId !== null)
            ? object_id_1.WfSpecId.fromPartial(object.wfSpecId)
            : undefined;
        return message;
    },
};
function toTimestamp(dateStr) {
    const date = new globalThis.Date(dateStr);
    const seconds = Math.trunc(date.getTime() / 1000);
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis).toISOString();
}
function longToNumber(long) {
    if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
        throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=variable.js.map