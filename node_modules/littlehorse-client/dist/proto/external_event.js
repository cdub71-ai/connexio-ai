"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               v4.23.4
// source: external_event.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExternalEventRetentionPolicy = exports.ExternalEventDef = exports.ExternalEvent = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const timestamp_1 = require("./google/protobuf/timestamp");
const object_id_1 = require("./object_id");
const variable_1 = require("./variable");
function createBaseExternalEvent() {
    return {
        id: undefined,
        createdAt: undefined,
        content: undefined,
        threadRunNumber: undefined,
        nodeRunPosition: undefined,
        claimed: false,
    };
}
exports.ExternalEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== undefined) {
            object_id_1.ExternalEventId.encode(message.id, writer.uint32(10).fork()).ldelim();
        }
        if (message.createdAt !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(18).fork()).ldelim();
        }
        if (message.content !== undefined) {
            variable_1.VariableValue.encode(message.content, writer.uint32(26).fork()).ldelim();
        }
        if (message.threadRunNumber !== undefined) {
            writer.uint32(32).int32(message.threadRunNumber);
        }
        if (message.nodeRunPosition !== undefined) {
            writer.uint32(40).int32(message.nodeRunPosition);
        }
        if (message.claimed !== false) {
            writer.uint32(48).bool(message.claimed);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExternalEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.ExternalEventId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.createdAt = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.content = variable_1.VariableValue.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.threadRunNumber = reader.int32();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.nodeRunPosition = reader.int32();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.claimed = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.ExternalEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseExternalEvent();
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.ExternalEventId.fromPartial(object.id) : undefined;
        message.createdAt = (_a = object.createdAt) !== null && _a !== void 0 ? _a : undefined;
        message.content = (object.content !== undefined && object.content !== null)
            ? variable_1.VariableValue.fromPartial(object.content)
            : undefined;
        message.threadRunNumber = (_b = object.threadRunNumber) !== null && _b !== void 0 ? _b : undefined;
        message.nodeRunPosition = (_c = object.nodeRunPosition) !== null && _c !== void 0 ? _c : undefined;
        message.claimed = (_d = object.claimed) !== null && _d !== void 0 ? _d : false;
        return message;
    },
};
function createBaseExternalEventDef() {
    return { id: undefined, createdAt: undefined, retentionPolicy: undefined };
}
exports.ExternalEventDef = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== undefined) {
            object_id_1.ExternalEventDefId.encode(message.id, writer.uint32(10).fork()).ldelim();
        }
        if (message.createdAt !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(18).fork()).ldelim();
        }
        if (message.retentionPolicy !== undefined) {
            exports.ExternalEventRetentionPolicy.encode(message.retentionPolicy, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExternalEventDef();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.ExternalEventDefId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.createdAt = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.retentionPolicy = exports.ExternalEventRetentionPolicy.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.ExternalEventDef.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseExternalEventDef();
        message.id = (object.id !== undefined && object.id !== null)
            ? object_id_1.ExternalEventDefId.fromPartial(object.id)
            : undefined;
        message.createdAt = (_a = object.createdAt) !== null && _a !== void 0 ? _a : undefined;
        message.retentionPolicy = (object.retentionPolicy !== undefined && object.retentionPolicy !== null)
            ? exports.ExternalEventRetentionPolicy.fromPartial(object.retentionPolicy)
            : undefined;
        return message;
    },
};
function createBaseExternalEventRetentionPolicy() {
    return { secondsAfterPut: undefined };
}
exports.ExternalEventRetentionPolicy = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.secondsAfterPut !== undefined) {
            writer.uint32(8).int64(message.secondsAfterPut);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExternalEventRetentionPolicy();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.secondsAfterPut = longToNumber(reader.int64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.ExternalEventRetentionPolicy.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseExternalEventRetentionPolicy();
        message.secondsAfterPut = (_a = object.secondsAfterPut) !== null && _a !== void 0 ? _a : undefined;
        return message;
    },
};
function toTimestamp(dateStr) {
    const date = new globalThis.Date(dateStr);
    const seconds = Math.trunc(date.getTime() / 1000);
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis).toISOString();
}
function longToNumber(long) {
    if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
        throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=external_event.js.map