"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               v4.23.4
// source: common_wfspec.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskNode = exports.ExponentialBackoffRetryPolicy = exports.UTActionTrigger_UTAReassign = exports.UTActionTrigger_UTATask = exports.UTActionTrigger_UTACancel = exports.UTActionTrigger = exports.VariableDef = exports.VariableMutation_NodeOutputSource = exports.VariableMutation = exports.VariableAssignment_FormatString = exports.VariableAssignment = exports.uTActionTrigger_UTHookToNumber = exports.uTActionTrigger_UTHookFromJSON = exports.UTActionTrigger_UTHook = exports.comparatorToNumber = exports.comparatorFromJSON = exports.Comparator = exports.variableMutationTypeToNumber = exports.variableMutationTypeFromJSON = exports.VariableMutationType = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const common_enums_1 = require("./common_enums");
const object_id_1 = require("./object_id");
const variable_1 = require("./variable");
/** Enumerates the available operations to mutate a variable in a WfRun. */
var VariableMutationType;
(function (VariableMutationType) {
    /** ASSIGN - Set the variable specified by the LHS to the value of the RHS. */
    VariableMutationType["ASSIGN"] = "ASSIGN";
    /** ADD - Add the RHS to the LHS. */
    VariableMutationType["ADD"] = "ADD";
    /** EXTEND - Append the RHS to the LHS (valid if the LHS is a STR or JSON_ARR) */
    VariableMutationType["EXTEND"] = "EXTEND";
    /** SUBTRACT - Subtract the RHS from the LHS (both must be INT or DOUBLE) */
    VariableMutationType["SUBTRACT"] = "SUBTRACT";
    /** MULTIPLY - Multiply the LHS by the RHS (both must be INT or DOUBLE) */
    VariableMutationType["MULTIPLY"] = "MULTIPLY";
    /** DIVIDE - Divide the LHS by the RHS (both must be INT or DOUBLE) */
    VariableMutationType["DIVIDE"] = "DIVIDE";
    /** REMOVE_IF_PRESENT - Remove any occurrences of RHS from LHS (LHS must be JSON_ARR) */
    VariableMutationType["REMOVE_IF_PRESENT"] = "REMOVE_IF_PRESENT";
    /** REMOVE_INDEX - Remove item at index RHS from LHS (LHS must be JSON_ARR) */
    VariableMutationType["REMOVE_INDEX"] = "REMOVE_INDEX";
    /** REMOVE_KEY - Remove the key specified by RHS from the LHS (LHS must be JSON_OBJ) */
    VariableMutationType["REMOVE_KEY"] = "REMOVE_KEY";
    VariableMutationType["UNRECOGNIZED"] = "UNRECOGNIZED";
})(VariableMutationType || (exports.VariableMutationType = VariableMutationType = {}));
function variableMutationTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "ASSIGN":
            return VariableMutationType.ASSIGN;
        case 1:
        case "ADD":
            return VariableMutationType.ADD;
        case 2:
        case "EXTEND":
            return VariableMutationType.EXTEND;
        case 3:
        case "SUBTRACT":
            return VariableMutationType.SUBTRACT;
        case 4:
        case "MULTIPLY":
            return VariableMutationType.MULTIPLY;
        case 5:
        case "DIVIDE":
            return VariableMutationType.DIVIDE;
        case 6:
        case "REMOVE_IF_PRESENT":
            return VariableMutationType.REMOVE_IF_PRESENT;
        case 7:
        case "REMOVE_INDEX":
            return VariableMutationType.REMOVE_INDEX;
        case 8:
        case "REMOVE_KEY":
            return VariableMutationType.REMOVE_KEY;
        case -1:
        case "UNRECOGNIZED":
        default:
            return VariableMutationType.UNRECOGNIZED;
    }
}
exports.variableMutationTypeFromJSON = variableMutationTypeFromJSON;
function variableMutationTypeToNumber(object) {
    switch (object) {
        case VariableMutationType.ASSIGN:
            return 0;
        case VariableMutationType.ADD:
            return 1;
        case VariableMutationType.EXTEND:
            return 2;
        case VariableMutationType.SUBTRACT:
            return 3;
        case VariableMutationType.MULTIPLY:
            return 4;
        case VariableMutationType.DIVIDE:
            return 5;
        case VariableMutationType.REMOVE_IF_PRESENT:
            return 6;
        case VariableMutationType.REMOVE_INDEX:
            return 7;
        case VariableMutationType.REMOVE_KEY:
            return 8;
        case VariableMutationType.UNRECOGNIZED:
        default:
            return -1;
    }
}
exports.variableMutationTypeToNumber = variableMutationTypeToNumber;
/** Operator for comparing two values to create a boolean expression. */
var Comparator;
(function (Comparator) {
    /** LESS_THAN - Equivalent to `<`. Only valid for primitive types (no JSON_OBJ or JSON_ARR). */
    Comparator["LESS_THAN"] = "LESS_THAN";
    /** GREATER_THAN - Equivalent to `>`. Only valid for primitive types (no JSON_OBJ or JSON_ARR). */
    Comparator["GREATER_THAN"] = "GREATER_THAN";
    /** LESS_THAN_EQ - Equivalent to `<=`. Only valid for primitive types (no JSON_OBJ or JSON_ARR). */
    Comparator["LESS_THAN_EQ"] = "LESS_THAN_EQ";
    /** GREATER_THAN_EQ - Equivalent to `>=`. Only valid for primitive types (no JSON_OBJ or JSON_ARR). */
    Comparator["GREATER_THAN_EQ"] = "GREATER_THAN_EQ";
    /**
     * EQUALS - This is valid for any variable type, and is similar to .equals() in Java.
     *
     * One note: if the RHS is a different type from the LHS, then LittleHorse will
     * try to cast the RHS to the same type as the LHS. If the cast fails, then the
     * ThreadRun fails with a VAR_SUB_ERROR.
     */
    Comparator["EQUALS"] = "EQUALS";
    /** NOT_EQUALS - This is the inverse of `EQUALS` */
    Comparator["NOT_EQUALS"] = "NOT_EQUALS";
    /**
     * IN - Only valid if the RHS is a JSON_OBJ or JSON_ARR. Valid for any type on the LHS.
     *
     * For the JSON_OBJ type, this returns true if the LHS is equal to a *KEY* in the
     * RHS. For the JSON_ARR type, it returns true if one of the elements of the RHS
     * is equal to the LHS.
     */
    Comparator["IN"] = "IN";
    /** NOT_IN - The inverse of IN. */
    Comparator["NOT_IN"] = "NOT_IN";
    Comparator["UNRECOGNIZED"] = "UNRECOGNIZED";
})(Comparator || (exports.Comparator = Comparator = {}));
function comparatorFromJSON(object) {
    switch (object) {
        case 0:
        case "LESS_THAN":
            return Comparator.LESS_THAN;
        case 1:
        case "GREATER_THAN":
            return Comparator.GREATER_THAN;
        case 2:
        case "LESS_THAN_EQ":
            return Comparator.LESS_THAN_EQ;
        case 3:
        case "GREATER_THAN_EQ":
            return Comparator.GREATER_THAN_EQ;
        case 4:
        case "EQUALS":
            return Comparator.EQUALS;
        case 5:
        case "NOT_EQUALS":
            return Comparator.NOT_EQUALS;
        case 6:
        case "IN":
            return Comparator.IN;
        case 7:
        case "NOT_IN":
            return Comparator.NOT_IN;
        case -1:
        case "UNRECOGNIZED":
        default:
            return Comparator.UNRECOGNIZED;
    }
}
exports.comparatorFromJSON = comparatorFromJSON;
function comparatorToNumber(object) {
    switch (object) {
        case Comparator.LESS_THAN:
            return 0;
        case Comparator.GREATER_THAN:
            return 1;
        case Comparator.LESS_THAN_EQ:
            return 2;
        case Comparator.GREATER_THAN_EQ:
            return 3;
        case Comparator.EQUALS:
            return 4;
        case Comparator.NOT_EQUALS:
            return 5;
        case Comparator.IN:
            return 6;
        case Comparator.NOT_IN:
            return 7;
        case Comparator.UNRECOGNIZED:
        default:
            return -1;
    }
}
exports.comparatorToNumber = comparatorToNumber;
/** Enumerates the different lifecycle hooks that can cause the timer to start running. */
var UTActionTrigger_UTHook;
(function (UTActionTrigger_UTHook) {
    /**
     * ON_ARRIVAL - The hook should be scheduled `delay_seconds` after the UserTaskRun is created. This
     * hook only causes the action to be scheduled once.
     */
    UTActionTrigger_UTHook["ON_ARRIVAL"] = "ON_ARRIVAL";
    /**
     * ON_TASK_ASSIGNED - The hook should be scheduled `delay_seconds` after the ownership of the UserTaskRun
     * changes. This hook causes the Action to be scheduled one or more times. The first
     * time is scheduled when the UserTaskRun is created, since we treat the change from
     * "UserTaskRun is nonexistent" to "UserTaskRun is owned by a userId or userGroup" as
     * a change in ownership.
     */
    UTActionTrigger_UTHook["ON_TASK_ASSIGNED"] = "ON_TASK_ASSIGNED";
    UTActionTrigger_UTHook["UNRECOGNIZED"] = "UNRECOGNIZED";
})(UTActionTrigger_UTHook || (exports.UTActionTrigger_UTHook = UTActionTrigger_UTHook = {}));
function uTActionTrigger_UTHookFromJSON(object) {
    switch (object) {
        case 0:
        case "ON_ARRIVAL":
            return UTActionTrigger_UTHook.ON_ARRIVAL;
        case 1:
        case "ON_TASK_ASSIGNED":
            return UTActionTrigger_UTHook.ON_TASK_ASSIGNED;
        case -1:
        case "UNRECOGNIZED":
        default:
            return UTActionTrigger_UTHook.UNRECOGNIZED;
    }
}
exports.uTActionTrigger_UTHookFromJSON = uTActionTrigger_UTHookFromJSON;
function uTActionTrigger_UTHookToNumber(object) {
    switch (object) {
        case UTActionTrigger_UTHook.ON_ARRIVAL:
            return 0;
        case UTActionTrigger_UTHook.ON_TASK_ASSIGNED:
            return 1;
        case UTActionTrigger_UTHook.UNRECOGNIZED:
        default:
            return -1;
    }
}
exports.uTActionTrigger_UTHookToNumber = uTActionTrigger_UTHookToNumber;
function createBaseVariableAssignment() {
    return { jsonPath: undefined, variableName: undefined, literalValue: undefined, formatString: undefined };
}
exports.VariableAssignment = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.jsonPath !== undefined) {
            writer.uint32(10).string(message.jsonPath);
        }
        if (message.variableName !== undefined) {
            writer.uint32(18).string(message.variableName);
        }
        if (message.literalValue !== undefined) {
            variable_1.VariableValue.encode(message.literalValue, writer.uint32(26).fork()).ldelim();
        }
        if (message.formatString !== undefined) {
            exports.VariableAssignment_FormatString.encode(message.formatString, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVariableAssignment();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.jsonPath = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.variableName = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.literalValue = variable_1.VariableValue.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.formatString = exports.VariableAssignment_FormatString.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.VariableAssignment.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseVariableAssignment();
        message.jsonPath = (_a = object.jsonPath) !== null && _a !== void 0 ? _a : undefined;
        message.variableName = (_b = object.variableName) !== null && _b !== void 0 ? _b : undefined;
        message.literalValue = (object.literalValue !== undefined && object.literalValue !== null)
            ? variable_1.VariableValue.fromPartial(object.literalValue)
            : undefined;
        message.formatString = (object.formatString !== undefined && object.formatString !== null)
            ? exports.VariableAssignment_FormatString.fromPartial(object.formatString)
            : undefined;
        return message;
    },
};
function createBaseVariableAssignment_FormatString() {
    return { format: undefined, args: [] };
}
exports.VariableAssignment_FormatString = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.format !== undefined) {
            exports.VariableAssignment.encode(message.format, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.args) {
            exports.VariableAssignment.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVariableAssignment_FormatString();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.format = exports.VariableAssignment.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.args.push(exports.VariableAssignment.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.VariableAssignment_FormatString.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseVariableAssignment_FormatString();
        message.format = (object.format !== undefined && object.format !== null)
            ? exports.VariableAssignment.fromPartial(object.format)
            : undefined;
        message.args = ((_a = object.args) === null || _a === void 0 ? void 0 : _a.map((e) => exports.VariableAssignment.fromPartial(e))) || [];
        return message;
    },
};
function createBaseVariableMutation() {
    return {
        lhsName: "",
        lhsJsonPath: undefined,
        operation: VariableMutationType.ASSIGN,
        sourceVariable: undefined,
        literalValue: undefined,
        nodeOutput: undefined,
    };
}
exports.VariableMutation = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.lhsName !== "") {
            writer.uint32(10).string(message.lhsName);
        }
        if (message.lhsJsonPath !== undefined) {
            writer.uint32(18).string(message.lhsJsonPath);
        }
        if (message.operation !== VariableMutationType.ASSIGN) {
            writer.uint32(24).int32(variableMutationTypeToNumber(message.operation));
        }
        if (message.sourceVariable !== undefined) {
            exports.VariableAssignment.encode(message.sourceVariable, writer.uint32(34).fork()).ldelim();
        }
        if (message.literalValue !== undefined) {
            variable_1.VariableValue.encode(message.literalValue, writer.uint32(42).fork()).ldelim();
        }
        if (message.nodeOutput !== undefined) {
            exports.VariableMutation_NodeOutputSource.encode(message.nodeOutput, writer.uint32(50).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVariableMutation();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.lhsName = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.lhsJsonPath = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.operation = variableMutationTypeFromJSON(reader.int32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.sourceVariable = exports.VariableAssignment.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.literalValue = variable_1.VariableValue.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.nodeOutput = exports.VariableMutation_NodeOutputSource.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.VariableMutation.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseVariableMutation();
        message.lhsName = (_a = object.lhsName) !== null && _a !== void 0 ? _a : "";
        message.lhsJsonPath = (_b = object.lhsJsonPath) !== null && _b !== void 0 ? _b : undefined;
        message.operation = (_c = object.operation) !== null && _c !== void 0 ? _c : VariableMutationType.ASSIGN;
        message.sourceVariable = (object.sourceVariable !== undefined && object.sourceVariable !== null)
            ? exports.VariableAssignment.fromPartial(object.sourceVariable)
            : undefined;
        message.literalValue = (object.literalValue !== undefined && object.literalValue !== null)
            ? variable_1.VariableValue.fromPartial(object.literalValue)
            : undefined;
        message.nodeOutput = (object.nodeOutput !== undefined && object.nodeOutput !== null)
            ? exports.VariableMutation_NodeOutputSource.fromPartial(object.nodeOutput)
            : undefined;
        return message;
    },
};
function createBaseVariableMutation_NodeOutputSource() {
    return { jsonpath: undefined };
}
exports.VariableMutation_NodeOutputSource = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.jsonpath !== undefined) {
            writer.uint32(82).string(message.jsonpath);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVariableMutation_NodeOutputSource();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.jsonpath = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.VariableMutation_NodeOutputSource.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseVariableMutation_NodeOutputSource();
        message.jsonpath = (_a = object.jsonpath) !== null && _a !== void 0 ? _a : undefined;
        return message;
    },
};
function createBaseVariableDef() {
    return { type: common_enums_1.VariableType.JSON_OBJ, name: "", defaultValue: undefined };
}
exports.VariableDef = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.type !== common_enums_1.VariableType.JSON_OBJ) {
            writer.uint32(8).int32((0, common_enums_1.variableTypeToNumber)(message.type));
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.defaultValue !== undefined) {
            variable_1.VariableValue.encode(message.defaultValue, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVariableDef();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.type = (0, common_enums_1.variableTypeFromJSON)(reader.int32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.defaultValue = variable_1.VariableValue.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.VariableDef.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseVariableDef();
        message.type = (_a = object.type) !== null && _a !== void 0 ? _a : common_enums_1.VariableType.JSON_OBJ;
        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : "";
        message.defaultValue = (object.defaultValue !== undefined && object.defaultValue !== null)
            ? variable_1.VariableValue.fromPartial(object.defaultValue)
            : undefined;
        return message;
    },
};
function createBaseUTActionTrigger() {
    return {
        task: undefined,
        cancel: undefined,
        reassign: undefined,
        delaySeconds: undefined,
        hook: UTActionTrigger_UTHook.ON_ARRIVAL,
    };
}
exports.UTActionTrigger = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.task !== undefined) {
            exports.UTActionTrigger_UTATask.encode(message.task, writer.uint32(10).fork()).ldelim();
        }
        if (message.cancel !== undefined) {
            exports.UTActionTrigger_UTACancel.encode(message.cancel, writer.uint32(18).fork()).ldelim();
        }
        if (message.reassign !== undefined) {
            exports.UTActionTrigger_UTAReassign.encode(message.reassign, writer.uint32(26).fork()).ldelim();
        }
        if (message.delaySeconds !== undefined) {
            exports.VariableAssignment.encode(message.delaySeconds, writer.uint32(42).fork()).ldelim();
        }
        if (message.hook !== UTActionTrigger_UTHook.ON_ARRIVAL) {
            writer.uint32(48).int32(uTActionTrigger_UTHookToNumber(message.hook));
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUTActionTrigger();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.task = exports.UTActionTrigger_UTATask.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.cancel = exports.UTActionTrigger_UTACancel.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.reassign = exports.UTActionTrigger_UTAReassign.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.delaySeconds = exports.VariableAssignment.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.hook = uTActionTrigger_UTHookFromJSON(reader.int32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.UTActionTrigger.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseUTActionTrigger();
        message.task = (object.task !== undefined && object.task !== null)
            ? exports.UTActionTrigger_UTATask.fromPartial(object.task)
            : undefined;
        message.cancel = (object.cancel !== undefined && object.cancel !== null)
            ? exports.UTActionTrigger_UTACancel.fromPartial(object.cancel)
            : undefined;
        message.reassign = (object.reassign !== undefined && object.reassign !== null)
            ? exports.UTActionTrigger_UTAReassign.fromPartial(object.reassign)
            : undefined;
        message.delaySeconds = (object.delaySeconds !== undefined && object.delaySeconds !== null)
            ? exports.VariableAssignment.fromPartial(object.delaySeconds)
            : undefined;
        message.hook = (_a = object.hook) !== null && _a !== void 0 ? _a : UTActionTrigger_UTHook.ON_ARRIVAL;
        return message;
    },
};
function createBaseUTActionTrigger_UTACancel() {
    return {};
}
exports.UTActionTrigger_UTACancel = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUTActionTrigger_UTACancel();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.UTActionTrigger_UTACancel.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseUTActionTrigger_UTACancel();
        return message;
    },
};
function createBaseUTActionTrigger_UTATask() {
    return { task: undefined, mutations: [] };
}
exports.UTActionTrigger_UTATask = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.task !== undefined) {
            exports.TaskNode.encode(message.task, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.mutations) {
            exports.VariableMutation.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUTActionTrigger_UTATask();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.task = exports.TaskNode.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.mutations.push(exports.VariableMutation.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.UTActionTrigger_UTATask.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseUTActionTrigger_UTATask();
        message.task = (object.task !== undefined && object.task !== null) ? exports.TaskNode.fromPartial(object.task) : undefined;
        message.mutations = ((_a = object.mutations) === null || _a === void 0 ? void 0 : _a.map((e) => exports.VariableMutation.fromPartial(e))) || [];
        return message;
    },
};
function createBaseUTActionTrigger_UTAReassign() {
    return { userId: undefined, userGroup: undefined };
}
exports.UTActionTrigger_UTAReassign = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.userId !== undefined) {
            exports.VariableAssignment.encode(message.userId, writer.uint32(10).fork()).ldelim();
        }
        if (message.userGroup !== undefined) {
            exports.VariableAssignment.encode(message.userGroup, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUTActionTrigger_UTAReassign();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.userId = exports.VariableAssignment.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.userGroup = exports.VariableAssignment.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.UTActionTrigger_UTAReassign.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseUTActionTrigger_UTAReassign();
        message.userId = (object.userId !== undefined && object.userId !== null)
            ? exports.VariableAssignment.fromPartial(object.userId)
            : undefined;
        message.userGroup = (object.userGroup !== undefined && object.userGroup !== null)
            ? exports.VariableAssignment.fromPartial(object.userGroup)
            : undefined;
        return message;
    },
};
function createBaseExponentialBackoffRetryPolicy() {
    return { baseIntervalMs: 0, maxDelayMs: 0, multiplier: 0 };
}
exports.ExponentialBackoffRetryPolicy = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.baseIntervalMs !== 0) {
            writer.uint32(8).int32(message.baseIntervalMs);
        }
        if (message.maxDelayMs !== 0) {
            writer.uint32(16).int64(message.maxDelayMs);
        }
        if (message.multiplier !== 0) {
            writer.uint32(29).float(message.multiplier);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExponentialBackoffRetryPolicy();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.baseIntervalMs = reader.int32();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.maxDelayMs = longToNumber(reader.int64());
                    continue;
                case 3:
                    if (tag !== 29) {
                        break;
                    }
                    message.multiplier = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.ExponentialBackoffRetryPolicy.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseExponentialBackoffRetryPolicy();
        message.baseIntervalMs = (_a = object.baseIntervalMs) !== null && _a !== void 0 ? _a : 0;
        message.maxDelayMs = (_b = object.maxDelayMs) !== null && _b !== void 0 ? _b : 0;
        message.multiplier = (_c = object.multiplier) !== null && _c !== void 0 ? _c : 0;
        return message;
    },
};
function createBaseTaskNode() {
    return {
        taskDefId: undefined,
        dynamicTask: undefined,
        timeoutSeconds: 0,
        retries: 0,
        exponentialBackoff: undefined,
        variables: [],
    };
}
exports.TaskNode = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.taskDefId !== undefined) {
            object_id_1.TaskDefId.encode(message.taskDefId, writer.uint32(10).fork()).ldelim();
        }
        if (message.dynamicTask !== undefined) {
            exports.VariableAssignment.encode(message.dynamicTask, writer.uint32(50).fork()).ldelim();
        }
        if (message.timeoutSeconds !== 0) {
            writer.uint32(16).int32(message.timeoutSeconds);
        }
        if (message.retries !== 0) {
            writer.uint32(24).int32(message.retries);
        }
        if (message.exponentialBackoff !== undefined) {
            exports.ExponentialBackoffRetryPolicy.encode(message.exponentialBackoff, writer.uint32(42).fork()).ldelim();
        }
        for (const v of message.variables) {
            exports.VariableAssignment.encode(v, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTaskNode();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.taskDefId = object_id_1.TaskDefId.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.dynamicTask = exports.VariableAssignment.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.timeoutSeconds = reader.int32();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.retries = reader.int32();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.exponentialBackoff = exports.ExponentialBackoffRetryPolicy.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.variables.push(exports.VariableAssignment.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.TaskNode.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseTaskNode();
        message.taskDefId = (object.taskDefId !== undefined && object.taskDefId !== null)
            ? object_id_1.TaskDefId.fromPartial(object.taskDefId)
            : undefined;
        message.dynamicTask = (object.dynamicTask !== undefined && object.dynamicTask !== null)
            ? exports.VariableAssignment.fromPartial(object.dynamicTask)
            : undefined;
        message.timeoutSeconds = (_a = object.timeoutSeconds) !== null && _a !== void 0 ? _a : 0;
        message.retries = (_b = object.retries) !== null && _b !== void 0 ? _b : 0;
        message.exponentialBackoff = (object.exponentialBackoff !== undefined && object.exponentialBackoff !== null)
            ? exports.ExponentialBackoffRetryPolicy.fromPartial(object.exponentialBackoff)
            : undefined;
        message.variables = ((_c = object.variables) === null || _c === void 0 ? void 0 : _c.map((e) => exports.VariableAssignment.fromPartial(e))) || [];
        return message;
    },
};
function longToNumber(long) {
    if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
        throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=common_wfspec.js.map