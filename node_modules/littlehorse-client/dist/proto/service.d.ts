/// <reference types="node" />
import { type CallContext, type CallOptions } from "nice-grpc-common";
import _m0 from "protobufjs/minimal";
import { DeletePrincipalRequest, Principal, PutPrincipalRequest, PutTenantRequest, Tenant } from "./acls";
import { LHStatus, MetricsWindowLength, TaskStatus, VariableType } from "./common_enums";
import { VariableDef } from "./common_wfspec";
import { ExternalEvent, ExternalEventDef, ExternalEventRetentionPolicy } from "./external_event";
import { Empty } from "./google/protobuf/empty";
import { NodeRun } from "./node_run";
import { ExternalEventDefId, ExternalEventId, NodeRunId, PrincipalId, TaskDefId, TaskRunId, TaskWorkerGroupId, TenantId, UserTaskDefId, UserTaskRunId, VariableId, WfRunId, WfSpecId, WorkflowEventDefId, WorkflowEventId } from "./object_id";
import { TaskDef } from "./task_def";
import { LHTaskError, LHTaskException, TaskRun, TaskRunSource, VarNameAndVal } from "./task_run";
import { AssignUserTaskRunRequest, CancelUserTaskRunRequest, CompleteUserTaskRunRequest, UserTaskDef, UserTaskField, UserTaskRun, UserTaskRunStatus } from "./user_tasks";
import { Variable, VariableValue } from "./variable";
import { WfRun } from "./wf_run";
import { ThreadSpec, WfSpec, WfSpec_ParentWfSpecReference, WfSpecVersionMigration, WorkflowRetentionPolicy } from "./wf_spec";
import { WorkflowEvent, WorkflowEventDef } from "./workflow_event";
/**
 * This enum controls the behavior of a PutWfSpecRequest when a WfSpec with the same
 * name previously exists.
 */
export declare enum AllowedUpdateType {
    /**
     * ALL_UPDATES - Allows any update: both minor (revsion) changes and breaking (majorVersion) changes
     * are accepted
     */
    ALL_UPDATES = "ALL_UPDATES",
    /**
     * MINOR_REVISION_UPDATES - Allows only backwards-compatible changes that do not change the required input variables
     * or the searchable variables in the WfSpec.
     */
    MINOR_REVISION_UPDATES = "MINOR_REVISION_UPDATES",
    /** NO_UPDATES - Rejects any changes to the WfSpec. */
    NO_UPDATES = "NO_UPDATES",
    UNRECOGNIZED = "UNRECOGNIZED"
}
export declare function allowedUpdateTypeFromJSON(object: any): AllowedUpdateType;
export declare function allowedUpdateTypeToNumber(object: AllowedUpdateType): number;
/** Returns the UserTaskDef with a given name and the highest version number. */
export interface GetLatestUserTaskDefRequest {
    /** The name of the UserTaskDef to search for. */
    name: string;
}
/**
 * Creates a WfSpec. Generally, this request is generated by the Workflow object in
 * our various SDK's.
 */
export interface PutWfSpecRequest {
    /** The name of the resulting WfSpec. */
    name: string;
    /** Map from name the ThreadSpec. */
    threadSpecs: {
        [key: string]: ThreadSpec;
    };
    /** The name of the ThreadSpec to be used as the workflow entrypoint. */
    entrypointThreadName: string;
    /**
     * Optional policy to determine how long a WfRun is retained in the data store after
     * it is completed or terminated.
     */
    retentionPolicy?: WorkflowRetentionPolicy | undefined;
    /**
     * Parent WfSpec Reference. If this is set, then all WfRun's for this WfSpec *MUST* be
     * Child WfRun's of the specified WfSpec.
     */
    parentWfSpec?: WfSpec_ParentWfSpecReference | undefined;
    /**
     * Configures the behavior of this individual request. Can be used to prevent
     * breaking changes to the WfSpec, prevent any changes to the WfSpec, or allow
     * all changes to the WfSpec.
     */
    allowedUpdates: AllowedUpdateType;
}
export interface PutWfSpecRequest_ThreadSpecsEntry {
    key: string;
    value: ThreadSpec | undefined;
}
/** Creates a TaskDef. */
export interface PutTaskDefRequest {
    /** The name of the TaskDef to create. */
    name: string;
    /**
     * Variables required to execute the TaskDef. Normally, these are automatically
     * generated by the Task Worker SDK.
     */
    inputVars: VariableDef[];
}
/** EXPERIMENTAL: Creates a WorkflowEventDef */
export interface PutWorkflowEventDefRequest {
    name: string;
    type: VariableType;
}
/** Creates a UserTaskDef. */
export interface PutUserTaskDefRequest {
    /** The name of the UserTaskDef to create. */
    name: string;
    /**
     * The fields that should be presented to the user on the screen in order to fill
     * out the User Task. Note that these fields also define a data contract for the
     * result of the UserTaskDef.
     */
    fields: UserTaskField[];
    /**
     * Optional metadata field to store user-defined data. Does not impact workflow
     * execution. Fine to store up to a few KB of text here.
     */
    description?: string | undefined;
}
/** Field to create an ExternalEventDef. */
export interface PutExternalEventDefRequest {
    /** The name of the resulting ExternalEventDef. */
    name: string;
    /**
     * Policy to determine how long an ExternalEvent is retained after creation if it
     * is not yet claimed by a WfRun. Note that once a WfRun has been matched with the
     * ExternalEvent, the ExternalEvent is deleted if/when that WfRun is deleted.
     * If not set, then ExternalEvent's are not deleted if they are not matched with
     * a WfRun.
     *
     * A future version of LittleHorse will allow changing the retention_policy, which
     * will trigger a cleanup of old `ExternalEvent`s.
     */
    retentionPolicy: ExternalEventRetentionPolicy | undefined;
}
/** Request used to create an ExternalEvent. */
export interface PutExternalEventRequest {
    /** The ID of the WfRun that this Event is sent to. */
    wfRunId: WfRunId | undefined;
    /** The ID of the ExternalEventDef that this event implements. */
    externalEventDefId: ExternalEventDefId | undefined;
    /**
     * Note that an ExternalEventDefId is a three-part ID:
     * 1. WfRunId
     * 2. ExternalEventDef Name
     * 3. A guid
     * The guid from part 3) can be optionally provided to the PutExternalEventRequest
     * in order to make it idempotent. It is a best practice to do so.
     */
    guid?: string | undefined;
    /** The content of this event. */
    content: VariableValue | undefined;
    /** Optionally specify that this ExternalEvent may only be claimed by a specific ThreadRun. */
    threadRunNumber?: number | undefined;
    /**
     * Optionally specify that this ExternalEvent may only be claimed by a specific NodeRun.
     * In order for this to be set, you must also set thread_run_number.
     */
    nodeRunPosition?: number | undefined;
}
/** Deletes an ExternalEvent. */
export interface DeleteExternalEventRequest {
    /** The ID of the ExternalEvent to delete. */
    id: ExternalEventId | undefined;
}
/** Deletes a WfRun. */
export interface DeleteWfRunRequest {
    /** The ID of the WfRun to delete. */
    id: WfRunId | undefined;
}
/** Deletes a TaskDef. */
export interface DeleteTaskDefRequest {
    /** The ID of the TaskDef to delete. */
    id: TaskDefId | undefined;
}
/** Deletes a UserTaskDef. */
export interface DeleteUserTaskDefRequest {
    /** The ID of the UserTaskDef to delete. */
    id: UserTaskDefId | undefined;
}
/** Deletes a WfSpec */
export interface DeleteWfSpecRequest {
    /** The ID of the WfSpec to delete */
    id: WfSpecId | undefined;
}
/** Deletes an ExternalEventDef */
export interface DeleteExternalEventDefRequest {
    /** The ID of the ExternalEventDef to delete. */
    id: ExternalEventDefId | undefined;
}
/** Create a Workflow Run. */
export interface RunWfRequest {
    /** The name of the WfSpec to run. */
    wfSpecName: string;
    /**
     * Optionally specify the major version of the WfSpec to run. This guarantees that
     * the "signature" of the WfSpec (i.e. the required input variables, and searchable
     * variables) will not change for this app.
     */
    majorVersion?: number | undefined;
    /**
     * Optionally specify the specific revision of the WfSpec to run. It is not recommended
     * to use this in practice, as the WfSpec logic should be de-coupled from the applications
     * that run WfRun's.
     */
    revision?: number | undefined;
    /**
     * A map from Variable Name to Values for those variables. The provided variables are
     * passed as input to the Entrypoint ThreadRun.
     */
    variables: {
        [key: string]: VariableValue;
    };
    /**
     * You can optionally specify the ID of this WfRun. This is a recommended best practice
     * as it also makes your request idempotent and allows you to easily find the WfRun at
     * a later time.
     */
    id?: string | undefined;
    parentWfRunId?: WfRunId | undefined;
}
export interface RunWfRequest_VariablesEntry {
    key: string;
    value: VariableValue | undefined;
}
/**
 * Used by a SearchWfRunRequest to filter WfRun's and only return those whose Variable's
 * match a certain filter.
 */
export interface VariableMatch {
    /** The name of the variable to inspect. */
    varName: string;
    /** The value that the Variable must have in order to satisfy this VariableMatch */
    value: VariableValue | undefined;
}
/**
 * Request to await until a WorkflowEvent of a certain WorkflowEventDef on a certain WfRun
 * is thrown. Relies upon native GRPC deadlines to configure timeouts.
 */
export interface AwaitWorkflowEventRequest {
    /** The ID of the WfRun which must throw the WorkflowEvent. */
    wfRunId: WfRunId | undefined;
    /**
     * The IDs of the WorkflowEventDef that must be thrown. The request will return the first matching
     * WorkflowEvent is thrown. If event_def_ids is empty, then the request will return the first
     * WorkflowEvent thrown by the WfRun.
     */
    eventDefIds: WorkflowEventDefId[];
    /**
     * Since a single WfRun may throw multiple WorkflowEvent's with the same WorkflowEventDefId, it
     * is necessary to provide a client the ability to "ignore" WorkflowEvent's that have already been
     * 'awaited'. Any WorkflowEvent specified by this field is ignored by the rpc.
     */
    workflowEventsToIgnore: WorkflowEventId[];
}
/** A request used to retrieve a list of WfRunId's by certain criteria. */
export interface SearchWfRunRequest {
    /** Bookmark for cursor-based pagination; pass if applicable. */
    bookmark?: Buffer | undefined;
    /** Maximum results to return in one request. */
    limit?: number | undefined;
    /** The WfSpec whose WfRun's we are searching for. This is required. */
    wfSpecName: string;
    /** Specifies to return only WfRun's from this WfSpec Major Version. */
    wfSpecMajorVersion?: number | undefined;
    /**
     * Specifies to return only WfRun's from this WfSpec Revision. Can only be set if
     * wf_spec_major_version is also set.
     */
    wfSpecRevision?: number | undefined;
    /** Specifies to return only WfRun's matching this status. */
    status?: LHStatus | undefined;
    /** Specifies to return only WfRun's that started after this time */
    earliestStart?: string | undefined;
    /** Specifies to return only WfRun's that started before this time */
    latestStart?: string | undefined;
    /**
     * Allows filtering WfRun's based on the value of the Variables. This ONLY
     * works for the Variables in the entrypiont threadrun (that is, variables
     * where the threadRunNumber == 0).
     */
    variableFilters: VariableMatch[];
}
/** List of WfRun Id's */
export interface WfRunIdList {
    /** The resulting object id's. */
    results: WfRunId[];
    /**
     * The bookmark can be used for cursor-based pagination. If it is null, the server
     * has returned all results. If it is set, you can pass it into your next request
     * to resume searching where your previous request left off.
     */
    bookmark?: Buffer | undefined;
}
/** Searches for TaskRuns by various criteria. */
export interface SearchTaskRunRequest {
    /** Bookmark for cursor-based pagination; pass if applicable. */
    bookmark?: Buffer | undefined;
    /** Maximum results to return in one request. */
    limit?: number | undefined;
    /** Specifies the TaskDef of TaskRun's to return. This is required. */
    taskDefName: string;
    /** Specifies to only return TaskRun's matching this status. */
    status?: TaskStatus | undefined;
    /** Specifies to only return TaskRun's that were scheduled after this time. */
    earliestStart?: string | undefined;
    /** Specifies to only return TaskRun's that were scheduled before this time. */
    latestStart?: string | undefined;
}
/** List of TaskRun ID's. */
export interface TaskRunIdList {
    /** The resulting object id's. */
    results: TaskRunId[];
    /**
     * The bookmark can be used for cursor-based pagination. If it is null, the server
     * has returned all results. If it is set, you can pass it into your next request
     * to resume searching where your previous request left off.
     */
    bookmark?: Buffer | undefined;
}
/** Search for NodeRun's by certain criteria. */
export interface SearchNodeRunRequest {
    /** Bookmark for cursor-based pagination; pass if applicable. */
    bookmark?: Buffer | undefined;
    /** Maximum results to return in one request. */
    limit?: number | undefined;
    /** Only return NodeRun's created after this time. */
    earliestStart?: string | undefined;
    /** Only return NodeRun's created before this time. */
    latestStart?: string | undefined;
    /** Specifies the type of NodeRun to search for. */
    nodeType: SearchNodeRunRequest_NodeType;
    /** Specifies the status of NodeRun to search for. */
    status: LHStatus;
}
/** This enum denotes the type of a NodeRun. */
export declare enum SearchNodeRunRequest_NodeType {
    /** TASK - TASK node schedules a TaskRun */
    TASK = "TASK",
    /** EXTERNAL_EVENT - EXTERNAL_EVENT blocks the ThreadRun until a specified ExternalEvent arrives */
    EXTERNAL_EVENT = "EXTERNAL_EVENT",
    /** ENTRYPOINT - ENTRYPOINT kicks off a ThreadRun */
    ENTRYPOINT = "ENTRYPOINT",
    /** EXIT - EXIT completes a ThreadRun */
    EXIT = "EXIT",
    /** START_THREAD - START_THREAD creates a Child ThreadRun */
    START_THREAD = "START_THREAD",
    /** WAIT_THREADS - WAIT_THREADS waits for one or more child ThreadRuns to complete */
    WAIT_THREADS = "WAIT_THREADS",
    /** SLEEP - SLEEP makes the ThreadRun sleep for a specified time */
    SLEEP = "SLEEP",
    /** USER_TASK - USER_TASK creates a UserTaskRun and blocks until the UserTaskRun is completed. */
    USER_TASK = "USER_TASK",
    /** START_MULTIPLE_THREADS - START_MULTIPLE_THREADS iterates over a list and starts a Child Thread for each item */
    START_MULTIPLE_THREADS = "START_MULTIPLE_THREADS",
    UNRECOGNIZED = "UNRECOGNIZED"
}
export declare function searchNodeRunRequest_NodeTypeFromJSON(object: any): SearchNodeRunRequest_NodeType;
export declare function searchNodeRunRequest_NodeTypeToNumber(object: SearchNodeRunRequest_NodeType): number;
/** List of NodeRun Id's. */
export interface NodeRunIdList {
    /** The resulting object id's. */
    results: NodeRunId[];
    /**
     * The bookmark can be used for cursor-based pagination. If it is null, the server
     * has returned all results. If it is set, you can pass it into your next request
     * to resume searching where your previous request left off.
     */
    bookmark?: Buffer | undefined;
}
/**
 * Search for UserTaskRun's matching certain criteria. The attributes are additive,
 * you may specify any combination of fields in this request. Only UserTaskRun's
 * matching all criteria will be returned.
 */
export interface SearchUserTaskRunRequest {
    /** Bookmark for cursor-based pagination; pass if applicable. */
    bookmark?: Buffer | undefined;
    /** Maximum results to return in one request. */
    limit?: number | undefined;
    /** Status of UserTaskRun's to return. */
    status?: UserTaskRunStatus | undefined;
    /** UserTaskDef name to search for. */
    userTaskDefName?: string | undefined;
    /** Search for UserTaskRun's assigned to this user id. */
    userId?: string | undefined;
    /** Search for UserTaskRun's assigned to this user group. */
    userGroup?: string | undefined;
    /** Search for UserTaskRun's that were created after this time. */
    earliestStart?: string | undefined;
    /** Search for UserTaskRun's that were created before this time. */
    latestStart?: string | undefined;
}
/** A list of UserTaskRun Id's */
export interface UserTaskRunIdList {
    /** The resulting object id's. */
    results: UserTaskRunId[];
    /**
     * The bookmark can be used for cursor-based pagination. If it is null, the server
     * has returned all results. If it is set, you can pass it into your next request
     * to resume searching where your previous request left off.
     */
    bookmark?: Buffer | undefined;
}
/**
 * Search for Variables by their value. This request is also highly useful to search for
 * WfRun's based on the value of Variable's that are not in the Entrypoint ThreadRun,
 * and also when you are using LittleHorse as a data store and need to perform a search.
 *
 * You may only search for a Variable that has an index specified on it. This may be done
 * via th `.searchable()` method on our SDK's.
 *
 * Note that we do not yet support searching JSON_OBJ or JSON_ARR fields, but you may
 * still mark those fields as searchable. We will soon add the ability to query those
 * fields via the indices.
 */
export interface SearchVariableRequest {
    /** Bookmark for cursor-based pagination; pass if applicable. */
    bookmark?: Buffer | undefined;
    /** Maximum results to return in one request. */
    limit?: number | undefined;
    /** Specifies the value that the variable must be. Exact match is required. */
    value: VariableValue | undefined;
    /** Specifies major version of the WfSpec for the associated WfRun. */
    wfSpecMajorVersion?: number | undefined;
    /** Specifies the revision of the WfSpec for the associated WfRun. */
    wfSpecRevision?: number | undefined;
    /** Specifies the name of the variable to search for. This is required. */
    varName: string;
    /** Specifies the name of the WfSpec for the associated WfRun's. This is required. */
    wfSpecName: string;
}
/** This is a list of Variable ID's. */
export interface VariableIdList {
    /** The resulting object id's. */
    results: VariableId[];
    /**
     * The bookmark can be used for cursor-based pagination. If it is null, the server
     * has returned all results. If it is set, you can pass it into your next request
     * to resume searching where your previous request left off.
     */
    bookmark?: Buffer | undefined;
}
/** Search for TaskDef's based on certain criteria. */
export interface SearchTaskDefRequest {
    /** Bookmark for cursor-based pagination; pass if applicable. */
    bookmark?: Buffer | undefined;
    /** Maximum results to return in one request. */
    limit?: number | undefined;
    /** Optionally specify to only return TaskDef's with a specific prefix. */
    prefix?: string | undefined;
}
/** List of TaskDef Id's. */
export interface TaskDefIdList {
    /** The resulting object id's. */
    results: TaskDefId[];
    /**
     * The bookmark can be used for cursor-based pagination. If it is null, the server
     * has returned all results. If it is set, you can pass it into your next request
     * to resume searching where your previous request left off.
     */
    bookmark?: Buffer | undefined;
}
/** Search for UserTaskDef's. */
export interface SearchUserTaskDefRequest {
    /** Bookmark for cursor-based pagination; pass if applicable. */
    bookmark?: Buffer | undefined;
    /** Maximum results to return in one request. */
    limit?: number | undefined;
    /** Return all UserTaskDef's with a specific prefix. */
    prefix?: string | undefined;
    /** Return all UserTaskDef's with a specific name. */
    name?: string | undefined;
}
/** List of UserTaskDef Id's. */
export interface UserTaskDefIdList {
    /** The resulting object id's. */
    results: UserTaskDefId[];
    /**
     * The bookmark can be used for cursor-based pagination. If it is null, the server
     * has returned all results. If it is set, you can pass it into your next request
     * to resume searching where your previous request left off.
     */
    bookmark?: Buffer | undefined;
}
/** Search for WfSpec's. */
export interface SearchWfSpecRequest {
    /** Bookmark for cursor-based pagination; pass if applicable. */
    bookmark?: Buffer | undefined;
    /** Maximum results to return in one request. */
    limit?: number | undefined;
    /** Return WfSpec's with a specific name. */
    name?: string | undefined;
    /** Return WfSpec's with a specific prefix. */
    prefix?: string | undefined;
    /** Return all WfSpec's that make use of a given TaskDef. */
    taskDefName?: string | undefined;
}
/** List of WfSpec Id's. */
export interface WfSpecIdList {
    /** The resulting object id's. */
    results: WfSpecId[];
    /**
     * The bookmark can be used for cursor-based pagination. If it is null, the server
     * has returned all results. If it is set, you can pass it into your next request
     * to resume searching where your previous request left off.
     */
    bookmark?: Buffer | undefined;
}
/** Search for ExternalEventDef's. */
export interface SearchExternalEventDefRequest {
    /** Bookmark for cursor-based pagination; pass if applicable. */
    bookmark?: Buffer | undefined;
    /** Maximum results to return in one request. */
    limit?: number | undefined;
    /** Optionally search only for ExternalEventDef's whose name starts with this prefix. */
    prefix?: string | undefined;
}
/** List of ExternalEventDef Id's. */
export interface ExternalEventDefIdList {
    /** The resulting object id's. */
    results: ExternalEventDefId[];
    /**
     * The bookmark can be used for cursor-based pagination. If it is null, the server
     * has returned all results. If it is set, you can pass it into your next request
     * to resume searching where your previous request left off.
     */
    bookmark?: Buffer | undefined;
}
/** Search for all available TenantIds for current Principal */
export interface SearchTenantRequest {
    /** Maximum results to return in one request. */
    limit?: number | undefined;
    /** Bookmark for cursor-based pagination; pass if applicable. */
    bookmark?: Buffer | undefined;
}
export interface TenantIdList {
    /** The resulting object id's. */
    results: TenantId[];
    /** Bookmark for cursor-based pagination; pass if applicable. */
    bookmark?: Buffer | undefined;
}
/** Search for Principals based on certain criteria. */
export interface SearchPrincipalRequest {
    /** Bookmark for cursor-based pagination; pass if applicable. */
    bookmark?: Buffer | undefined;
    /** Maximum results to return in one request. */
    limit?: number | undefined;
    /** Specifies to return only Principals's created after this time */
    earliestStart?: string | undefined;
    /** Specifies to return only Principals's created before this time */
    latestStart?: string | undefined;
    /** List only Principals that are admins */
    isAdmin?: boolean | undefined;
    /** List Principals associated with this Tenant ID */
    tenantId?: string | undefined;
}
export interface PrincipalIdList {
    /** The resulting object id's. */
    results: PrincipalId[];
    /** Bookmark for cursor-based pagination; pass if applicable. */
    bookmark?: Buffer | undefined;
}
/**
 * EVOLVING: Search for ExternalEvent's.
 *
 * Currently, this request allows you to search for ExternalEvent's based on either:
 * 1. A WfRunId
 * 2. An ExternalEventDefName and status.
 *
 * This specific RPC is under discussions for a Refactor and will soon experience breaking changes.
 * It is recommended for applications needing to search by WfRunId to instead use the
 * `rpc ListExternalEvents` call, as we plan to remove the 'by WfRunId' option from this request.
 *
 * Specifically, we plan to remove the "by wfRunId" option (which is redundant with the ListExternalEvents
 * request), and "flatten" the "ByExtEvtDefNameAndStatusRequest" fields into the main message.
 */
export interface SearchExternalEventRequest {
    /** Bookmark for cursor-based pagination; pass if applicable. */
    bookmark?: Buffer | undefined;
    /** Maximum results to return in one request. */
    limit?: number | undefined;
    wfRunId?: WfRunId | undefined;
    externalEventDefNameAndStatus?: SearchExternalEventRequest_ByExtEvtDefNameAndStatusRequest | undefined;
}
/**
 * EVOLVING: message encapsulating criteria to search for ExternalEvent's by their status
 * and ExternalEventDefName.
 */
export interface SearchExternalEventRequest_ByExtEvtDefNameAndStatusRequest {
    externalEventDefName: string;
    isClaimed?: boolean | undefined;
}
/** List of ExternalEvent Id's */
export interface ExternalEventIdList {
    /** The resulting object id's. */
    results: ExternalEventId[];
    /**
     * The bookmark can be used for cursor-based pagination. If it is null, the server
     * has returned all results. If it is set, you can pass it into your next request
     * to resume searching where your previous request left off.
     */
    bookmark?: Buffer | undefined;
}
/**
 * List all NodeRun's for a given WfRun. Note that List requests return actual NodeRun Objects,
 * not NodeRunId's.
 */
export interface ListNodeRunsRequest {
    /** The WfRun for whom we list NodeRun's. */
    wfRunId: WfRunId | undefined;
    /** Optionally specify the thread run number to filter NodeRun's by. */
    threadRunNumber?: number | undefined;
    /** Bookmark for cursor-based pagination; pass if applicable. */
    bookmark?: Buffer | undefined;
    /** Maximum results to return in one request. */
    limit?: number | undefined;
}
/** A list of NodeRun Objects. */
export interface NodeRunList {
    /** A list of NodeRun Objects. */
    results: NodeRun[];
    /**
     * The bookmark can be used for cursor-based pagination. If it is null, the server
     * has returned all results. If it is set, you can pass it into your next request
     * to resume searching where your previous request left off.
     */
    bookmark?: Buffer | undefined;
}
/**
 * List all Variables for a specific WfRun. Note that List requests return actual Variable Objects,
 * not VariableId's.
 */
export interface ListVariablesRequest {
    /** The WfRun for whom we will list Variables. */
    wfRunId: WfRunId | undefined;
}
/** A list of Variables. */
export interface VariableList {
    /** A list of Variable objects. */
    results: Variable[];
}
/**
 * List all ExternalEvents for a specific WfRunId. Note that List Requests return actual
 * ExternalEvent objects, not ExternalEventId's.
 */
export interface ListExternalEventsRequest {
    /** The WfRunId for whom we list ExternalEvent's. */
    wfRunId: WfRunId | undefined;
}
/** A list of ExternalEvents. */
export interface ExternalEventList {
    /** A list of ExternalEvent objects. */
    results: ExternalEvent[];
}
/**
 * Message used by Task Worker to register itself to the server and ask for assignments of
 * servers to poll.
 *
 * Used by the Task Worker SDK; generally, you shouldn't have to touch this manually.
 */
export interface RegisterTaskWorkerRequest {
    /** Is the ID of the Task Worker. */
    taskWorkerId: string;
    /** The TaskDef the worker wants to poll for. */
    taskDefId: TaskDefId | undefined;
    /**
     * The listener that the worker is polling on. Used by the server to determine which
     * advertised hosts to return.
     */
    listenerName: string;
}
/**
 * Message used by Task Worker to register itself to the server and ask for assignments of
 * servers to poll.
 *
 * Used by the Task Worker SDK; generally, you shouldn't have to touch this manually.
 */
export interface TaskWorkerHeartBeatRequest {
    clientId: string;
    taskDefId: TaskDefId | undefined;
    listenerName: string;
}
/**
 * Response containing list of Servers that the Task Worker should connect to and start polling from.
 * Only used internally by the Task Worker SDK.
 */
export interface RegisterTaskWorkerResponse {
    /** The list of LH Server hosts that the Task Worker should start polling. */
    yourHosts: LHHostInfo[];
    /** Whether the LH Cluster is healthy. */
    isClusterHealthy?: boolean | undefined;
}
/** Information about a specific LH Server to contact. */
export interface LHHostInfo {
    /** The host on the server */
    host: string;
    /** The port for the specified listener. */
    port: number;
}
/**
 * Request sent by the Task Worker SDK to tell the Server that the Task Worker is ready
 * to execute a TaskRun. Generally used only by the Task Worker SDK.
 */
export interface PollTaskRequest {
    /** Is the TaskDefId that the Task Worker wants to execute. */
    taskDefId: TaskDefId | undefined;
    /** Is the ID of the Task Worker. */
    clientId: string;
    /**
     * Optionally specifies the version of the Task Worker, so that it can be recorded
     * for debugging purposes on the TaskRun itself.
     */
    taskWorkerVersion?: string | undefined;
}
/**
 * Message sent by server to Task Worker SDK specifying a specific TaskRun to be executed.
 * This is used and handled internally by the Task Worker SDK.
 */
export interface ScheduledTask {
    /** Id of the TaskRun to execute. */
    taskRunId: TaskRunId | undefined;
    /** ID of the TaskDef to which the TaskRun belongs. */
    taskDefId: TaskDefId | undefined;
    /**
     * Attempt number of the TaskRun, zero indexed. attempt_number of `0` means this is the
     * first attempt; `1` means this is the first retry, etc.
     */
    attemptNumber: number;
    /** Input variables for this TaskRun. */
    variables: VarNameAndVal[];
    createdAt: string | undefined;
    /**
     * Source of the TaskRun. Currently, there are two options:
     * 1. A TASK node
     * 2. A reminder task scheduled by a trigger on a User Task.
     */
    source: TaskRunSource | undefined;
}
/** Response from the server for PollTaskRequest. */
export interface PollTaskResponse {
    /** If possible, a ScheduledTask is returned. */
    result?: ScheduledTask | undefined;
}
/** Request used by the Task Worker SDK to report the result of a TaskRun execution. */
export interface ReportTaskRun {
    /** ID of the TaskRun */
    taskRunId: TaskRunId | undefined;
    /** When the TaskRun was executed */
    time: string | undefined;
    /** Status of the TaskRun */
    status: TaskStatus;
    /** Optional information for logging or exceptions */
    logOutput?: VariableValue | undefined;
    /** Attempt number of the TaskRun */
    attemptNumber: number;
    /** Successfully completed task */
    output?: VariableValue | undefined;
    /** Technical error */
    error?: LHTaskError | undefined;
    /** Business exception */
    exception?: LHTaskException | undefined;
}
/** Message to HALT a WfRun. */
export interface StopWfRunRequest {
    /** Is the WfRunId */
    wfRunId: WfRunId | undefined;
    /**
     * The number of the ThreadRun to halt. Note that halting the entrypoint ThreadRun (which
     * always has number `0`) causes the whole WfRun to halt. If you do not manually set
     * the thread_run_number field, it defaults to zero, so stopping the entire WfRun is the
     * default behavior.
     */
    threadRunNumber: number;
}
/** Resume a WfRun. */
export interface ResumeWfRunRequest {
    /** Is the WfRunId */
    wfRunId: WfRunId | undefined;
    /**
     * The number of the ThreadRun to resume. Note that resuming the entrypoint ThreadRun (which
     * always has number `0`) causes the whole WfRun to resume. If you do not manually set
     * the thread_run_number field, it defaults to zero, so resuming the entire WfRun is the
     * default behavior.
     */
    threadRunNumber: number;
}
/** The request used to rescue a failed ThreadRun at a specific NodeRun. */
export interface RescueThreadRunRequest {
    /** The id of the `WfRun` which we are going to rescue. */
    wfRunId: WfRunId | undefined;
    /**
     * The number of the failed `ThreadRun` that we will rescue. The specified
     * `ThreadRun` must be in a state where it's latest `NodeRun` is: <br/>
     * - In the `ERROR` state.<br/>
     * - Has no `FailureHandler` `ThreadRun`s <br/>
     * - The parent `ThreadRun`, or any parent of the parent, has not handled the `Failure`
     * yet.
     *
     * If that is not true, then the `ThreadRun` cannot be rescued and the request
     * will return `FAILED_PRECONDITION`.
     */
    threadRunNumber: number;
    /**
     * If set to `true`, then the ThreadRun will skip past the `Node` of the
     * current failed `NodeRun` and advance according to the outgoing edges.
     * If set to `false`, then the `ThreadRun` will schedule another `NodeRun` for
     * the current `Node`
     */
    skipCurrentNode: boolean;
}
/** Query to retrieve a specific TaskDef Metrics Window. */
export interface TaskDefMetricsQueryRequest {
    /**
     * Return the window *containing* this timestamp. The window start is not guaranteed to
     * align perfectly with the request.
     */
    windowStart: string | undefined;
    /** The window size */
    windowType: MetricsWindowLength;
    /** The name of the specific TaskDef for which we are calculating metrics. */
    taskDefName?: string | undefined;
}
/** Query to retrieve TaskDef Metrics over a period of time. */
export interface ListTaskMetricsRequest {
    /** TaskDef id for whichwe retrieve metrics. */
    taskDefId: TaskDefId | undefined;
    /**
     * This parameter is a timestamp that is used to determine the *last* window returned. The
     * server will then return `num_windows` worth of data from before this timestamp.
     */
    lastWindowStart: string | undefined;
    /** Window size */
    windowLength: MetricsWindowLength;
    /** Number of windows to retrieve. */
    numWindows: number;
}
/** A list of TaskDef Metrics WIndows */
export interface ListTaskMetricsResponse {
    /** List of TaskDef Metrics Windows */
    results: TaskDefMetrics[];
}
/** Query to retrieve a specific WfSpec Metrics Window. */
export interface WfSpecMetricsQueryRequest {
    /** WfSpecId of metrics to get. */
    wfSpecId: WfSpecId | undefined;
    /**
     * Return the window *containing* this timestamp. The window start is not guaranteed to
     * align perfectly with the request.
     */
    windowStart: string | undefined;
    /** The window size */
    windowLength: MetricsWindowLength;
}
/** Query to retrieve WfSpec Metrics over a period of time. */
export interface ListWfMetricsRequest {
    /** WfSpecId of metrics to get. */
    wfSpecId: WfSpecId | undefined;
    /**
     * This parameter is a timestamp that is used to determine the *last* window returned. The
     * server will then return `num_windows` worth of data from before this timestamp.
     */
    lastWindowStart: string | undefined;
    /** The window size */
    windowLength: MetricsWindowLength;
    /** Number of windows to retrieve */
    numWindows: number;
}
/** A list of WfSpec Metrics Windows */
export interface ListWfMetricsResponse {
    /** List of WfSpec Metrics Windows */
    results: WfSpecMetrics[];
}
/** Metrics for a TaskDef in a certain time period. */
export interface TaskDefMetrics {
    /** TaskDef that the metrics apply to. */
    taskDefId: TaskDefId | undefined;
    /** When the window started. */
    windowStart: string | undefined;
    /** Length of the window. */
    type: MetricsWindowLength;
    /** Longest time that a TaskRun was in the TASK_SCHEDULED state */
    scheduleToStartMax: number;
    /** Average time that a TaskRun was in the TASK_SCHEDULED state */
    scheduleToStartAvg: number;
    /** Longest time between a TaskRun being started and completed */
    startToCompleteMax: number;
    /** Average time between a TaskRun being started and completed */
    startToCompleteAvg: number;
    /** Total number of TaskRun's that reached the TASK_SUCCESS state */
    totalCompleted: number;
    /** Total number of TaskRun's that reached the TASK_ERROR state */
    totalErrored: number;
    /** Total number of TaskRun's that transitioned to the TASK_RUNNING state */
    totalStarted: number;
    /** Total number of TaskRun's that were scheduled */
    totalScheduled: number;
}
/** Metrics for a WfSpec in a specific time window */
export interface WfSpecMetrics {
    /** The WfSpecId that these metrics analyze */
    wfSpecId: WfSpecId | undefined;
    /** The time that the window started */
    windowStart: string | undefined;
    /** The length of the window */
    type: MetricsWindowLength;
    /** Total number of WfRun's created for this WfSpec */
    totalStarted: number;
    /** Total number of WfRun's that reached the COMPLETED state */
    totalCompleted: number;
    /** Total number of WfRun's that reached the ERROR state */
    totalErrored: number;
    /** Longest time between a WfRun being started and reaching the COMPLETED state */
    startToCompleteMax: number;
    /** Average time that a WfRun took to reach the COMPLETED state */
    startToCompleteAvg: number;
}
/** List UserTaskRun's for a specific WfRun */
export interface ListUserTaskRunRequest {
    /** The WfRun for which to list UserTaskRuns */
    wfRunId: WfRunId | undefined;
}
/** List of UserTaskRuns */
export interface UserTaskRunList {
    /** A list of UserTaskRun Objects */
    results: UserTaskRun[];
}
/** Describes a specific task worker */
export interface TaskWorkerMetadata {
    /** User-defined identifier for the worker. */
    taskWorkerId: string;
    /** Timestamp indicating the last heartbeat sent by the worker. */
    latestHeartbeat: string | undefined;
    /** The host(s) where the worker is polling tasks */
    hosts: LHHostInfo[];
}
/** Describes all workers registered for a specific TaskDef. */
export interface TaskWorkerGroup {
    /** Identifier for the group. */
    id: TaskWorkerGroupId | undefined;
    /** Timestamp indicating when the worker group was initially registered. */
    createdAt: string | undefined;
    /** Metadata grouped by ClientId string. */
    taskWorkers: {
        [key: string]: TaskWorkerMetadata;
    };
}
export interface TaskWorkerGroup_TaskWorkersEntry {
    key: string;
    value: TaskWorkerMetadata | undefined;
}
/** List TaskRun's for a specific WfRun */
export interface ListTaskRunsRequest {
    /** The WfRun for which to list TaskRun's */
    wfRunId: WfRunId | undefined;
}
/** A list of TaskRun's */
export interface TaskRunList {
    /** A list of TaskRun Objects */
    results: TaskRun[];
}
/** EXPERIMENTAL: migrate live WfRun's from one version of a WfSpec to another. */
export interface MigrateWfSpecRequest {
    oldWfSpec: WfSpecId | undefined;
    migration: WfSpecVersionMigration | undefined;
}
/** Get the latest WfSpec with a given name and optionally majorVersion */
export interface GetLatestWfSpecRequest {
    /** The name of the WfSpec to get. This is required. */
    name: string;
    /**
     * Optionally get only WfSpec's that have the same major version. This can be useful
     * if you want to guarantee that there have been no breaking changes to the API of the
     * WfSpec, for example, to ensure that there have been no changes to searchable variables
     * or required input variables.
     */
    majorVersion?: number | undefined;
}
/** The version of the LH Server according to Semantic Versioning */
export interface ServerVersionResponse {
    /** Server Major Version */
    majorVersion: number;
    /** Server Minor Version */
    minorVersion: number;
    /** Server Patch Version */
    patchVersion: number;
    /**
     * Prerelease Identifier. If this is set, then the server is NOT a production release
     * but rather a release candidate or experimental pre-release.
     */
    preReleaseIdentifier?: string | undefined;
}
export declare const GetLatestUserTaskDefRequest: {
    encode(message: GetLatestUserTaskDefRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetLatestUserTaskDefRequest;
    create(base?: DeepPartial<GetLatestUserTaskDefRequest>): GetLatestUserTaskDefRequest;
    fromPartial(object: DeepPartial<GetLatestUserTaskDefRequest>): GetLatestUserTaskDefRequest;
};
export declare const PutWfSpecRequest: {
    encode(message: PutWfSpecRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PutWfSpecRequest;
    create(base?: DeepPartial<PutWfSpecRequest>): PutWfSpecRequest;
    fromPartial(object: DeepPartial<PutWfSpecRequest>): PutWfSpecRequest;
};
export declare const PutWfSpecRequest_ThreadSpecsEntry: {
    encode(message: PutWfSpecRequest_ThreadSpecsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PutWfSpecRequest_ThreadSpecsEntry;
    create(base?: DeepPartial<PutWfSpecRequest_ThreadSpecsEntry>): PutWfSpecRequest_ThreadSpecsEntry;
    fromPartial(object: DeepPartial<PutWfSpecRequest_ThreadSpecsEntry>): PutWfSpecRequest_ThreadSpecsEntry;
};
export declare const PutTaskDefRequest: {
    encode(message: PutTaskDefRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PutTaskDefRequest;
    create(base?: DeepPartial<PutTaskDefRequest>): PutTaskDefRequest;
    fromPartial(object: DeepPartial<PutTaskDefRequest>): PutTaskDefRequest;
};
export declare const PutWorkflowEventDefRequest: {
    encode(message: PutWorkflowEventDefRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PutWorkflowEventDefRequest;
    create(base?: DeepPartial<PutWorkflowEventDefRequest>): PutWorkflowEventDefRequest;
    fromPartial(object: DeepPartial<PutWorkflowEventDefRequest>): PutWorkflowEventDefRequest;
};
export declare const PutUserTaskDefRequest: {
    encode(message: PutUserTaskDefRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PutUserTaskDefRequest;
    create(base?: DeepPartial<PutUserTaskDefRequest>): PutUserTaskDefRequest;
    fromPartial(object: DeepPartial<PutUserTaskDefRequest>): PutUserTaskDefRequest;
};
export declare const PutExternalEventDefRequest: {
    encode(message: PutExternalEventDefRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PutExternalEventDefRequest;
    create(base?: DeepPartial<PutExternalEventDefRequest>): PutExternalEventDefRequest;
    fromPartial(object: DeepPartial<PutExternalEventDefRequest>): PutExternalEventDefRequest;
};
export declare const PutExternalEventRequest: {
    encode(message: PutExternalEventRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PutExternalEventRequest;
    create(base?: DeepPartial<PutExternalEventRequest>): PutExternalEventRequest;
    fromPartial(object: DeepPartial<PutExternalEventRequest>): PutExternalEventRequest;
};
export declare const DeleteExternalEventRequest: {
    encode(message: DeleteExternalEventRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteExternalEventRequest;
    create(base?: DeepPartial<DeleteExternalEventRequest>): DeleteExternalEventRequest;
    fromPartial(object: DeepPartial<DeleteExternalEventRequest>): DeleteExternalEventRequest;
};
export declare const DeleteWfRunRequest: {
    encode(message: DeleteWfRunRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteWfRunRequest;
    create(base?: DeepPartial<DeleteWfRunRequest>): DeleteWfRunRequest;
    fromPartial(object: DeepPartial<DeleteWfRunRequest>): DeleteWfRunRequest;
};
export declare const DeleteTaskDefRequest: {
    encode(message: DeleteTaskDefRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteTaskDefRequest;
    create(base?: DeepPartial<DeleteTaskDefRequest>): DeleteTaskDefRequest;
    fromPartial(object: DeepPartial<DeleteTaskDefRequest>): DeleteTaskDefRequest;
};
export declare const DeleteUserTaskDefRequest: {
    encode(message: DeleteUserTaskDefRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteUserTaskDefRequest;
    create(base?: DeepPartial<DeleteUserTaskDefRequest>): DeleteUserTaskDefRequest;
    fromPartial(object: DeepPartial<DeleteUserTaskDefRequest>): DeleteUserTaskDefRequest;
};
export declare const DeleteWfSpecRequest: {
    encode(message: DeleteWfSpecRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteWfSpecRequest;
    create(base?: DeepPartial<DeleteWfSpecRequest>): DeleteWfSpecRequest;
    fromPartial(object: DeepPartial<DeleteWfSpecRequest>): DeleteWfSpecRequest;
};
export declare const DeleteExternalEventDefRequest: {
    encode(message: DeleteExternalEventDefRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteExternalEventDefRequest;
    create(base?: DeepPartial<DeleteExternalEventDefRequest>): DeleteExternalEventDefRequest;
    fromPartial(object: DeepPartial<DeleteExternalEventDefRequest>): DeleteExternalEventDefRequest;
};
export declare const RunWfRequest: {
    encode(message: RunWfRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RunWfRequest;
    create(base?: DeepPartial<RunWfRequest>): RunWfRequest;
    fromPartial(object: DeepPartial<RunWfRequest>): RunWfRequest;
};
export declare const RunWfRequest_VariablesEntry: {
    encode(message: RunWfRequest_VariablesEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RunWfRequest_VariablesEntry;
    create(base?: DeepPartial<RunWfRequest_VariablesEntry>): RunWfRequest_VariablesEntry;
    fromPartial(object: DeepPartial<RunWfRequest_VariablesEntry>): RunWfRequest_VariablesEntry;
};
export declare const VariableMatch: {
    encode(message: VariableMatch, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): VariableMatch;
    create(base?: DeepPartial<VariableMatch>): VariableMatch;
    fromPartial(object: DeepPartial<VariableMatch>): VariableMatch;
};
export declare const AwaitWorkflowEventRequest: {
    encode(message: AwaitWorkflowEventRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AwaitWorkflowEventRequest;
    create(base?: DeepPartial<AwaitWorkflowEventRequest>): AwaitWorkflowEventRequest;
    fromPartial(object: DeepPartial<AwaitWorkflowEventRequest>): AwaitWorkflowEventRequest;
};
export declare const SearchWfRunRequest: {
    encode(message: SearchWfRunRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SearchWfRunRequest;
    create(base?: DeepPartial<SearchWfRunRequest>): SearchWfRunRequest;
    fromPartial(object: DeepPartial<SearchWfRunRequest>): SearchWfRunRequest;
};
export declare const WfRunIdList: {
    encode(message: WfRunIdList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WfRunIdList;
    create(base?: DeepPartial<WfRunIdList>): WfRunIdList;
    fromPartial(object: DeepPartial<WfRunIdList>): WfRunIdList;
};
export declare const SearchTaskRunRequest: {
    encode(message: SearchTaskRunRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SearchTaskRunRequest;
    create(base?: DeepPartial<SearchTaskRunRequest>): SearchTaskRunRequest;
    fromPartial(object: DeepPartial<SearchTaskRunRequest>): SearchTaskRunRequest;
};
export declare const TaskRunIdList: {
    encode(message: TaskRunIdList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TaskRunIdList;
    create(base?: DeepPartial<TaskRunIdList>): TaskRunIdList;
    fromPartial(object: DeepPartial<TaskRunIdList>): TaskRunIdList;
};
export declare const SearchNodeRunRequest: {
    encode(message: SearchNodeRunRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SearchNodeRunRequest;
    create(base?: DeepPartial<SearchNodeRunRequest>): SearchNodeRunRequest;
    fromPartial(object: DeepPartial<SearchNodeRunRequest>): SearchNodeRunRequest;
};
export declare const NodeRunIdList: {
    encode(message: NodeRunIdList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): NodeRunIdList;
    create(base?: DeepPartial<NodeRunIdList>): NodeRunIdList;
    fromPartial(object: DeepPartial<NodeRunIdList>): NodeRunIdList;
};
export declare const SearchUserTaskRunRequest: {
    encode(message: SearchUserTaskRunRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SearchUserTaskRunRequest;
    create(base?: DeepPartial<SearchUserTaskRunRequest>): SearchUserTaskRunRequest;
    fromPartial(object: DeepPartial<SearchUserTaskRunRequest>): SearchUserTaskRunRequest;
};
export declare const UserTaskRunIdList: {
    encode(message: UserTaskRunIdList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserTaskRunIdList;
    create(base?: DeepPartial<UserTaskRunIdList>): UserTaskRunIdList;
    fromPartial(object: DeepPartial<UserTaskRunIdList>): UserTaskRunIdList;
};
export declare const SearchVariableRequest: {
    encode(message: SearchVariableRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SearchVariableRequest;
    create(base?: DeepPartial<SearchVariableRequest>): SearchVariableRequest;
    fromPartial(object: DeepPartial<SearchVariableRequest>): SearchVariableRequest;
};
export declare const VariableIdList: {
    encode(message: VariableIdList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): VariableIdList;
    create(base?: DeepPartial<VariableIdList>): VariableIdList;
    fromPartial(object: DeepPartial<VariableIdList>): VariableIdList;
};
export declare const SearchTaskDefRequest: {
    encode(message: SearchTaskDefRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SearchTaskDefRequest;
    create(base?: DeepPartial<SearchTaskDefRequest>): SearchTaskDefRequest;
    fromPartial(object: DeepPartial<SearchTaskDefRequest>): SearchTaskDefRequest;
};
export declare const TaskDefIdList: {
    encode(message: TaskDefIdList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TaskDefIdList;
    create(base?: DeepPartial<TaskDefIdList>): TaskDefIdList;
    fromPartial(object: DeepPartial<TaskDefIdList>): TaskDefIdList;
};
export declare const SearchUserTaskDefRequest: {
    encode(message: SearchUserTaskDefRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SearchUserTaskDefRequest;
    create(base?: DeepPartial<SearchUserTaskDefRequest>): SearchUserTaskDefRequest;
    fromPartial(object: DeepPartial<SearchUserTaskDefRequest>): SearchUserTaskDefRequest;
};
export declare const UserTaskDefIdList: {
    encode(message: UserTaskDefIdList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserTaskDefIdList;
    create(base?: DeepPartial<UserTaskDefIdList>): UserTaskDefIdList;
    fromPartial(object: DeepPartial<UserTaskDefIdList>): UserTaskDefIdList;
};
export declare const SearchWfSpecRequest: {
    encode(message: SearchWfSpecRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SearchWfSpecRequest;
    create(base?: DeepPartial<SearchWfSpecRequest>): SearchWfSpecRequest;
    fromPartial(object: DeepPartial<SearchWfSpecRequest>): SearchWfSpecRequest;
};
export declare const WfSpecIdList: {
    encode(message: WfSpecIdList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WfSpecIdList;
    create(base?: DeepPartial<WfSpecIdList>): WfSpecIdList;
    fromPartial(object: DeepPartial<WfSpecIdList>): WfSpecIdList;
};
export declare const SearchExternalEventDefRequest: {
    encode(message: SearchExternalEventDefRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SearchExternalEventDefRequest;
    create(base?: DeepPartial<SearchExternalEventDefRequest>): SearchExternalEventDefRequest;
    fromPartial(object: DeepPartial<SearchExternalEventDefRequest>): SearchExternalEventDefRequest;
};
export declare const ExternalEventDefIdList: {
    encode(message: ExternalEventDefIdList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ExternalEventDefIdList;
    create(base?: DeepPartial<ExternalEventDefIdList>): ExternalEventDefIdList;
    fromPartial(object: DeepPartial<ExternalEventDefIdList>): ExternalEventDefIdList;
};
export declare const SearchTenantRequest: {
    encode(message: SearchTenantRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SearchTenantRequest;
    create(base?: DeepPartial<SearchTenantRequest>): SearchTenantRequest;
    fromPartial(object: DeepPartial<SearchTenantRequest>): SearchTenantRequest;
};
export declare const TenantIdList: {
    encode(message: TenantIdList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TenantIdList;
    create(base?: DeepPartial<TenantIdList>): TenantIdList;
    fromPartial(object: DeepPartial<TenantIdList>): TenantIdList;
};
export declare const SearchPrincipalRequest: {
    encode(message: SearchPrincipalRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SearchPrincipalRequest;
    create(base?: DeepPartial<SearchPrincipalRequest>): SearchPrincipalRequest;
    fromPartial(object: DeepPartial<SearchPrincipalRequest>): SearchPrincipalRequest;
};
export declare const PrincipalIdList: {
    encode(message: PrincipalIdList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PrincipalIdList;
    create(base?: DeepPartial<PrincipalIdList>): PrincipalIdList;
    fromPartial(object: DeepPartial<PrincipalIdList>): PrincipalIdList;
};
export declare const SearchExternalEventRequest: {
    encode(message: SearchExternalEventRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SearchExternalEventRequest;
    create(base?: DeepPartial<SearchExternalEventRequest>): SearchExternalEventRequest;
    fromPartial(object: DeepPartial<SearchExternalEventRequest>): SearchExternalEventRequest;
};
export declare const SearchExternalEventRequest_ByExtEvtDefNameAndStatusRequest: {
    encode(message: SearchExternalEventRequest_ByExtEvtDefNameAndStatusRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SearchExternalEventRequest_ByExtEvtDefNameAndStatusRequest;
    create(base?: DeepPartial<SearchExternalEventRequest_ByExtEvtDefNameAndStatusRequest>): SearchExternalEventRequest_ByExtEvtDefNameAndStatusRequest;
    fromPartial(object: DeepPartial<SearchExternalEventRequest_ByExtEvtDefNameAndStatusRequest>): SearchExternalEventRequest_ByExtEvtDefNameAndStatusRequest;
};
export declare const ExternalEventIdList: {
    encode(message: ExternalEventIdList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ExternalEventIdList;
    create(base?: DeepPartial<ExternalEventIdList>): ExternalEventIdList;
    fromPartial(object: DeepPartial<ExternalEventIdList>): ExternalEventIdList;
};
export declare const ListNodeRunsRequest: {
    encode(message: ListNodeRunsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListNodeRunsRequest;
    create(base?: DeepPartial<ListNodeRunsRequest>): ListNodeRunsRequest;
    fromPartial(object: DeepPartial<ListNodeRunsRequest>): ListNodeRunsRequest;
};
export declare const NodeRunList: {
    encode(message: NodeRunList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): NodeRunList;
    create(base?: DeepPartial<NodeRunList>): NodeRunList;
    fromPartial(object: DeepPartial<NodeRunList>): NodeRunList;
};
export declare const ListVariablesRequest: {
    encode(message: ListVariablesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListVariablesRequest;
    create(base?: DeepPartial<ListVariablesRequest>): ListVariablesRequest;
    fromPartial(object: DeepPartial<ListVariablesRequest>): ListVariablesRequest;
};
export declare const VariableList: {
    encode(message: VariableList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): VariableList;
    create(base?: DeepPartial<VariableList>): VariableList;
    fromPartial(object: DeepPartial<VariableList>): VariableList;
};
export declare const ListExternalEventsRequest: {
    encode(message: ListExternalEventsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListExternalEventsRequest;
    create(base?: DeepPartial<ListExternalEventsRequest>): ListExternalEventsRequest;
    fromPartial(object: DeepPartial<ListExternalEventsRequest>): ListExternalEventsRequest;
};
export declare const ExternalEventList: {
    encode(message: ExternalEventList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ExternalEventList;
    create(base?: DeepPartial<ExternalEventList>): ExternalEventList;
    fromPartial(object: DeepPartial<ExternalEventList>): ExternalEventList;
};
export declare const RegisterTaskWorkerRequest: {
    encode(message: RegisterTaskWorkerRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RegisterTaskWorkerRequest;
    create(base?: DeepPartial<RegisterTaskWorkerRequest>): RegisterTaskWorkerRequest;
    fromPartial(object: DeepPartial<RegisterTaskWorkerRequest>): RegisterTaskWorkerRequest;
};
export declare const TaskWorkerHeartBeatRequest: {
    encode(message: TaskWorkerHeartBeatRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TaskWorkerHeartBeatRequest;
    create(base?: DeepPartial<TaskWorkerHeartBeatRequest>): TaskWorkerHeartBeatRequest;
    fromPartial(object: DeepPartial<TaskWorkerHeartBeatRequest>): TaskWorkerHeartBeatRequest;
};
export declare const RegisterTaskWorkerResponse: {
    encode(message: RegisterTaskWorkerResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RegisterTaskWorkerResponse;
    create(base?: DeepPartial<RegisterTaskWorkerResponse>): RegisterTaskWorkerResponse;
    fromPartial(object: DeepPartial<RegisterTaskWorkerResponse>): RegisterTaskWorkerResponse;
};
export declare const LHHostInfo: {
    encode(message: LHHostInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LHHostInfo;
    create(base?: DeepPartial<LHHostInfo>): LHHostInfo;
    fromPartial(object: DeepPartial<LHHostInfo>): LHHostInfo;
};
export declare const PollTaskRequest: {
    encode(message: PollTaskRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PollTaskRequest;
    create(base?: DeepPartial<PollTaskRequest>): PollTaskRequest;
    fromPartial(object: DeepPartial<PollTaskRequest>): PollTaskRequest;
};
export declare const ScheduledTask: {
    encode(message: ScheduledTask, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ScheduledTask;
    create(base?: DeepPartial<ScheduledTask>): ScheduledTask;
    fromPartial(object: DeepPartial<ScheduledTask>): ScheduledTask;
};
export declare const PollTaskResponse: {
    encode(message: PollTaskResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PollTaskResponse;
    create(base?: DeepPartial<PollTaskResponse>): PollTaskResponse;
    fromPartial(object: DeepPartial<PollTaskResponse>): PollTaskResponse;
};
export declare const ReportTaskRun: {
    encode(message: ReportTaskRun, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ReportTaskRun;
    create(base?: DeepPartial<ReportTaskRun>): ReportTaskRun;
    fromPartial(object: DeepPartial<ReportTaskRun>): ReportTaskRun;
};
export declare const StopWfRunRequest: {
    encode(message: StopWfRunRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): StopWfRunRequest;
    create(base?: DeepPartial<StopWfRunRequest>): StopWfRunRequest;
    fromPartial(object: DeepPartial<StopWfRunRequest>): StopWfRunRequest;
};
export declare const ResumeWfRunRequest: {
    encode(message: ResumeWfRunRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ResumeWfRunRequest;
    create(base?: DeepPartial<ResumeWfRunRequest>): ResumeWfRunRequest;
    fromPartial(object: DeepPartial<ResumeWfRunRequest>): ResumeWfRunRequest;
};
export declare const RescueThreadRunRequest: {
    encode(message: RescueThreadRunRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RescueThreadRunRequest;
    create(base?: DeepPartial<RescueThreadRunRequest>): RescueThreadRunRequest;
    fromPartial(object: DeepPartial<RescueThreadRunRequest>): RescueThreadRunRequest;
};
export declare const TaskDefMetricsQueryRequest: {
    encode(message: TaskDefMetricsQueryRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TaskDefMetricsQueryRequest;
    create(base?: DeepPartial<TaskDefMetricsQueryRequest>): TaskDefMetricsQueryRequest;
    fromPartial(object: DeepPartial<TaskDefMetricsQueryRequest>): TaskDefMetricsQueryRequest;
};
export declare const ListTaskMetricsRequest: {
    encode(message: ListTaskMetricsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListTaskMetricsRequest;
    create(base?: DeepPartial<ListTaskMetricsRequest>): ListTaskMetricsRequest;
    fromPartial(object: DeepPartial<ListTaskMetricsRequest>): ListTaskMetricsRequest;
};
export declare const ListTaskMetricsResponse: {
    encode(message: ListTaskMetricsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListTaskMetricsResponse;
    create(base?: DeepPartial<ListTaskMetricsResponse>): ListTaskMetricsResponse;
    fromPartial(object: DeepPartial<ListTaskMetricsResponse>): ListTaskMetricsResponse;
};
export declare const WfSpecMetricsQueryRequest: {
    encode(message: WfSpecMetricsQueryRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WfSpecMetricsQueryRequest;
    create(base?: DeepPartial<WfSpecMetricsQueryRequest>): WfSpecMetricsQueryRequest;
    fromPartial(object: DeepPartial<WfSpecMetricsQueryRequest>): WfSpecMetricsQueryRequest;
};
export declare const ListWfMetricsRequest: {
    encode(message: ListWfMetricsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListWfMetricsRequest;
    create(base?: DeepPartial<ListWfMetricsRequest>): ListWfMetricsRequest;
    fromPartial(object: DeepPartial<ListWfMetricsRequest>): ListWfMetricsRequest;
};
export declare const ListWfMetricsResponse: {
    encode(message: ListWfMetricsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListWfMetricsResponse;
    create(base?: DeepPartial<ListWfMetricsResponse>): ListWfMetricsResponse;
    fromPartial(object: DeepPartial<ListWfMetricsResponse>): ListWfMetricsResponse;
};
export declare const TaskDefMetrics: {
    encode(message: TaskDefMetrics, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TaskDefMetrics;
    create(base?: DeepPartial<TaskDefMetrics>): TaskDefMetrics;
    fromPartial(object: DeepPartial<TaskDefMetrics>): TaskDefMetrics;
};
export declare const WfSpecMetrics: {
    encode(message: WfSpecMetrics, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WfSpecMetrics;
    create(base?: DeepPartial<WfSpecMetrics>): WfSpecMetrics;
    fromPartial(object: DeepPartial<WfSpecMetrics>): WfSpecMetrics;
};
export declare const ListUserTaskRunRequest: {
    encode(message: ListUserTaskRunRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListUserTaskRunRequest;
    create(base?: DeepPartial<ListUserTaskRunRequest>): ListUserTaskRunRequest;
    fromPartial(object: DeepPartial<ListUserTaskRunRequest>): ListUserTaskRunRequest;
};
export declare const UserTaskRunList: {
    encode(message: UserTaskRunList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserTaskRunList;
    create(base?: DeepPartial<UserTaskRunList>): UserTaskRunList;
    fromPartial(object: DeepPartial<UserTaskRunList>): UserTaskRunList;
};
export declare const TaskWorkerMetadata: {
    encode(message: TaskWorkerMetadata, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TaskWorkerMetadata;
    create(base?: DeepPartial<TaskWorkerMetadata>): TaskWorkerMetadata;
    fromPartial(object: DeepPartial<TaskWorkerMetadata>): TaskWorkerMetadata;
};
export declare const TaskWorkerGroup: {
    encode(message: TaskWorkerGroup, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TaskWorkerGroup;
    create(base?: DeepPartial<TaskWorkerGroup>): TaskWorkerGroup;
    fromPartial(object: DeepPartial<TaskWorkerGroup>): TaskWorkerGroup;
};
export declare const TaskWorkerGroup_TaskWorkersEntry: {
    encode(message: TaskWorkerGroup_TaskWorkersEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TaskWorkerGroup_TaskWorkersEntry;
    create(base?: DeepPartial<TaskWorkerGroup_TaskWorkersEntry>): TaskWorkerGroup_TaskWorkersEntry;
    fromPartial(object: DeepPartial<TaskWorkerGroup_TaskWorkersEntry>): TaskWorkerGroup_TaskWorkersEntry;
};
export declare const ListTaskRunsRequest: {
    encode(message: ListTaskRunsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListTaskRunsRequest;
    create(base?: DeepPartial<ListTaskRunsRequest>): ListTaskRunsRequest;
    fromPartial(object: DeepPartial<ListTaskRunsRequest>): ListTaskRunsRequest;
};
export declare const TaskRunList: {
    encode(message: TaskRunList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TaskRunList;
    create(base?: DeepPartial<TaskRunList>): TaskRunList;
    fromPartial(object: DeepPartial<TaskRunList>): TaskRunList;
};
export declare const MigrateWfSpecRequest: {
    encode(message: MigrateWfSpecRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MigrateWfSpecRequest;
    create(base?: DeepPartial<MigrateWfSpecRequest>): MigrateWfSpecRequest;
    fromPartial(object: DeepPartial<MigrateWfSpecRequest>): MigrateWfSpecRequest;
};
export declare const GetLatestWfSpecRequest: {
    encode(message: GetLatestWfSpecRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetLatestWfSpecRequest;
    create(base?: DeepPartial<GetLatestWfSpecRequest>): GetLatestWfSpecRequest;
    fromPartial(object: DeepPartial<GetLatestWfSpecRequest>): GetLatestWfSpecRequest;
};
export declare const ServerVersionResponse: {
    encode(message: ServerVersionResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ServerVersionResponse;
    create(base?: DeepPartial<ServerVersionResponse>): ServerVersionResponse;
    fromPartial(object: DeepPartial<ServerVersionResponse>): ServerVersionResponse;
};
export type LittleHorseDefinition = typeof LittleHorseDefinition;
export declare const LittleHorseDefinition: {
    readonly name: "LittleHorse";
    readonly fullName: "littlehorse.LittleHorse";
    readonly methods: {
        /** Creates a TaskDef. */
        readonly putTaskDef: {
            readonly name: "PutTaskDef";
            readonly requestType: {
                encode(message: PutTaskDefRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): PutTaskDefRequest;
                create(base?: DeepPartial<PutTaskDefRequest>): PutTaskDefRequest;
                fromPartial(object: DeepPartial<PutTaskDefRequest>): PutTaskDefRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: TaskDef, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): TaskDef;
                create(base?: {
                    id?: {
                        name?: string | undefined;
                    } | undefined;
                    inputVars?: {
                        type?: VariableType | undefined;
                        name?: string | undefined;
                        defaultValue?: {
                            jsonObj?: string | undefined;
                            jsonArr?: string | undefined;
                            double?: number | undefined;
                            bool?: boolean | undefined;
                            str?: string | undefined;
                            int?: number | undefined;
                            bytes?: Buffer | undefined;
                        } | undefined;
                    }[] | undefined;
                    createdAt?: string | undefined;
                } | undefined): TaskDef;
                fromPartial(object: {
                    id?: {
                        name?: string | undefined;
                    } | undefined;
                    inputVars?: {
                        type?: VariableType | undefined;
                        name?: string | undefined;
                        defaultValue?: {
                            jsonObj?: string | undefined;
                            jsonArr?: string | undefined;
                            double?: number | undefined;
                            bool?: boolean | undefined;
                            str?: string | undefined;
                            int?: number | undefined;
                            bytes?: Buffer | undefined;
                        } | undefined;
                    }[] | undefined;
                    createdAt?: string | undefined;
                }): TaskDef;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Gets a TaskDef. */
        readonly getTaskDef: {
            readonly name: "GetTaskDef";
            readonly requestType: {
                encode(message: TaskDefId, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): TaskDefId;
                create(base?: {
                    name?: string | undefined;
                } | undefined): TaskDefId;
                fromPartial(object: {
                    name?: string | undefined;
                }): TaskDefId;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: TaskDef, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): TaskDef;
                create(base?: {
                    id?: {
                        name?: string | undefined;
                    } | undefined;
                    inputVars?: {
                        type?: VariableType | undefined;
                        name?: string | undefined;
                        defaultValue?: {
                            jsonObj?: string | undefined;
                            jsonArr?: string | undefined;
                            double?: number | undefined;
                            bool?: boolean | undefined;
                            str?: string | undefined;
                            int?: number | undefined;
                            bytes?: Buffer | undefined;
                        } | undefined;
                    }[] | undefined;
                    createdAt?: string | undefined;
                } | undefined): TaskDef;
                fromPartial(object: {
                    id?: {
                        name?: string | undefined;
                    } | undefined;
                    inputVars?: {
                        type?: VariableType | undefined;
                        name?: string | undefined;
                        defaultValue?: {
                            jsonObj?: string | undefined;
                            jsonArr?: string | undefined;
                            double?: number | undefined;
                            bool?: boolean | undefined;
                            str?: string | undefined;
                            int?: number | undefined;
                            bytes?: Buffer | undefined;
                        } | undefined;
                    }[] | undefined;
                    createdAt?: string | undefined;
                }): TaskDef;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Gets the registered task worker group associated with a specific TaskDef. */
        readonly getTaskWorkerGroup: {
            readonly name: "GetTaskWorkerGroup";
            readonly requestType: {
                encode(message: TaskDefId, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): TaskDefId;
                create(base?: {
                    name?: string | undefined;
                } | undefined): TaskDefId;
                fromPartial(object: {
                    name?: string | undefined;
                }): TaskDefId;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: TaskWorkerGroup, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): TaskWorkerGroup;
                create(base?: DeepPartial<TaskWorkerGroup>): TaskWorkerGroup;
                fromPartial(object: DeepPartial<TaskWorkerGroup>): TaskWorkerGroup;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Creates an ExternalEventDef. */
        readonly putExternalEventDef: {
            readonly name: "PutExternalEventDef";
            readonly requestType: {
                encode(message: PutExternalEventDefRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): PutExternalEventDefRequest;
                create(base?: DeepPartial<PutExternalEventDefRequest>): PutExternalEventDefRequest;
                fromPartial(object: DeepPartial<PutExternalEventDefRequest>): PutExternalEventDefRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: ExternalEventDef, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): ExternalEventDef;
                create(base?: {
                    id?: {
                        name?: string | undefined;
                    } | undefined;
                    createdAt?: string | undefined;
                    retentionPolicy?: {
                        secondsAfterPut?: number | undefined;
                    } | undefined;
                } | undefined): ExternalEventDef;
                fromPartial(object: {
                    id?: {
                        name?: string | undefined;
                    } | undefined;
                    createdAt?: string | undefined;
                    retentionPolicy?: {
                        secondsAfterPut?: number | undefined;
                    } | undefined;
                }): ExternalEventDef;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Gets an ExternalEventDef. */
        readonly getExternalEventDef: {
            readonly name: "GetExternalEventDef";
            readonly requestType: {
                encode(message: ExternalEventDefId, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): ExternalEventDefId; /** The value that the Variable must have in order to satisfy this VariableMatch */
                create(base?: {
                    name?: string | undefined;
                } | undefined): ExternalEventDefId;
                fromPartial(object: {
                    name?: string | undefined;
                }): ExternalEventDefId;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: ExternalEventDef, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): ExternalEventDef;
                create(base?: {
                    id?: {
                        name?: string | undefined;
                    } | undefined;
                    createdAt?: string | undefined;
                    retentionPolicy?: {
                        secondsAfterPut?: number | undefined;
                    } | undefined;
                } | undefined): ExternalEventDef;
                fromPartial(object: {
                    id?: {
                        name?: string | undefined;
                    } | undefined;
                    createdAt?: string | undefined;
                    retentionPolicy?: {
                        secondsAfterPut?: number | undefined;
                    } | undefined;
                }): ExternalEventDef;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** EXPERIMENTAL: Creates a WorkflowEventDef. */
        readonly putWorkflowEventDef: {
            readonly name: "PutWorkflowEventDef";
            readonly requestType: {
                encode(message: PutWorkflowEventDefRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): PutWorkflowEventDefRequest;
                create(base?: DeepPartial<PutWorkflowEventDefRequest>): PutWorkflowEventDefRequest;
                fromPartial(object: DeepPartial<PutWorkflowEventDefRequest>): PutWorkflowEventDefRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: WorkflowEventDef, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): WorkflowEventDef;
                create(base?: {
                    id?: {
                        name?: string | undefined;
                    } | undefined;
                    createdAt?: string | undefined;
                    type?: VariableType | undefined;
                } | undefined): WorkflowEventDef;
                fromPartial(object: {
                    id?: {
                        name?: string | undefined;
                    } | undefined;
                    createdAt?: string | undefined;
                    type?: VariableType | undefined;
                }): WorkflowEventDef;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Creates a WfSpec. */
        readonly putWfSpec: {
            readonly name: "PutWfSpec";
            readonly requestType: {
                encode(message: PutWfSpecRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): PutWfSpecRequest;
                create(base?: DeepPartial<PutWfSpecRequest>): PutWfSpecRequest;
                fromPartial(object: DeepPartial<PutWfSpecRequest>): PutWfSpecRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: WfSpec, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): WfSpec;
                create(base?: {
                    id?: {
                        name?: string | undefined;
                        majorVersion?: number | undefined;
                        revision?: number | undefined;
                    } | undefined;
                    createdAt?: string | undefined;
                    frozenVariables?: {
                        varDef?: {
                            type?: VariableType | undefined;
                            name?: string | undefined;
                            defaultValue?: {
                                jsonObj?: string | undefined;
                                jsonArr?: string | undefined;
                                double?: number | undefined;
                                bool?: boolean | undefined;
                                str?: string | undefined;
                                int?: number | undefined;
                                bytes?: Buffer | undefined;
                            } | undefined;
                        } | undefined;
                        required?: boolean | undefined;
                        searchable?: boolean | undefined;
                        jsonIndexes?: {
                            fieldPath?: string | undefined;
                            fieldType?: VariableType | undefined;
                        }[] | undefined;
                        accessLevel?: import("./wf_spec").WfRunVariableAccessLevel | undefined;
                    }[] | undefined;
                    status?: import("./common_enums").MetadataStatus | undefined;
                    threadSpecs?: {
                        [x: string]: {
                            nodes?: {
                                [x: string]: {
                                    outgoingEdges?: {
                                        sinkNodeName?: string | undefined;
                                        condition?: {
                                            comparator?: import("./common_wfspec").Comparator | undefined;
                                            left?: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                            right?: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                        } | undefined;
                                        variableMutations?: {
                                            lhsName?: string | undefined;
                                            lhsJsonPath?: string | undefined;
                                            operation?: import("./common_wfspec").VariableMutationType | undefined;
                                            sourceVariable?: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            nodeOutput?: {
                                                jsonpath?: string | undefined;
                                            } | undefined;
                                        }[] | undefined;
                                    }[] | undefined;
                                    failureHandlers?: {
                                        handlerSpecName?: string | undefined;
                                        specificFailure?: string | undefined;
                                        anyFailureOfType?: import("./wf_spec").FailureHandlerDef_LHFailureType | undefined;
                                    }[] | undefined;
                                    entrypoint?: {} | undefined;
                                    exit?: {
                                        failureDef?: {
                                            failureName?: string | undefined;
                                            message?: string | undefined;
                                            content?: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    task?: {
                                        taskDefId?: {
                                            name?: string | undefined;
                                        } | undefined;
                                        dynamicTask?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        timeoutSeconds?: number | undefined;
                                        retries?: number | undefined;
                                        exponentialBackoff?: {
                                            baseIntervalMs?: number | undefined;
                                            maxDelayMs?: number | undefined;
                                            multiplier?: number | undefined;
                                        } | undefined;
                                        variables?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        }[] | undefined;
                                    } | undefined;
                                    externalEvent?: {
                                        externalEventDefId?: {
                                            name?: string | undefined;
                                        } | undefined;
                                        timeoutSeconds?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    startThread?: {
                                        threadSpecName?: string | undefined;
                                        variables?: {
                                            [x: string]: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    waitForThreads?: {
                                        threads?: {
                                            threads?: {
                                                threadRunNumber?: {
                                                    jsonPath?: string | undefined;
                                                    variableName?: string | undefined;
                                                    literalValue?: {
                                                        jsonObj?: string | undefined;
                                                        jsonArr?: string | undefined;
                                                        double?: number | undefined;
                                                        bool?: boolean | undefined;
                                                        str?: string | undefined;
                                                        int?: number | undefined;
                                                        bytes?: Buffer | undefined;
                                                    } | undefined;
                                                    formatString?: {
                                                        format?: any | undefined;
                                                        args?: any[] | undefined;
                                                    } | undefined;
                                                } | undefined;
                                            }[] | undefined;
                                        } | undefined;
                                        threadList?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        perThreadFailureHandlers?: {
                                            handlerSpecName?: string | undefined;
                                            specificFailure?: string | undefined;
                                            anyFailureOfType?: import("./wf_spec").FailureHandlerDef_LHFailureType | undefined;
                                        }[] | undefined;
                                    } | undefined;
                                    nop?: {} | undefined;
                                    sleep?: {
                                        rawSeconds?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        timestamp?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        isoDate?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    userTask?: {
                                        userTaskDefName?: string | undefined;
                                        userGroup?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        userId?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        actions?: {
                                            task?: {
                                                task?: {
                                                    taskDefId?: {
                                                        name?: string | undefined;
                                                    } | undefined;
                                                    dynamicTask?: {
                                                        jsonPath?: string | undefined;
                                                        variableName?: string | undefined;
                                                        literalValue?: {
                                                            jsonObj?: string | undefined;
                                                            jsonArr?: string | undefined;
                                                            double?: number | undefined;
                                                            bool?: boolean | undefined;
                                                            str?: string | undefined;
                                                            int?: number | undefined;
                                                            bytes?: Buffer | undefined;
                                                        } | undefined;
                                                        formatString?: {
                                                            format?: any | undefined;
                                                            args?: any[] | undefined;
                                                        } | undefined;
                                                    } | undefined;
                                                    timeoutSeconds?: number | undefined;
                                                    retries?: number | undefined;
                                                    exponentialBackoff?: {
                                                        baseIntervalMs?: number | undefined;
                                                        maxDelayMs?: number | undefined;
                                                        multiplier?: number | undefined;
                                                    } | undefined;
                                                    variables?: {
                                                        jsonPath?: string | undefined;
                                                        variableName?: string | undefined;
                                                        literalValue?: {
                                                            jsonObj?: string | undefined;
                                                            jsonArr?: string | undefined;
                                                            double?: number | undefined;
                                                            bool?: boolean | undefined;
                                                            str?: string | undefined;
                                                            int?: number | undefined;
                                                            bytes?: Buffer | undefined;
                                                        } | undefined;
                                                        formatString?: {
                                                            format?: any | undefined;
                                                            args?: any[] | undefined;
                                                        } | undefined;
                                                    }[] | undefined;
                                                } | undefined;
                                                mutations?: {
                                                    lhsName?: string | undefined;
                                                    lhsJsonPath?: string | undefined;
                                                    operation?: import("./common_wfspec").VariableMutationType | undefined;
                                                    sourceVariable?: {
                                                        jsonPath?: string | undefined;
                                                        variableName?: string | undefined;
                                                        literalValue?: {
                                                            jsonObj?: string | undefined;
                                                            jsonArr?: string | undefined;
                                                            double?: number | undefined;
                                                            bool?: boolean | undefined;
                                                            str?: string | undefined;
                                                            int?: number | undefined;
                                                            bytes?: Buffer | undefined;
                                                        } | undefined;
                                                        formatString?: {
                                                            format?: any | undefined;
                                                            args?: any[] | undefined;
                                                        } | undefined;
                                                    } | undefined;
                                                    literalValue?: {
                                                        jsonObj?: string | undefined;
                                                        jsonArr?: string | undefined;
                                                        double?: number | undefined;
                                                        bool?: boolean | undefined;
                                                        str?: string | undefined;
                                                        int?: number | undefined;
                                                        bytes?: Buffer | undefined;
                                                    } | undefined;
                                                    nodeOutput?: {
                                                        jsonpath?: string | undefined;
                                                    } | undefined;
                                                }[] | undefined;
                                            } | undefined;
                                            cancel?: {} | undefined;
                                            reassign?: {
                                                userId?: {
                                                    jsonPath?: string | undefined;
                                                    variableName?: string | undefined;
                                                    literalValue?: {
                                                        jsonObj?: string | undefined;
                                                        jsonArr?: string | undefined;
                                                        double?: number | undefined;
                                                        bool?: boolean | undefined;
                                                        str?: string | undefined;
                                                        int?: number | undefined;
                                                        bytes?: Buffer | undefined;
                                                    } | undefined;
                                                    formatString?: {
                                                        format?: any | undefined;
                                                        args?: any[] | undefined;
                                                    } | undefined;
                                                } | undefined;
                                                userGroup?: {
                                                    jsonPath?: string | undefined;
                                                    variableName?: string | undefined;
                                                    literalValue?: {
                                                        jsonObj?: string | undefined;
                                                        jsonArr?: string | undefined;
                                                        double?: number | undefined;
                                                        bool?: boolean | undefined;
                                                        str?: string | undefined;
                                                        int?: number | undefined;
                                                        bytes?: Buffer | undefined;
                                                    } | undefined;
                                                    formatString?: {
                                                        format?: any | undefined;
                                                        args?: any[] | undefined;
                                                    } | undefined;
                                                } | undefined;
                                            } | undefined;
                                            delaySeconds?: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                            hook?: import("./common_wfspec").UTActionTrigger_UTHook | undefined;
                                        }[] | undefined;
                                        userTaskDefVersion?: number | undefined;
                                        notes?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        onCancellationExceptionName?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    startMultipleThreads?: {
                                        threadSpecName?: string | undefined;
                                        variables?: {
                                            [x: string]: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                        } | undefined;
                                        iterable?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    throwEvent?: {
                                        eventDefId?: {
                                            name?: string | undefined;
                                        } | undefined;
                                        content?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                } | undefined;
                            } | undefined;
                            variableDefs?: {
                                varDef?: {
                                    type?: VariableType | undefined;
                                    name?: string | undefined;
                                    defaultValue?: {
                                        jsonObj?: string | undefined;
                                        jsonArr?: string | undefined;
                                        double?: number | undefined;
                                        bool?: boolean | undefined;
                                        str?: string | undefined;
                                        int?: number | undefined;
                                        bytes?: Buffer | undefined;
                                    } | undefined;
                                } | undefined;
                                required?: boolean | undefined;
                                searchable?: boolean | undefined;
                                jsonIndexes?: {
                                    fieldPath?: string | undefined;
                                    fieldType?: VariableType | undefined;
                                }[] | undefined;
                                accessLevel?: import("./wf_spec").WfRunVariableAccessLevel | undefined;
                            }[] | undefined;
                            interruptDefs?: {
                                externalEventDefId?: {
                                    name?: string | undefined;
                                } | undefined;
                                handlerSpecName?: string | undefined;
                            }[] | undefined;
                            retentionPolicy?: {
                                secondsAfterThreadTermination?: number | undefined;
                            } | undefined;
                        } | undefined;
                    } | undefined;
                    entrypointThreadName?: string | undefined;
                    retentionPolicy?: {
                        secondsAfterWfTermination?: number | undefined;
                    } | undefined;
                    migration?: {
                        newMajorVersion?: number | undefined;
                        newRevision?: number | undefined;
                        threadSpecMigrations?: {
                            [x: string]: {
                                newThreadSpecName?: string | undefined;
                                nodeMigrations?: {
                                    [x: string]: {
                                        newNodeName?: string | undefined;
                                    } | undefined;
                                } | undefined;
                            } | undefined;
                        } | undefined;
                    } | undefined;
                    parentWfSpec?: {
                        wfSpecName?: string | undefined;
                        wfSpecMajorVersion?: number | undefined;
                    } | undefined;
                } | undefined): WfSpec;
                fromPartial(object: {
                    id?: {
                        name?: string | undefined;
                        majorVersion?: number | undefined;
                        revision?: number | undefined;
                    } | undefined;
                    createdAt?: string | undefined;
                    frozenVariables?: {
                        varDef?: {
                            type?: VariableType | undefined;
                            name?: string | undefined;
                            defaultValue?: {
                                jsonObj?: string | undefined;
                                jsonArr?: string | undefined;
                                double?: number | undefined;
                                bool?: boolean | undefined;
                                str?: string | undefined;
                                int?: number | undefined;
                                bytes?: Buffer | undefined;
                            } | undefined;
                        } | undefined;
                        required?: boolean | undefined;
                        searchable?: boolean | undefined;
                        jsonIndexes?: {
                            fieldPath?: string | undefined;
                            fieldType?: VariableType | undefined;
                        }[] | undefined;
                        accessLevel?: import("./wf_spec").WfRunVariableAccessLevel | undefined;
                    }[] | undefined;
                    status?: import("./common_enums").MetadataStatus | undefined;
                    threadSpecs?: {
                        [x: string]: {
                            nodes?: {
                                [x: string]: {
                                    outgoingEdges?: {
                                        sinkNodeName?: string | undefined;
                                        condition?: {
                                            comparator?: import("./common_wfspec").Comparator | undefined;
                                            left?: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                            right?: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                        } | undefined;
                                        variableMutations?: {
                                            lhsName?: string | undefined;
                                            lhsJsonPath?: string | undefined;
                                            operation?: import("./common_wfspec").VariableMutationType | undefined;
                                            sourceVariable?: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            nodeOutput?: {
                                                jsonpath?: string | undefined;
                                            } | undefined;
                                        }[] | undefined;
                                    }[] | undefined;
                                    failureHandlers?: {
                                        handlerSpecName?: string | undefined;
                                        specificFailure?: string | undefined;
                                        anyFailureOfType?: import("./wf_spec").FailureHandlerDef_LHFailureType | undefined;
                                    }[] | undefined;
                                    entrypoint?: {} | undefined;
                                    exit?: {
                                        failureDef?: {
                                            failureName?: string | undefined;
                                            message?: string | undefined;
                                            content?: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    task?: {
                                        taskDefId?: {
                                            name?: string | undefined;
                                        } | undefined;
                                        dynamicTask?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        timeoutSeconds?: number | undefined;
                                        retries?: number | undefined;
                                        exponentialBackoff?: {
                                            baseIntervalMs?: number | undefined;
                                            maxDelayMs?: number | undefined;
                                            multiplier?: number | undefined;
                                        } | undefined;
                                        variables?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        }[] | undefined;
                                    } | undefined;
                                    externalEvent?: {
                                        externalEventDefId?: {
                                            name?: string | undefined;
                                        } | undefined;
                                        timeoutSeconds?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    startThread?: {
                                        threadSpecName?: string | undefined;
                                        variables?: {
                                            [x: string]: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    waitForThreads?: {
                                        threads?: {
                                            threads?: {
                                                threadRunNumber?: {
                                                    jsonPath?: string | undefined;
                                                    variableName?: string | undefined;
                                                    literalValue?: {
                                                        jsonObj?: string | undefined;
                                                        jsonArr?: string | undefined;
                                                        double?: number | undefined;
                                                        bool?: boolean | undefined;
                                                        str?: string | undefined;
                                                        int?: number | undefined;
                                                        bytes?: Buffer | undefined;
                                                    } | undefined;
                                                    formatString?: {
                                                        format?: any | undefined;
                                                        args?: any[] | undefined;
                                                    } | undefined;
                                                } | undefined;
                                            }[] | undefined;
                                        } | undefined;
                                        threadList?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        perThreadFailureHandlers?: {
                                            handlerSpecName?: string | undefined;
                                            specificFailure?: string | undefined;
                                            anyFailureOfType?: import("./wf_spec").FailureHandlerDef_LHFailureType | undefined;
                                        }[] | undefined;
                                    } | undefined;
                                    nop?: {} | undefined;
                                    sleep?: {
                                        rawSeconds?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        timestamp?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        isoDate?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    userTask?: {
                                        userTaskDefName?: string | undefined;
                                        userGroup?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        userId?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        actions?: {
                                            task?: {
                                                task?: {
                                                    taskDefId?: {
                                                        name?: string | undefined;
                                                    } | undefined;
                                                    dynamicTask?: {
                                                        jsonPath?: string | undefined;
                                                        variableName?: string | undefined;
                                                        literalValue?: {
                                                            jsonObj?: string | undefined;
                                                            jsonArr?: string | undefined;
                                                            double?: number | undefined;
                                                            bool?: boolean | undefined;
                                                            str?: string | undefined;
                                                            int?: number | undefined;
                                                            bytes?: Buffer | undefined;
                                                        } | undefined;
                                                        formatString?: {
                                                            format?: any | undefined;
                                                            args?: any[] | undefined;
                                                        } | undefined;
                                                    } | undefined;
                                                    timeoutSeconds?: number | undefined;
                                                    retries?: number | undefined;
                                                    exponentialBackoff?: {
                                                        baseIntervalMs?: number | undefined;
                                                        maxDelayMs?: number | undefined;
                                                        multiplier?: number | undefined;
                                                    } | undefined;
                                                    variables?: {
                                                        jsonPath?: string | undefined;
                                                        variableName?: string | undefined;
                                                        literalValue?: {
                                                            jsonObj?: string | undefined;
                                                            jsonArr?: string | undefined;
                                                            double?: number | undefined;
                                                            bool?: boolean | undefined;
                                                            str?: string | undefined;
                                                            int?: number | undefined;
                                                            bytes?: Buffer | undefined;
                                                        } | undefined;
                                                        formatString?: {
                                                            format?: any | undefined;
                                                            args?: any[] | undefined;
                                                        } | undefined;
                                                    }[] | undefined;
                                                } | undefined;
                                                mutations?: {
                                                    lhsName?: string | undefined;
                                                    lhsJsonPath?: string | undefined;
                                                    operation?: import("./common_wfspec").VariableMutationType | undefined;
                                                    sourceVariable?: {
                                                        jsonPath?: string | undefined;
                                                        variableName?: string | undefined;
                                                        literalValue?: {
                                                            jsonObj?: string | undefined;
                                                            jsonArr?: string | undefined;
                                                            double?: number | undefined;
                                                            bool?: boolean | undefined;
                                                            str?: string | undefined;
                                                            int?: number | undefined;
                                                            bytes?: Buffer | undefined;
                                                        } | undefined;
                                                        formatString?: {
                                                            format?: any | undefined;
                                                            args?: any[] | undefined;
                                                        } | undefined;
                                                    } | undefined;
                                                    literalValue?: {
                                                        jsonObj?: string | undefined;
                                                        jsonArr?: string | undefined;
                                                        double?: number | undefined;
                                                        bool?: boolean | undefined;
                                                        str?: string | undefined;
                                                        int?: number | undefined;
                                                        bytes?: Buffer | undefined;
                                                    } | undefined;
                                                    nodeOutput?: {
                                                        jsonpath?: string | undefined;
                                                    } | undefined;
                                                }[] | undefined;
                                            } | undefined;
                                            cancel?: {} | undefined;
                                            reassign?: {
                                                userId?: {
                                                    jsonPath?: string | undefined;
                                                    variableName?: string | undefined;
                                                    literalValue?: {
                                                        jsonObj?: string | undefined;
                                                        jsonArr?: string | undefined;
                                                        double?: number | undefined;
                                                        bool?: boolean | undefined;
                                                        str?: string | undefined;
                                                        int?: number | undefined;
                                                        bytes?: Buffer | undefined;
                                                    } | undefined;
                                                    formatString?: {
                                                        format?: any | undefined;
                                                        args?: any[] | undefined;
                                                    } | undefined;
                                                } | undefined;
                                                userGroup?: {
                                                    jsonPath?: string | undefined;
                                                    variableName?: string | undefined;
                                                    literalValue?: {
                                                        jsonObj?: string | undefined;
                                                        jsonArr?: string | undefined;
                                                        double?: number | undefined;
                                                        bool?: boolean | undefined;
                                                        str?: string | undefined;
                                                        int?: number | undefined;
                                                        bytes?: Buffer | undefined;
                                                    } | undefined;
                                                    formatString?: {
                                                        format?: any | undefined;
                                                        args?: any[] | undefined;
                                                    } | undefined;
                                                } | undefined;
                                            } | undefined;
                                            delaySeconds?: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                            hook?: import("./common_wfspec").UTActionTrigger_UTHook | undefined;
                                        }[] | undefined;
                                        userTaskDefVersion?: number | undefined;
                                        notes?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        onCancellationExceptionName?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    startMultipleThreads?: {
                                        threadSpecName?: string | undefined;
                                        variables?: {
                                            [x: string]: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                        } | undefined;
                                        iterable?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    throwEvent?: {
                                        eventDefId?: {
                                            name?: string | undefined;
                                        } | undefined;
                                        content?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                } | undefined;
                            } | undefined;
                            variableDefs?: {
                                varDef?: {
                                    type?: VariableType | undefined;
                                    name?: string | undefined;
                                    defaultValue?: {
                                        jsonObj?: string | undefined;
                                        jsonArr?: string | undefined;
                                        double?: number | undefined;
                                        bool?: boolean | undefined;
                                        str?: string | undefined;
                                        int?: number | undefined;
                                        bytes?: Buffer | undefined;
                                    } | undefined;
                                } | undefined;
                                required?: boolean | undefined;
                                searchable?: boolean | undefined;
                                jsonIndexes?: {
                                    fieldPath?: string | undefined;
                                    fieldType?: VariableType | undefined;
                                }[] | undefined;
                                accessLevel?: import("./wf_spec").WfRunVariableAccessLevel | undefined;
                            }[] | undefined;
                            interruptDefs?: {
                                externalEventDefId?: {
                                    name?: string | undefined;
                                } | undefined;
                                handlerSpecName?: string | undefined;
                            }[] | undefined;
                            retentionPolicy?: {
                                secondsAfterThreadTermination?: number | undefined;
                            } | undefined;
                        } | undefined;
                    } | undefined;
                    entrypointThreadName?: string | undefined;
                    retentionPolicy?: {
                        secondsAfterWfTermination?: number | undefined;
                    } | undefined;
                    migration?: {
                        newMajorVersion?: number | undefined;
                        newRevision?: number | undefined;
                        threadSpecMigrations?: {
                            [x: string]: {
                                newThreadSpecName?: string | undefined;
                                nodeMigrations?: {
                                    [x: string]: {
                                        newNodeName?: string | undefined;
                                    } | undefined;
                                } | undefined;
                            } | undefined;
                        } | undefined;
                    } | undefined;
                    parentWfSpec?: {
                        wfSpecName?: string | undefined;
                        wfSpecMajorVersion?: number | undefined;
                    } | undefined;
                }): WfSpec;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Gets a WfSpec. */
        readonly getWfSpec: {
            readonly name: "GetWfSpec";
            readonly requestType: {
                encode(message: WfSpecId, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): WfSpecId;
                create(base?: {
                    name?: string | undefined;
                    majorVersion?: number | undefined;
                    revision?: number | undefined;
                } | undefined): WfSpecId;
                fromPartial(object: {
                    name?: string | undefined;
                    majorVersion?: number | undefined;
                    revision?: number | undefined;
                }): WfSpecId;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: WfSpec, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): WfSpec;
                create(base?: {
                    id?: {
                        name?: string | undefined;
                        majorVersion?: number | undefined;
                        revision?: number | undefined;
                    } | undefined;
                    createdAt?: string | undefined;
                    frozenVariables?: {
                        varDef?: {
                            type?: VariableType | undefined;
                            name?: string | undefined;
                            defaultValue?: {
                                jsonObj?: string | undefined;
                                jsonArr?: string | undefined;
                                double?: number | undefined;
                                bool?: boolean | undefined;
                                str?: string | undefined;
                                int?: number | undefined;
                                bytes?: Buffer | undefined;
                            } | undefined;
                        } | undefined;
                        required?: boolean | undefined;
                        searchable?: boolean | undefined;
                        jsonIndexes?: {
                            fieldPath?: string | undefined;
                            fieldType?: VariableType | undefined;
                        }[] | undefined;
                        accessLevel?: import("./wf_spec").WfRunVariableAccessLevel | undefined;
                    }[] | undefined;
                    status?: import("./common_enums").MetadataStatus | undefined;
                    threadSpecs?: {
                        [x: string]: {
                            nodes?: {
                                [x: string]: {
                                    outgoingEdges?: {
                                        sinkNodeName?: string | undefined;
                                        condition?: {
                                            comparator?: import("./common_wfspec").Comparator | undefined;
                                            left?: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                            right?: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                        } | undefined;
                                        variableMutations?: {
                                            lhsName?: string | undefined;
                                            lhsJsonPath?: string | undefined;
                                            operation?: import("./common_wfspec").VariableMutationType | undefined;
                                            sourceVariable?: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            nodeOutput?: {
                                                jsonpath?: string | undefined;
                                            } | undefined;
                                        }[] | undefined;
                                    }[] | undefined;
                                    failureHandlers?: {
                                        handlerSpecName?: string | undefined;
                                        specificFailure?: string | undefined;
                                        anyFailureOfType?: import("./wf_spec").FailureHandlerDef_LHFailureType | undefined;
                                    }[] | undefined;
                                    entrypoint?: {} | undefined;
                                    exit?: {
                                        failureDef?: {
                                            failureName?: string | undefined;
                                            message?: string | undefined;
                                            content?: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    task?: {
                                        taskDefId?: {
                                            name?: string | undefined;
                                        } | undefined;
                                        dynamicTask?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        timeoutSeconds?: number | undefined;
                                        retries?: number | undefined;
                                        exponentialBackoff?: {
                                            baseIntervalMs?: number | undefined;
                                            maxDelayMs?: number | undefined;
                                            multiplier?: number | undefined;
                                        } | undefined;
                                        variables?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        }[] | undefined;
                                    } | undefined;
                                    externalEvent?: {
                                        externalEventDefId?: {
                                            name?: string | undefined;
                                        } | undefined;
                                        timeoutSeconds?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    startThread?: {
                                        threadSpecName?: string | undefined;
                                        variables?: {
                                            [x: string]: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    waitForThreads?: {
                                        threads?: {
                                            threads?: {
                                                threadRunNumber?: {
                                                    jsonPath?: string | undefined;
                                                    variableName?: string | undefined;
                                                    literalValue?: {
                                                        jsonObj?: string | undefined;
                                                        jsonArr?: string | undefined;
                                                        double?: number | undefined;
                                                        bool?: boolean | undefined;
                                                        str?: string | undefined;
                                                        int?: number | undefined;
                                                        bytes?: Buffer | undefined;
                                                    } | undefined;
                                                    formatString?: {
                                                        format?: any | undefined;
                                                        args?: any[] | undefined;
                                                    } | undefined;
                                                } | undefined;
                                            }[] | undefined;
                                        } | undefined;
                                        threadList?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        perThreadFailureHandlers?: {
                                            handlerSpecName?: string | undefined;
                                            specificFailure?: string | undefined;
                                            anyFailureOfType?: import("./wf_spec").FailureHandlerDef_LHFailureType | undefined;
                                        }[] | undefined;
                                    } | undefined;
                                    nop?: {} | undefined;
                                    sleep?: {
                                        rawSeconds?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        timestamp?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        isoDate?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    userTask?: {
                                        userTaskDefName?: string | undefined;
                                        userGroup?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        userId?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        actions?: {
                                            task?: {
                                                task?: {
                                                    taskDefId?: {
                                                        name?: string | undefined;
                                                    } | undefined;
                                                    dynamicTask?: {
                                                        jsonPath?: string | undefined;
                                                        variableName?: string | undefined;
                                                        literalValue?: {
                                                            jsonObj?: string | undefined;
                                                            jsonArr?: string | undefined;
                                                            double?: number | undefined;
                                                            bool?: boolean | undefined;
                                                            str?: string | undefined;
                                                            int?: number | undefined;
                                                            bytes?: Buffer | undefined;
                                                        } | undefined;
                                                        formatString?: {
                                                            format?: any | undefined;
                                                            args?: any[] | undefined;
                                                        } | undefined;
                                                    } | undefined;
                                                    timeoutSeconds?: number | undefined;
                                                    retries?: number | undefined;
                                                    exponentialBackoff?: {
                                                        baseIntervalMs?: number | undefined;
                                                        maxDelayMs?: number | undefined;
                                                        multiplier?: number | undefined;
                                                    } | undefined;
                                                    variables?: {
                                                        jsonPath?: string | undefined;
                                                        variableName?: string | undefined;
                                                        literalValue?: {
                                                            jsonObj?: string | undefined;
                                                            jsonArr?: string | undefined;
                                                            double?: number | undefined;
                                                            bool?: boolean | undefined;
                                                            str?: string | undefined;
                                                            int?: number | undefined;
                                                            bytes?: Buffer | undefined;
                                                        } | undefined;
                                                        formatString?: {
                                                            format?: any | undefined;
                                                            args?: any[] | undefined;
                                                        } | undefined;
                                                    }[] | undefined;
                                                } | undefined;
                                                mutations?: {
                                                    lhsName?: string | undefined;
                                                    lhsJsonPath?: string | undefined;
                                                    operation?: import("./common_wfspec").VariableMutationType | undefined;
                                                    sourceVariable?: {
                                                        jsonPath?: string | undefined;
                                                        variableName?: string | undefined;
                                                        literalValue?: {
                                                            jsonObj?: string | undefined;
                                                            jsonArr?: string | undefined;
                                                            double?: number | undefined;
                                                            bool?: boolean | undefined;
                                                            str?: string | undefined;
                                                            int?: number | undefined;
                                                            bytes?: Buffer | undefined;
                                                        } | undefined;
                                                        formatString?: {
                                                            format?: any | undefined;
                                                            args?: any[] | undefined;
                                                        } | undefined;
                                                    } | undefined;
                                                    literalValue?: {
                                                        jsonObj?: string | undefined;
                                                        jsonArr?: string | undefined;
                                                        double?: number | undefined;
                                                        bool?: boolean | undefined;
                                                        str?: string | undefined;
                                                        int?: number | undefined;
                                                        bytes?: Buffer | undefined;
                                                    } | undefined;
                                                    nodeOutput?: {
                                                        jsonpath?: string | undefined;
                                                    } | undefined;
                                                }[] | undefined;
                                            } | undefined;
                                            cancel?: {} | undefined;
                                            reassign?: {
                                                userId?: {
                                                    jsonPath?: string | undefined;
                                                    variableName?: string | undefined;
                                                    literalValue?: {
                                                        jsonObj?: string | undefined;
                                                        jsonArr?: string | undefined;
                                                        double?: number | undefined;
                                                        bool?: boolean | undefined;
                                                        str?: string | undefined;
                                                        int?: number | undefined;
                                                        bytes?: Buffer | undefined;
                                                    } | undefined;
                                                    formatString?: {
                                                        format?: any | undefined;
                                                        args?: any[] | undefined;
                                                    } | undefined;
                                                } | undefined;
                                                userGroup?: {
                                                    jsonPath?: string | undefined;
                                                    variableName?: string | undefined;
                                                    literalValue?: {
                                                        jsonObj?: string | undefined;
                                                        jsonArr?: string | undefined;
                                                        double?: number | undefined;
                                                        bool?: boolean | undefined;
                                                        str?: string | undefined;
                                                        int?: number | undefined;
                                                        bytes?: Buffer | undefined;
                                                    } | undefined;
                                                    formatString?: {
                                                        format?: any | undefined;
                                                        args?: any[] | undefined;
                                                    } | undefined;
                                                } | undefined;
                                            } | undefined;
                                            delaySeconds?: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                            hook?: import("./common_wfspec").UTActionTrigger_UTHook | undefined;
                                        }[] | undefined;
                                        userTaskDefVersion?: number | undefined;
                                        notes?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        onCancellationExceptionName?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    startMultipleThreads?: {
                                        threadSpecName?: string | undefined;
                                        variables?: {
                                            [x: string]: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                        } | undefined;
                                        iterable?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    throwEvent?: {
                                        eventDefId?: {
                                            name?: string | undefined;
                                        } | undefined;
                                        content?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                } | undefined;
                            } | undefined;
                            variableDefs?: {
                                varDef?: {
                                    type?: VariableType | undefined;
                                    name?: string | undefined;
                                    defaultValue?: {
                                        jsonObj?: string | undefined;
                                        jsonArr?: string | undefined;
                                        double?: number | undefined;
                                        bool?: boolean | undefined;
                                        str?: string | undefined;
                                        int?: number | undefined;
                                        bytes?: Buffer | undefined;
                                    } | undefined;
                                } | undefined;
                                required?: boolean | undefined;
                                searchable?: boolean | undefined;
                                jsonIndexes?: {
                                    fieldPath?: string | undefined;
                                    fieldType?: VariableType | undefined;
                                }[] | undefined;
                                accessLevel?: import("./wf_spec").WfRunVariableAccessLevel | undefined;
                            }[] | undefined;
                            interruptDefs?: {
                                externalEventDefId?: {
                                    name?: string | undefined;
                                } | undefined;
                                handlerSpecName?: string | undefined;
                            }[] | undefined;
                            retentionPolicy?: {
                                secondsAfterThreadTermination?: number | undefined;
                            } | undefined;
                        } | undefined;
                    } | undefined;
                    entrypointThreadName?: string | undefined;
                    retentionPolicy?: {
                        secondsAfterWfTermination?: number | undefined;
                    } | undefined;
                    migration?: {
                        newMajorVersion?: number | undefined;
                        newRevision?: number | undefined;
                        threadSpecMigrations?: {
                            [x: string]: {
                                newThreadSpecName?: string | undefined;
                                nodeMigrations?: {
                                    [x: string]: {
                                        newNodeName?: string | undefined;
                                    } | undefined;
                                } | undefined;
                            } | undefined;
                        } | undefined;
                    } | undefined;
                    parentWfSpec?: {
                        wfSpecName?: string | undefined;
                        wfSpecMajorVersion?: number | undefined;
                    } | undefined;
                } | undefined): WfSpec;
                fromPartial(object: {
                    id?: {
                        name?: string | undefined;
                        majorVersion?: number | undefined;
                        revision?: number | undefined;
                    } | undefined;
                    createdAt?: string | undefined;
                    frozenVariables?: {
                        varDef?: {
                            type?: VariableType | undefined;
                            name?: string | undefined;
                            defaultValue?: {
                                jsonObj?: string | undefined;
                                jsonArr?: string | undefined;
                                double?: number | undefined;
                                bool?: boolean | undefined;
                                str?: string | undefined;
                                int?: number | undefined;
                                bytes?: Buffer | undefined;
                            } | undefined;
                        } | undefined;
                        required?: boolean | undefined;
                        searchable?: boolean | undefined;
                        jsonIndexes?: {
                            fieldPath?: string | undefined;
                            fieldType?: VariableType | undefined;
                        }[] | undefined;
                        accessLevel?: import("./wf_spec").WfRunVariableAccessLevel | undefined;
                    }[] | undefined;
                    status?: import("./common_enums").MetadataStatus | undefined;
                    threadSpecs?: {
                        [x: string]: {
                            nodes?: {
                                [x: string]: {
                                    outgoingEdges?: {
                                        sinkNodeName?: string | undefined;
                                        condition?: {
                                            comparator?: import("./common_wfspec").Comparator | undefined;
                                            left?: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                            right?: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                        } | undefined;
                                        variableMutations?: {
                                            lhsName?: string | undefined;
                                            lhsJsonPath?: string | undefined;
                                            operation?: import("./common_wfspec").VariableMutationType | undefined;
                                            sourceVariable?: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            nodeOutput?: {
                                                jsonpath?: string | undefined;
                                            } | undefined;
                                        }[] | undefined;
                                    }[] | undefined;
                                    failureHandlers?: {
                                        handlerSpecName?: string | undefined;
                                        specificFailure?: string | undefined;
                                        anyFailureOfType?: import("./wf_spec").FailureHandlerDef_LHFailureType | undefined;
                                    }[] | undefined;
                                    entrypoint?: {} | undefined;
                                    exit?: {
                                        failureDef?: {
                                            failureName?: string | undefined;
                                            message?: string | undefined;
                                            content?: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    task?: {
                                        taskDefId?: {
                                            name?: string | undefined;
                                        } | undefined;
                                        dynamicTask?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        timeoutSeconds?: number | undefined;
                                        retries?: number | undefined;
                                        exponentialBackoff?: {
                                            baseIntervalMs?: number | undefined;
                                            maxDelayMs?: number | undefined;
                                            multiplier?: number | undefined;
                                        } | undefined;
                                        variables?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        }[] | undefined;
                                    } | undefined;
                                    externalEvent?: {
                                        externalEventDefId?: {
                                            name?: string | undefined;
                                        } | undefined;
                                        timeoutSeconds?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    startThread?: {
                                        threadSpecName?: string | undefined;
                                        variables?: {
                                            [x: string]: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    waitForThreads?: {
                                        threads?: {
                                            threads?: {
                                                threadRunNumber?: {
                                                    jsonPath?: string | undefined;
                                                    variableName?: string | undefined;
                                                    literalValue?: {
                                                        jsonObj?: string | undefined;
                                                        jsonArr?: string | undefined;
                                                        double?: number | undefined;
                                                        bool?: boolean | undefined;
                                                        str?: string | undefined;
                                                        int?: number | undefined;
                                                        bytes?: Buffer | undefined;
                                                    } | undefined;
                                                    formatString?: {
                                                        format?: any | undefined;
                                                        args?: any[] | undefined;
                                                    } | undefined;
                                                } | undefined;
                                            }[] | undefined;
                                        } | undefined;
                                        threadList?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        perThreadFailureHandlers?: {
                                            handlerSpecName?: string | undefined;
                                            specificFailure?: string | undefined;
                                            anyFailureOfType?: import("./wf_spec").FailureHandlerDef_LHFailureType | undefined;
                                        }[] | undefined;
                                    } | undefined;
                                    nop?: {} | undefined;
                                    sleep?: {
                                        rawSeconds?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        timestamp?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        isoDate?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    userTask?: {
                                        userTaskDefName?: string | undefined;
                                        userGroup?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        userId?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        actions?: {
                                            task?: {
                                                task?: {
                                                    taskDefId?: {
                                                        name?: string | undefined;
                                                    } | undefined;
                                                    dynamicTask?: {
                                                        jsonPath?: string | undefined;
                                                        variableName?: string | undefined;
                                                        literalValue?: {
                                                            jsonObj?: string | undefined;
                                                            jsonArr?: string | undefined;
                                                            double?: number | undefined;
                                                            bool?: boolean | undefined;
                                                            str?: string | undefined;
                                                            int?: number | undefined;
                                                            bytes?: Buffer | undefined;
                                                        } | undefined;
                                                        formatString?: {
                                                            format?: any | undefined;
                                                            args?: any[] | undefined;
                                                        } | undefined;
                                                    } | undefined;
                                                    timeoutSeconds?: number | undefined;
                                                    retries?: number | undefined;
                                                    exponentialBackoff?: {
                                                        baseIntervalMs?: number | undefined;
                                                        maxDelayMs?: number | undefined;
                                                        multiplier?: number | undefined;
                                                    } | undefined;
                                                    variables?: {
                                                        jsonPath?: string | undefined;
                                                        variableName?: string | undefined;
                                                        literalValue?: {
                                                            jsonObj?: string | undefined;
                                                            jsonArr?: string | undefined;
                                                            double?: number | undefined;
                                                            bool?: boolean | undefined;
                                                            str?: string | undefined;
                                                            int?: number | undefined;
                                                            bytes?: Buffer | undefined;
                                                        } | undefined;
                                                        formatString?: {
                                                            format?: any | undefined;
                                                            args?: any[] | undefined;
                                                        } | undefined;
                                                    }[] | undefined;
                                                } | undefined;
                                                mutations?: {
                                                    lhsName?: string | undefined;
                                                    lhsJsonPath?: string | undefined;
                                                    operation?: import("./common_wfspec").VariableMutationType | undefined;
                                                    sourceVariable?: {
                                                        jsonPath?: string | undefined;
                                                        variableName?: string | undefined;
                                                        literalValue?: {
                                                            jsonObj?: string | undefined;
                                                            jsonArr?: string | undefined;
                                                            double?: number | undefined;
                                                            bool?: boolean | undefined;
                                                            str?: string | undefined;
                                                            int?: number | undefined;
                                                            bytes?: Buffer | undefined;
                                                        } | undefined;
                                                        formatString?: {
                                                            format?: any | undefined;
                                                            args?: any[] | undefined;
                                                        } | undefined;
                                                    } | undefined;
                                                    literalValue?: {
                                                        jsonObj?: string | undefined;
                                                        jsonArr?: string | undefined;
                                                        double?: number | undefined;
                                                        bool?: boolean | undefined;
                                                        str?: string | undefined;
                                                        int?: number | undefined;
                                                        bytes?: Buffer | undefined;
                                                    } | undefined;
                                                    nodeOutput?: {
                                                        jsonpath?: string | undefined;
                                                    } | undefined;
                                                }[] | undefined;
                                            } | undefined;
                                            cancel?: {} | undefined;
                                            reassign?: {
                                                userId?: {
                                                    jsonPath?: string | undefined;
                                                    variableName?: string | undefined;
                                                    literalValue?: {
                                                        jsonObj?: string | undefined;
                                                        jsonArr?: string | undefined;
                                                        double?: number | undefined;
                                                        bool?: boolean | undefined;
                                                        str?: string | undefined;
                                                        int?: number | undefined;
                                                        bytes?: Buffer | undefined;
                                                    } | undefined;
                                                    formatString?: {
                                                        format?: any | undefined;
                                                        args?: any[] | undefined;
                                                    } | undefined;
                                                } | undefined;
                                                userGroup?: {
                                                    jsonPath?: string | undefined;
                                                    variableName?: string | undefined;
                                                    literalValue?: {
                                                        jsonObj?: string | undefined;
                                                        jsonArr?: string | undefined;
                                                        double?: number | undefined;
                                                        bool?: boolean | undefined;
                                                        str?: string | undefined;
                                                        int?: number | undefined;
                                                        bytes?: Buffer | undefined;
                                                    } | undefined;
                                                    formatString?: {
                                                        format?: any | undefined;
                                                        args?: any[] | undefined;
                                                    } | undefined;
                                                } | undefined;
                                            } | undefined;
                                            delaySeconds?: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                            hook?: import("./common_wfspec").UTActionTrigger_UTHook | undefined;
                                        }[] | undefined;
                                        userTaskDefVersion?: number | undefined;
                                        notes?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        onCancellationExceptionName?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    startMultipleThreads?: {
                                        threadSpecName?: string | undefined;
                                        variables?: {
                                            [x: string]: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                        } | undefined;
                                        iterable?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    throwEvent?: {
                                        eventDefId?: {
                                            name?: string | undefined;
                                        } | undefined;
                                        content?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                } | undefined;
                            } | undefined;
                            variableDefs?: {
                                varDef?: {
                                    type?: VariableType | undefined;
                                    name?: string | undefined;
                                    defaultValue?: {
                                        jsonObj?: string | undefined;
                                        jsonArr?: string | undefined;
                                        double?: number | undefined;
                                        bool?: boolean | undefined;
                                        str?: string | undefined;
                                        int?: number | undefined;
                                        bytes?: Buffer | undefined;
                                    } | undefined;
                                } | undefined;
                                required?: boolean | undefined;
                                searchable?: boolean | undefined;
                                jsonIndexes?: {
                                    fieldPath?: string | undefined;
                                    fieldType?: VariableType | undefined;
                                }[] | undefined;
                                accessLevel?: import("./wf_spec").WfRunVariableAccessLevel | undefined;
                            }[] | undefined;
                            interruptDefs?: {
                                externalEventDefId?: {
                                    name?: string | undefined;
                                } | undefined;
                                handlerSpecName?: string | undefined;
                            }[] | undefined;
                            retentionPolicy?: {
                                secondsAfterThreadTermination?: number | undefined;
                            } | undefined;
                        } | undefined;
                    } | undefined;
                    entrypointThreadName?: string | undefined;
                    retentionPolicy?: {
                        secondsAfterWfTermination?: number | undefined;
                    } | undefined;
                    migration?: {
                        newMajorVersion?: number | undefined;
                        newRevision?: number | undefined;
                        threadSpecMigrations?: {
                            [x: string]: {
                                newThreadSpecName?: string | undefined;
                                nodeMigrations?: {
                                    [x: string]: {
                                        newNodeName?: string | undefined;
                                    } | undefined;
                                } | undefined;
                            } | undefined;
                        } | undefined;
                    } | undefined;
                    parentWfSpec?: {
                        wfSpecName?: string | undefined;
                        wfSpecMajorVersion?: number | undefined;
                    } | undefined;
                }): WfSpec;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Returns the latest WfSpec with a specified name (and optionally a specified Major Version). */
        readonly getLatestWfSpec: {
            readonly name: "GetLatestWfSpec";
            readonly requestType: {
                encode(message: GetLatestWfSpecRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GetLatestWfSpecRequest;
                create(base?: DeepPartial<GetLatestWfSpecRequest>): GetLatestWfSpecRequest;
                fromPartial(object: DeepPartial<GetLatestWfSpecRequest>): GetLatestWfSpecRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: WfSpec, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): WfSpec;
                create(base?: {
                    id?: {
                        name?: string | undefined;
                        majorVersion?: number | undefined;
                        revision?: number | undefined;
                    } | undefined;
                    createdAt?: string | undefined;
                    frozenVariables?: {
                        varDef?: {
                            type?: VariableType | undefined;
                            name?: string | undefined;
                            defaultValue?: {
                                jsonObj?: string | undefined;
                                jsonArr?: string | undefined;
                                double?: number | undefined;
                                bool?: boolean | undefined;
                                str?: string | undefined;
                                int?: number | undefined;
                                bytes?: Buffer | undefined;
                            } | undefined;
                        } | undefined;
                        required?: boolean | undefined;
                        searchable?: boolean | undefined;
                        jsonIndexes?: {
                            fieldPath?: string | undefined;
                            fieldType?: VariableType | undefined;
                        }[] | undefined;
                        accessLevel?: import("./wf_spec").WfRunVariableAccessLevel | undefined;
                    }[] | undefined;
                    status?: import("./common_enums").MetadataStatus | undefined;
                    threadSpecs?: {
                        [x: string]: {
                            nodes?: {
                                [x: string]: {
                                    outgoingEdges?: {
                                        sinkNodeName?: string | undefined;
                                        condition?: {
                                            comparator?: import("./common_wfspec").Comparator | undefined;
                                            left?: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                            right?: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                        } | undefined;
                                        variableMutations?: {
                                            lhsName?: string | undefined;
                                            lhsJsonPath?: string | undefined;
                                            operation?: import("./common_wfspec").VariableMutationType | undefined;
                                            sourceVariable?: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            nodeOutput?: {
                                                jsonpath?: string | undefined;
                                            } | undefined;
                                        }[] | undefined;
                                    }[] | undefined;
                                    failureHandlers?: {
                                        handlerSpecName?: string | undefined;
                                        specificFailure?: string | undefined;
                                        anyFailureOfType?: import("./wf_spec").FailureHandlerDef_LHFailureType | undefined;
                                    }[] | undefined;
                                    entrypoint?: {} | undefined;
                                    exit?: {
                                        failureDef?: {
                                            failureName?: string | undefined;
                                            message?: string | undefined;
                                            content?: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    task?: {
                                        taskDefId?: {
                                            name?: string | undefined;
                                        } | undefined;
                                        dynamicTask?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        timeoutSeconds?: number | undefined;
                                        retries?: number | undefined;
                                        exponentialBackoff?: {
                                            baseIntervalMs?: number | undefined;
                                            maxDelayMs?: number | undefined;
                                            multiplier?: number | undefined;
                                        } | undefined;
                                        variables?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        }[] | undefined;
                                    } | undefined;
                                    externalEvent?: {
                                        externalEventDefId?: {
                                            name?: string | undefined;
                                        } | undefined;
                                        timeoutSeconds?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    startThread?: {
                                        threadSpecName?: string | undefined;
                                        variables?: {
                                            [x: string]: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    waitForThreads?: {
                                        threads?: {
                                            threads?: {
                                                threadRunNumber?: {
                                                    jsonPath?: string | undefined;
                                                    variableName?: string | undefined;
                                                    literalValue?: {
                                                        jsonObj?: string | undefined;
                                                        jsonArr?: string | undefined;
                                                        double?: number | undefined;
                                                        bool?: boolean | undefined;
                                                        str?: string | undefined;
                                                        int?: number | undefined;
                                                        bytes?: Buffer | undefined;
                                                    } | undefined;
                                                    formatString?: {
                                                        format?: any | undefined;
                                                        args?: any[] | undefined;
                                                    } | undefined;
                                                } | undefined;
                                            }[] | undefined;
                                        } | undefined;
                                        threadList?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        perThreadFailureHandlers?: {
                                            handlerSpecName?: string | undefined;
                                            specificFailure?: string | undefined;
                                            anyFailureOfType?: import("./wf_spec").FailureHandlerDef_LHFailureType | undefined;
                                        }[] | undefined;
                                    } | undefined;
                                    nop?: {} | undefined;
                                    sleep?: {
                                        rawSeconds?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        timestamp?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        isoDate?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    userTask?: {
                                        userTaskDefName?: string | undefined;
                                        userGroup?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        userId?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        actions?: {
                                            task?: {
                                                task?: {
                                                    taskDefId?: {
                                                        name?: string | undefined;
                                                    } | undefined;
                                                    dynamicTask?: {
                                                        jsonPath?: string | undefined;
                                                        variableName?: string | undefined;
                                                        literalValue?: {
                                                            jsonObj?: string | undefined;
                                                            jsonArr?: string | undefined;
                                                            double?: number | undefined;
                                                            bool?: boolean | undefined;
                                                            str?: string | undefined;
                                                            int?: number | undefined;
                                                            bytes?: Buffer | undefined;
                                                        } | undefined;
                                                        formatString?: {
                                                            format?: any | undefined;
                                                            args?: any[] | undefined;
                                                        } | undefined;
                                                    } | undefined;
                                                    timeoutSeconds?: number | undefined;
                                                    retries?: number | undefined;
                                                    exponentialBackoff?: {
                                                        baseIntervalMs?: number | undefined;
                                                        maxDelayMs?: number | undefined;
                                                        multiplier?: number | undefined;
                                                    } | undefined;
                                                    variables?: {
                                                        jsonPath?: string | undefined;
                                                        variableName?: string | undefined;
                                                        literalValue?: {
                                                            jsonObj?: string | undefined;
                                                            jsonArr?: string | undefined;
                                                            double?: number | undefined;
                                                            bool?: boolean | undefined;
                                                            str?: string | undefined;
                                                            int?: number | undefined;
                                                            bytes?: Buffer | undefined;
                                                        } | undefined;
                                                        formatString?: {
                                                            format?: any | undefined;
                                                            args?: any[] | undefined;
                                                        } | undefined;
                                                    }[] | undefined;
                                                } | undefined;
                                                mutations?: {
                                                    lhsName?: string | undefined;
                                                    lhsJsonPath?: string | undefined;
                                                    operation?: import("./common_wfspec").VariableMutationType | undefined;
                                                    sourceVariable?: {
                                                        jsonPath?: string | undefined;
                                                        variableName?: string | undefined;
                                                        literalValue?: {
                                                            jsonObj?: string | undefined;
                                                            jsonArr?: string | undefined;
                                                            double?: number | undefined;
                                                            bool?: boolean | undefined;
                                                            str?: string | undefined;
                                                            int?: number | undefined;
                                                            bytes?: Buffer | undefined;
                                                        } | undefined;
                                                        formatString?: {
                                                            format?: any | undefined;
                                                            args?: any[] | undefined;
                                                        } | undefined;
                                                    } | undefined;
                                                    literalValue?: {
                                                        jsonObj?: string | undefined;
                                                        jsonArr?: string | undefined;
                                                        double?: number | undefined;
                                                        bool?: boolean | undefined;
                                                        str?: string | undefined;
                                                        int?: number | undefined;
                                                        bytes?: Buffer | undefined;
                                                    } | undefined;
                                                    nodeOutput?: {
                                                        jsonpath?: string | undefined;
                                                    } | undefined;
                                                }[] | undefined;
                                            } | undefined;
                                            cancel?: {} | undefined;
                                            reassign?: {
                                                userId?: {
                                                    jsonPath?: string | undefined;
                                                    variableName?: string | undefined;
                                                    literalValue?: {
                                                        jsonObj?: string | undefined;
                                                        jsonArr?: string | undefined;
                                                        double?: number | undefined;
                                                        bool?: boolean | undefined;
                                                        str?: string | undefined;
                                                        int?: number | undefined;
                                                        bytes?: Buffer | undefined;
                                                    } | undefined;
                                                    formatString?: {
                                                        format?: any | undefined;
                                                        args?: any[] | undefined;
                                                    } | undefined;
                                                } | undefined;
                                                userGroup?: {
                                                    jsonPath?: string | undefined;
                                                    variableName?: string | undefined;
                                                    literalValue?: {
                                                        jsonObj?: string | undefined;
                                                        jsonArr?: string | undefined;
                                                        double?: number | undefined;
                                                        bool?: boolean | undefined;
                                                        str?: string | undefined;
                                                        int?: number | undefined;
                                                        bytes?: Buffer | undefined;
                                                    } | undefined;
                                                    formatString?: {
                                                        format?: any | undefined;
                                                        args?: any[] | undefined;
                                                    } | undefined;
                                                } | undefined;
                                            } | undefined;
                                            delaySeconds?: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                            hook?: import("./common_wfspec").UTActionTrigger_UTHook | undefined;
                                        }[] | undefined;
                                        userTaskDefVersion?: number | undefined;
                                        notes?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        onCancellationExceptionName?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    startMultipleThreads?: {
                                        threadSpecName?: string | undefined;
                                        variables?: {
                                            [x: string]: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                        } | undefined;
                                        iterable?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    throwEvent?: {
                                        eventDefId?: {
                                            name?: string | undefined;
                                        } | undefined;
                                        content?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                } | undefined;
                            } | undefined;
                            variableDefs?: {
                                varDef?: {
                                    type?: VariableType | undefined;
                                    name?: string | undefined;
                                    defaultValue?: {
                                        jsonObj?: string | undefined;
                                        jsonArr?: string | undefined;
                                        double?: number | undefined;
                                        bool?: boolean | undefined;
                                        str?: string | undefined;
                                        int?: number | undefined;
                                        bytes?: Buffer | undefined;
                                    } | undefined;
                                } | undefined;
                                required?: boolean | undefined;
                                searchable?: boolean | undefined;
                                jsonIndexes?: {
                                    fieldPath?: string | undefined;
                                    fieldType?: VariableType | undefined;
                                }[] | undefined;
                                accessLevel?: import("./wf_spec").WfRunVariableAccessLevel | undefined;
                            }[] | undefined;
                            interruptDefs?: {
                                externalEventDefId?: {
                                    name?: string | undefined;
                                } | undefined;
                                handlerSpecName?: string | undefined;
                            }[] | undefined;
                            retentionPolicy?: {
                                secondsAfterThreadTermination?: number | undefined;
                            } | undefined;
                        } | undefined;
                    } | undefined;
                    entrypointThreadName?: string | undefined;
                    retentionPolicy?: {
                        secondsAfterWfTermination?: number | undefined;
                    } | undefined;
                    migration?: {
                        newMajorVersion?: number | undefined;
                        newRevision?: number | undefined;
                        threadSpecMigrations?: {
                            [x: string]: {
                                newThreadSpecName?: string | undefined;
                                nodeMigrations?: {
                                    [x: string]: {
                                        newNodeName?: string | undefined;
                                    } | undefined;
                                } | undefined;
                            } | undefined;
                        } | undefined;
                    } | undefined;
                    parentWfSpec?: {
                        wfSpecName?: string | undefined;
                        wfSpecMajorVersion?: number | undefined;
                    } | undefined;
                } | undefined): WfSpec;
                fromPartial(object: {
                    id?: {
                        name?: string | undefined;
                        majorVersion?: number | undefined;
                        revision?: number | undefined;
                    } | undefined;
                    createdAt?: string | undefined;
                    frozenVariables?: {
                        varDef?: {
                            type?: VariableType | undefined;
                            name?: string | undefined;
                            defaultValue?: {
                                jsonObj?: string | undefined;
                                jsonArr?: string | undefined;
                                double?: number | undefined;
                                bool?: boolean | undefined;
                                str?: string | undefined;
                                int?: number | undefined;
                                bytes?: Buffer | undefined;
                            } | undefined;
                        } | undefined;
                        required?: boolean | undefined;
                        searchable?: boolean | undefined;
                        jsonIndexes?: {
                            fieldPath?: string | undefined;
                            fieldType?: VariableType | undefined;
                        }[] | undefined;
                        accessLevel?: import("./wf_spec").WfRunVariableAccessLevel | undefined;
                    }[] | undefined;
                    status?: import("./common_enums").MetadataStatus | undefined;
                    threadSpecs?: {
                        [x: string]: {
                            nodes?: {
                                [x: string]: {
                                    outgoingEdges?: {
                                        sinkNodeName?: string | undefined;
                                        condition?: {
                                            comparator?: import("./common_wfspec").Comparator | undefined;
                                            left?: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                            right?: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                        } | undefined;
                                        variableMutations?: {
                                            lhsName?: string | undefined;
                                            lhsJsonPath?: string | undefined;
                                            operation?: import("./common_wfspec").VariableMutationType | undefined;
                                            sourceVariable?: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            nodeOutput?: {
                                                jsonpath?: string | undefined;
                                            } | undefined;
                                        }[] | undefined;
                                    }[] | undefined;
                                    failureHandlers?: {
                                        handlerSpecName?: string | undefined;
                                        specificFailure?: string | undefined;
                                        anyFailureOfType?: import("./wf_spec").FailureHandlerDef_LHFailureType | undefined;
                                    }[] | undefined;
                                    entrypoint?: {} | undefined;
                                    exit?: {
                                        failureDef?: {
                                            failureName?: string | undefined;
                                            message?: string | undefined;
                                            content?: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    task?: {
                                        taskDefId?: {
                                            name?: string | undefined;
                                        } | undefined;
                                        dynamicTask?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        timeoutSeconds?: number | undefined;
                                        retries?: number | undefined;
                                        exponentialBackoff?: {
                                            baseIntervalMs?: number | undefined;
                                            maxDelayMs?: number | undefined;
                                            multiplier?: number | undefined;
                                        } | undefined;
                                        variables?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        }[] | undefined;
                                    } | undefined;
                                    externalEvent?: {
                                        externalEventDefId?: {
                                            name?: string | undefined;
                                        } | undefined;
                                        timeoutSeconds?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    startThread?: {
                                        threadSpecName?: string | undefined;
                                        variables?: {
                                            [x: string]: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    waitForThreads?: {
                                        threads?: {
                                            threads?: {
                                                threadRunNumber?: {
                                                    jsonPath?: string | undefined;
                                                    variableName?: string | undefined;
                                                    literalValue?: {
                                                        jsonObj?: string | undefined;
                                                        jsonArr?: string | undefined;
                                                        double?: number | undefined;
                                                        bool?: boolean | undefined;
                                                        str?: string | undefined;
                                                        int?: number | undefined;
                                                        bytes?: Buffer | undefined;
                                                    } | undefined;
                                                    formatString?: {
                                                        format?: any | undefined;
                                                        args?: any[] | undefined;
                                                    } | undefined;
                                                } | undefined;
                                            }[] | undefined;
                                        } | undefined;
                                        threadList?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        perThreadFailureHandlers?: {
                                            handlerSpecName?: string | undefined;
                                            specificFailure?: string | undefined;
                                            anyFailureOfType?: import("./wf_spec").FailureHandlerDef_LHFailureType | undefined;
                                        }[] | undefined;
                                    } | undefined;
                                    nop?: {} | undefined;
                                    sleep?: {
                                        rawSeconds?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        timestamp?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        isoDate?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    userTask?: {
                                        userTaskDefName?: string | undefined;
                                        userGroup?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        userId?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        actions?: {
                                            task?: {
                                                task?: {
                                                    taskDefId?: {
                                                        name?: string | undefined;
                                                    } | undefined;
                                                    dynamicTask?: {
                                                        jsonPath?: string | undefined;
                                                        variableName?: string | undefined;
                                                        literalValue?: {
                                                            jsonObj?: string | undefined;
                                                            jsonArr?: string | undefined;
                                                            double?: number | undefined;
                                                            bool?: boolean | undefined;
                                                            str?: string | undefined;
                                                            int?: number | undefined;
                                                            bytes?: Buffer | undefined;
                                                        } | undefined;
                                                        formatString?: {
                                                            format?: any | undefined;
                                                            args?: any[] | undefined;
                                                        } | undefined;
                                                    } | undefined;
                                                    timeoutSeconds?: number | undefined;
                                                    retries?: number | undefined;
                                                    exponentialBackoff?: {
                                                        baseIntervalMs?: number | undefined;
                                                        maxDelayMs?: number | undefined;
                                                        multiplier?: number | undefined;
                                                    } | undefined;
                                                    variables?: {
                                                        jsonPath?: string | undefined;
                                                        variableName?: string | undefined;
                                                        literalValue?: {
                                                            jsonObj?: string | undefined;
                                                            jsonArr?: string | undefined;
                                                            double?: number | undefined;
                                                            bool?: boolean | undefined;
                                                            str?: string | undefined;
                                                            int?: number | undefined;
                                                            bytes?: Buffer | undefined;
                                                        } | undefined;
                                                        formatString?: {
                                                            format?: any | undefined;
                                                            args?: any[] | undefined;
                                                        } | undefined;
                                                    }[] | undefined;
                                                } | undefined;
                                                mutations?: {
                                                    lhsName?: string | undefined;
                                                    lhsJsonPath?: string | undefined;
                                                    operation?: import("./common_wfspec").VariableMutationType | undefined;
                                                    sourceVariable?: {
                                                        jsonPath?: string | undefined;
                                                        variableName?: string | undefined;
                                                        literalValue?: {
                                                            jsonObj?: string | undefined;
                                                            jsonArr?: string | undefined;
                                                            double?: number | undefined;
                                                            bool?: boolean | undefined;
                                                            str?: string | undefined;
                                                            int?: number | undefined;
                                                            bytes?: Buffer | undefined;
                                                        } | undefined;
                                                        formatString?: {
                                                            format?: any | undefined;
                                                            args?: any[] | undefined;
                                                        } | undefined;
                                                    } | undefined;
                                                    literalValue?: {
                                                        jsonObj?: string | undefined;
                                                        jsonArr?: string | undefined;
                                                        double?: number | undefined;
                                                        bool?: boolean | undefined;
                                                        str?: string | undefined;
                                                        int?: number | undefined;
                                                        bytes?: Buffer | undefined;
                                                    } | undefined;
                                                    nodeOutput?: {
                                                        jsonpath?: string | undefined;
                                                    } | undefined;
                                                }[] | undefined;
                                            } | undefined;
                                            cancel?: {} | undefined;
                                            reassign?: {
                                                userId?: {
                                                    jsonPath?: string | undefined;
                                                    variableName?: string | undefined;
                                                    literalValue?: {
                                                        jsonObj?: string | undefined;
                                                        jsonArr?: string | undefined;
                                                        double?: number | undefined;
                                                        bool?: boolean | undefined;
                                                        str?: string | undefined;
                                                        int?: number | undefined;
                                                        bytes?: Buffer | undefined;
                                                    } | undefined;
                                                    formatString?: {
                                                        format?: any | undefined;
                                                        args?: any[] | undefined;
                                                    } | undefined;
                                                } | undefined;
                                                userGroup?: {
                                                    jsonPath?: string | undefined;
                                                    variableName?: string | undefined;
                                                    literalValue?: {
                                                        jsonObj?: string | undefined;
                                                        jsonArr?: string | undefined;
                                                        double?: number | undefined;
                                                        bool?: boolean | undefined;
                                                        str?: string | undefined;
                                                        int?: number | undefined;
                                                        bytes?: Buffer | undefined;
                                                    } | undefined;
                                                    formatString?: {
                                                        format?: any | undefined;
                                                        args?: any[] | undefined;
                                                    } | undefined;
                                                } | undefined;
                                            } | undefined;
                                            delaySeconds?: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                            hook?: import("./common_wfspec").UTActionTrigger_UTHook | undefined;
                                        }[] | undefined;
                                        userTaskDefVersion?: number | undefined;
                                        notes?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        onCancellationExceptionName?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    startMultipleThreads?: {
                                        threadSpecName?: string | undefined;
                                        variables?: {
                                            [x: string]: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                        } | undefined;
                                        iterable?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    throwEvent?: {
                                        eventDefId?: {
                                            name?: string | undefined;
                                        } | undefined;
                                        content?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                } | undefined;
                            } | undefined;
                            variableDefs?: {
                                varDef?: {
                                    type?: VariableType | undefined;
                                    name?: string | undefined;
                                    defaultValue?: {
                                        jsonObj?: string | undefined;
                                        jsonArr?: string | undefined;
                                        double?: number | undefined;
                                        bool?: boolean | undefined;
                                        str?: string | undefined;
                                        int?: number | undefined;
                                        bytes?: Buffer | undefined;
                                    } | undefined;
                                } | undefined;
                                required?: boolean | undefined;
                                searchable?: boolean | undefined;
                                jsonIndexes?: {
                                    fieldPath?: string | undefined;
                                    fieldType?: VariableType | undefined;
                                }[] | undefined;
                                accessLevel?: import("./wf_spec").WfRunVariableAccessLevel | undefined;
                            }[] | undefined;
                            interruptDefs?: {
                                externalEventDefId?: {
                                    name?: string | undefined;
                                } | undefined;
                                handlerSpecName?: string | undefined;
                            }[] | undefined;
                            retentionPolicy?: {
                                secondsAfterThreadTermination?: number | undefined;
                            } | undefined;
                        } | undefined;
                    } | undefined;
                    entrypointThreadName?: string | undefined;
                    retentionPolicy?: {
                        secondsAfterWfTermination?: number | undefined;
                    } | undefined;
                    migration?: {
                        newMajorVersion?: number | undefined;
                        newRevision?: number | undefined;
                        threadSpecMigrations?: {
                            [x: string]: {
                                newThreadSpecName?: string | undefined;
                                nodeMigrations?: {
                                    [x: string]: {
                                        newNodeName?: string | undefined;
                                    } | undefined;
                                } | undefined;
                            } | undefined;
                        } | undefined;
                    } | undefined;
                    parentWfSpec?: {
                        wfSpecName?: string | undefined;
                        wfSpecMajorVersion?: number | undefined;
                    } | undefined;
                }): WfSpec;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * EXPERIMENTAL: Migrates all WfRun's from one version of a WfSpec onto a newer version of the
         * same WfSpec. This is useful for long-running WfRun's (eg. a 60-day marketing campaign) where
         * you must update WfRun's that are in the RUNNING state rather than allowing them to run to
         * completion.
         *
         * As of 0.7.2, this feature is only partially implemented.
         */
        readonly migrateWfSpec: {
            readonly name: "MigrateWfSpec";
            readonly requestType: {
                encode(message: MigrateWfSpecRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): MigrateWfSpecRequest;
                create(base?: DeepPartial<MigrateWfSpecRequest>): MigrateWfSpecRequest;
                fromPartial(object: DeepPartial<MigrateWfSpecRequest>): MigrateWfSpecRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: WfSpec, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): WfSpec;
                create(base?: {
                    id?: {
                        name?: string | undefined;
                        majorVersion?: number | undefined;
                        revision?: number | undefined;
                    } | undefined;
                    createdAt?: string | undefined;
                    frozenVariables?: {
                        varDef?: {
                            type?: VariableType | undefined;
                            name?: string | undefined;
                            defaultValue?: {
                                jsonObj?: string | undefined;
                                jsonArr?: string | undefined;
                                double?: number | undefined;
                                bool?: boolean | undefined;
                                str?: string | undefined;
                                int?: number | undefined;
                                bytes?: Buffer | undefined;
                            } | undefined;
                        } | undefined;
                        required?: boolean | undefined;
                        searchable?: boolean | undefined;
                        jsonIndexes?: {
                            fieldPath?: string | undefined;
                            fieldType?: VariableType | undefined;
                        }[] | undefined;
                        accessLevel?: import("./wf_spec").WfRunVariableAccessLevel | undefined;
                    }[] | undefined;
                    status?: import("./common_enums").MetadataStatus | undefined;
                    threadSpecs?: {
                        [x: string]: {
                            nodes?: {
                                [x: string]: {
                                    outgoingEdges?: {
                                        sinkNodeName?: string | undefined;
                                        condition?: {
                                            comparator?: import("./common_wfspec").Comparator | undefined;
                                            left?: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                            right?: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                        } | undefined;
                                        variableMutations?: {
                                            lhsName?: string | undefined;
                                            lhsJsonPath?: string | undefined;
                                            operation?: import("./common_wfspec").VariableMutationType | undefined;
                                            sourceVariable?: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            nodeOutput?: {
                                                jsonpath?: string | undefined;
                                            } | undefined;
                                        }[] | undefined;
                                    }[] | undefined;
                                    failureHandlers?: {
                                        handlerSpecName?: string | undefined;
                                        specificFailure?: string | undefined;
                                        anyFailureOfType?: import("./wf_spec").FailureHandlerDef_LHFailureType | undefined;
                                    }[] | undefined;
                                    entrypoint?: {} | undefined;
                                    exit?: {
                                        failureDef?: {
                                            failureName?: string | undefined;
                                            message?: string | undefined;
                                            content?: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    task?: {
                                        taskDefId?: {
                                            name?: string | undefined;
                                        } | undefined;
                                        dynamicTask?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        timeoutSeconds?: number | undefined;
                                        retries?: number | undefined;
                                        exponentialBackoff?: {
                                            baseIntervalMs?: number | undefined;
                                            maxDelayMs?: number | undefined;
                                            multiplier?: number | undefined;
                                        } | undefined;
                                        variables?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        }[] | undefined;
                                    } | undefined;
                                    externalEvent?: {
                                        externalEventDefId?: {
                                            name?: string | undefined;
                                        } | undefined;
                                        timeoutSeconds?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    startThread?: {
                                        threadSpecName?: string | undefined;
                                        variables?: {
                                            [x: string]: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    waitForThreads?: {
                                        threads?: {
                                            threads?: {
                                                threadRunNumber?: {
                                                    jsonPath?: string | undefined;
                                                    variableName?: string | undefined;
                                                    literalValue?: {
                                                        jsonObj?: string | undefined;
                                                        jsonArr?: string | undefined;
                                                        double?: number | undefined;
                                                        bool?: boolean | undefined;
                                                        str?: string | undefined;
                                                        int?: number | undefined;
                                                        bytes?: Buffer | undefined;
                                                    } | undefined;
                                                    formatString?: {
                                                        format?: any | undefined;
                                                        args?: any[] | undefined;
                                                    } | undefined;
                                                } | undefined;
                                            }[] | undefined;
                                        } | undefined;
                                        threadList?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        perThreadFailureHandlers?: {
                                            handlerSpecName?: string | undefined;
                                            specificFailure?: string | undefined;
                                            anyFailureOfType?: import("./wf_spec").FailureHandlerDef_LHFailureType | undefined;
                                        }[] | undefined;
                                    } | undefined;
                                    nop?: {} | undefined;
                                    sleep?: {
                                        rawSeconds?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        timestamp?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        isoDate?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    userTask?: {
                                        userTaskDefName?: string | undefined;
                                        userGroup?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        userId?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        actions?: {
                                            task?: {
                                                task?: {
                                                    taskDefId?: {
                                                        name?: string | undefined;
                                                    } | undefined;
                                                    dynamicTask?: {
                                                        jsonPath?: string | undefined;
                                                        variableName?: string | undefined;
                                                        literalValue?: {
                                                            jsonObj?: string | undefined;
                                                            jsonArr?: string | undefined;
                                                            double?: number | undefined;
                                                            bool?: boolean | undefined;
                                                            str?: string | undefined;
                                                            int?: number | undefined;
                                                            bytes?: Buffer | undefined;
                                                        } | undefined;
                                                        formatString?: {
                                                            format?: any | undefined;
                                                            args?: any[] | undefined;
                                                        } | undefined;
                                                    } | undefined;
                                                    timeoutSeconds?: number | undefined;
                                                    retries?: number | undefined;
                                                    exponentialBackoff?: {
                                                        baseIntervalMs?: number | undefined;
                                                        maxDelayMs?: number | undefined;
                                                        multiplier?: number | undefined;
                                                    } | undefined;
                                                    variables?: {
                                                        jsonPath?: string | undefined;
                                                        variableName?: string | undefined;
                                                        literalValue?: {
                                                            jsonObj?: string | undefined;
                                                            jsonArr?: string | undefined;
                                                            double?: number | undefined;
                                                            bool?: boolean | undefined;
                                                            str?: string | undefined;
                                                            int?: number | undefined;
                                                            bytes?: Buffer | undefined;
                                                        } | undefined;
                                                        formatString?: {
                                                            format?: any | undefined;
                                                            args?: any[] | undefined;
                                                        } | undefined;
                                                    }[] | undefined;
                                                } | undefined;
                                                mutations?: {
                                                    lhsName?: string | undefined;
                                                    lhsJsonPath?: string | undefined;
                                                    operation?: import("./common_wfspec").VariableMutationType | undefined;
                                                    sourceVariable?: {
                                                        jsonPath?: string | undefined;
                                                        variableName?: string | undefined;
                                                        literalValue?: {
                                                            jsonObj?: string | undefined;
                                                            jsonArr?: string | undefined;
                                                            double?: number | undefined;
                                                            bool?: boolean | undefined;
                                                            str?: string | undefined;
                                                            int?: number | undefined;
                                                            bytes?: Buffer | undefined;
                                                        } | undefined;
                                                        formatString?: {
                                                            format?: any | undefined;
                                                            args?: any[] | undefined;
                                                        } | undefined;
                                                    } | undefined;
                                                    literalValue?: {
                                                        jsonObj?: string | undefined;
                                                        jsonArr?: string | undefined;
                                                        double?: number | undefined;
                                                        bool?: boolean | undefined;
                                                        str?: string | undefined;
                                                        int?: number | undefined;
                                                        bytes?: Buffer | undefined;
                                                    } | undefined;
                                                    nodeOutput?: {
                                                        jsonpath?: string | undefined;
                                                    } | undefined;
                                                }[] | undefined;
                                            } | undefined;
                                            cancel?: {} | undefined;
                                            reassign?: {
                                                userId?: {
                                                    jsonPath?: string | undefined;
                                                    variableName?: string | undefined;
                                                    literalValue?: {
                                                        jsonObj?: string | undefined;
                                                        jsonArr?: string | undefined;
                                                        double?: number | undefined;
                                                        bool?: boolean | undefined;
                                                        str?: string | undefined;
                                                        int?: number | undefined;
                                                        bytes?: Buffer | undefined;
                                                    } | undefined;
                                                    formatString?: {
                                                        format?: any | undefined;
                                                        args?: any[] | undefined;
                                                    } | undefined;
                                                } | undefined;
                                                userGroup?: {
                                                    jsonPath?: string | undefined;
                                                    variableName?: string | undefined;
                                                    literalValue?: {
                                                        jsonObj?: string | undefined;
                                                        jsonArr?: string | undefined;
                                                        double?: number | undefined;
                                                        bool?: boolean | undefined;
                                                        str?: string | undefined;
                                                        int?: number | undefined;
                                                        bytes?: Buffer | undefined;
                                                    } | undefined;
                                                    formatString?: {
                                                        format?: any | undefined;
                                                        args?: any[] | undefined;
                                                    } | undefined;
                                                } | undefined;
                                            } | undefined;
                                            delaySeconds?: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                            hook?: import("./common_wfspec").UTActionTrigger_UTHook | undefined;
                                        }[] | undefined;
                                        userTaskDefVersion?: number | undefined;
                                        notes?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        onCancellationExceptionName?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    startMultipleThreads?: {
                                        threadSpecName?: string | undefined;
                                        variables?: {
                                            [x: string]: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                        } | undefined;
                                        iterable?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    throwEvent?: {
                                        eventDefId?: {
                                            name?: string | undefined;
                                        } | undefined;
                                        content?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                } | undefined;
                            } | undefined;
                            variableDefs?: {
                                varDef?: {
                                    type?: VariableType | undefined;
                                    name?: string | undefined;
                                    defaultValue?: {
                                        jsonObj?: string | undefined;
                                        jsonArr?: string | undefined;
                                        double?: number | undefined;
                                        bool?: boolean | undefined;
                                        str?: string | undefined;
                                        int?: number | undefined;
                                        bytes?: Buffer | undefined;
                                    } | undefined;
                                } | undefined;
                                required?: boolean | undefined;
                                searchable?: boolean | undefined;
                                jsonIndexes?: {
                                    fieldPath?: string | undefined;
                                    fieldType?: VariableType | undefined;
                                }[] | undefined;
                                accessLevel?: import("./wf_spec").WfRunVariableAccessLevel | undefined;
                            }[] | undefined;
                            interruptDefs?: {
                                externalEventDefId?: {
                                    name?: string | undefined;
                                } | undefined;
                                handlerSpecName?: string | undefined;
                            }[] | undefined;
                            retentionPolicy?: {
                                secondsAfterThreadTermination?: number | undefined;
                            } | undefined;
                        } | undefined;
                    } | undefined;
                    entrypointThreadName?: string | undefined;
                    retentionPolicy?: {
                        secondsAfterWfTermination?: number | undefined;
                    } | undefined;
                    migration?: {
                        newMajorVersion?: number | undefined;
                        newRevision?: number | undefined;
                        threadSpecMigrations?: {
                            [x: string]: {
                                newThreadSpecName?: string | undefined;
                                nodeMigrations?: {
                                    [x: string]: {
                                        newNodeName?: string | undefined;
                                    } | undefined;
                                } | undefined;
                            } | undefined;
                        } | undefined;
                    } | undefined;
                    parentWfSpec?: {
                        wfSpecName?: string | undefined;
                        wfSpecMajorVersion?: number | undefined;
                    } | undefined;
                } | undefined): WfSpec;
                fromPartial(object: {
                    id?: {
                        name?: string | undefined;
                        majorVersion?: number | undefined;
                        revision?: number | undefined;
                    } | undefined;
                    createdAt?: string | undefined;
                    frozenVariables?: {
                        varDef?: {
                            type?: VariableType | undefined;
                            name?: string | undefined;
                            defaultValue?: {
                                jsonObj?: string | undefined;
                                jsonArr?: string | undefined;
                                double?: number | undefined;
                                bool?: boolean | undefined;
                                str?: string | undefined;
                                int?: number | undefined;
                                bytes?: Buffer | undefined;
                            } | undefined;
                        } | undefined;
                        required?: boolean | undefined;
                        searchable?: boolean | undefined;
                        jsonIndexes?: {
                            fieldPath?: string | undefined;
                            fieldType?: VariableType | undefined;
                        }[] | undefined;
                        accessLevel?: import("./wf_spec").WfRunVariableAccessLevel | undefined;
                    }[] | undefined;
                    status?: import("./common_enums").MetadataStatus | undefined;
                    threadSpecs?: {
                        [x: string]: {
                            nodes?: {
                                [x: string]: {
                                    outgoingEdges?: {
                                        sinkNodeName?: string | undefined;
                                        condition?: {
                                            comparator?: import("./common_wfspec").Comparator | undefined;
                                            left?: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                            right?: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                        } | undefined;
                                        variableMutations?: {
                                            lhsName?: string | undefined;
                                            lhsJsonPath?: string | undefined;
                                            operation?: import("./common_wfspec").VariableMutationType | undefined;
                                            sourceVariable?: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            nodeOutput?: {
                                                jsonpath?: string | undefined;
                                            } | undefined;
                                        }[] | undefined;
                                    }[] | undefined;
                                    failureHandlers?: {
                                        handlerSpecName?: string | undefined;
                                        specificFailure?: string | undefined;
                                        anyFailureOfType?: import("./wf_spec").FailureHandlerDef_LHFailureType | undefined;
                                    }[] | undefined;
                                    entrypoint?: {} | undefined;
                                    exit?: {
                                        failureDef?: {
                                            failureName?: string | undefined;
                                            message?: string | undefined;
                                            content?: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    task?: {
                                        taskDefId?: {
                                            name?: string | undefined;
                                        } | undefined;
                                        dynamicTask?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        timeoutSeconds?: number | undefined;
                                        retries?: number | undefined;
                                        exponentialBackoff?: {
                                            baseIntervalMs?: number | undefined;
                                            maxDelayMs?: number | undefined;
                                            multiplier?: number | undefined;
                                        } | undefined;
                                        variables?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        }[] | undefined;
                                    } | undefined;
                                    externalEvent?: {
                                        externalEventDefId?: {
                                            name?: string | undefined;
                                        } | undefined;
                                        timeoutSeconds?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    startThread?: {
                                        threadSpecName?: string | undefined;
                                        variables?: {
                                            [x: string]: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    waitForThreads?: {
                                        threads?: {
                                            threads?: {
                                                threadRunNumber?: {
                                                    jsonPath?: string | undefined;
                                                    variableName?: string | undefined;
                                                    literalValue?: {
                                                        jsonObj?: string | undefined;
                                                        jsonArr?: string | undefined;
                                                        double?: number | undefined;
                                                        bool?: boolean | undefined;
                                                        str?: string | undefined;
                                                        int?: number | undefined;
                                                        bytes?: Buffer | undefined;
                                                    } | undefined;
                                                    formatString?: {
                                                        format?: any | undefined;
                                                        args?: any[] | undefined;
                                                    } | undefined;
                                                } | undefined;
                                            }[] | undefined;
                                        } | undefined;
                                        threadList?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        perThreadFailureHandlers?: {
                                            handlerSpecName?: string | undefined;
                                            specificFailure?: string | undefined;
                                            anyFailureOfType?: import("./wf_spec").FailureHandlerDef_LHFailureType | undefined;
                                        }[] | undefined;
                                    } | undefined;
                                    nop?: {} | undefined;
                                    sleep?: {
                                        rawSeconds?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        timestamp?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        isoDate?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    userTask?: {
                                        userTaskDefName?: string | undefined;
                                        userGroup?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        userId?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        actions?: {
                                            task?: {
                                                task?: {
                                                    taskDefId?: {
                                                        name?: string | undefined;
                                                    } | undefined;
                                                    dynamicTask?: {
                                                        jsonPath?: string | undefined;
                                                        variableName?: string | undefined;
                                                        literalValue?: {
                                                            jsonObj?: string | undefined;
                                                            jsonArr?: string | undefined;
                                                            double?: number | undefined;
                                                            bool?: boolean | undefined;
                                                            str?: string | undefined;
                                                            int?: number | undefined;
                                                            bytes?: Buffer | undefined;
                                                        } | undefined;
                                                        formatString?: {
                                                            format?: any | undefined;
                                                            args?: any[] | undefined;
                                                        } | undefined;
                                                    } | undefined;
                                                    timeoutSeconds?: number | undefined;
                                                    retries?: number | undefined;
                                                    exponentialBackoff?: {
                                                        baseIntervalMs?: number | undefined;
                                                        maxDelayMs?: number | undefined;
                                                        multiplier?: number | undefined;
                                                    } | undefined;
                                                    variables?: {
                                                        jsonPath?: string | undefined;
                                                        variableName?: string | undefined;
                                                        literalValue?: {
                                                            jsonObj?: string | undefined;
                                                            jsonArr?: string | undefined;
                                                            double?: number | undefined;
                                                            bool?: boolean | undefined;
                                                            str?: string | undefined;
                                                            int?: number | undefined;
                                                            bytes?: Buffer | undefined;
                                                        } | undefined;
                                                        formatString?: {
                                                            format?: any | undefined;
                                                            args?: any[] | undefined;
                                                        } | undefined;
                                                    }[] | undefined;
                                                } | undefined;
                                                mutations?: {
                                                    lhsName?: string | undefined;
                                                    lhsJsonPath?: string | undefined;
                                                    operation?: import("./common_wfspec").VariableMutationType | undefined;
                                                    sourceVariable?: {
                                                        jsonPath?: string | undefined;
                                                        variableName?: string | undefined;
                                                        literalValue?: {
                                                            jsonObj?: string | undefined;
                                                            jsonArr?: string | undefined;
                                                            double?: number | undefined;
                                                            bool?: boolean | undefined;
                                                            str?: string | undefined;
                                                            int?: number | undefined;
                                                            bytes?: Buffer | undefined;
                                                        } | undefined;
                                                        formatString?: {
                                                            format?: any | undefined;
                                                            args?: any[] | undefined;
                                                        } | undefined;
                                                    } | undefined;
                                                    literalValue?: {
                                                        jsonObj?: string | undefined;
                                                        jsonArr?: string | undefined;
                                                        double?: number | undefined;
                                                        bool?: boolean | undefined;
                                                        str?: string | undefined;
                                                        int?: number | undefined;
                                                        bytes?: Buffer | undefined;
                                                    } | undefined;
                                                    nodeOutput?: {
                                                        jsonpath?: string | undefined;
                                                    } | undefined;
                                                }[] | undefined;
                                            } | undefined;
                                            cancel?: {} | undefined;
                                            reassign?: {
                                                userId?: {
                                                    jsonPath?: string | undefined;
                                                    variableName?: string | undefined;
                                                    literalValue?: {
                                                        jsonObj?: string | undefined;
                                                        jsonArr?: string | undefined;
                                                        double?: number | undefined;
                                                        bool?: boolean | undefined;
                                                        str?: string | undefined;
                                                        int?: number | undefined;
                                                        bytes?: Buffer | undefined;
                                                    } | undefined;
                                                    formatString?: {
                                                        format?: any | undefined;
                                                        args?: any[] | undefined;
                                                    } | undefined;
                                                } | undefined;
                                                userGroup?: {
                                                    jsonPath?: string | undefined;
                                                    variableName?: string | undefined;
                                                    literalValue?: {
                                                        jsonObj?: string | undefined;
                                                        jsonArr?: string | undefined;
                                                        double?: number | undefined;
                                                        bool?: boolean | undefined;
                                                        str?: string | undefined;
                                                        int?: number | undefined;
                                                        bytes?: Buffer | undefined;
                                                    } | undefined;
                                                    formatString?: {
                                                        format?: any | undefined;
                                                        args?: any[] | undefined;
                                                    } | undefined;
                                                } | undefined;
                                            } | undefined;
                                            delaySeconds?: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                            hook?: import("./common_wfspec").UTActionTrigger_UTHook | undefined;
                                        }[] | undefined;
                                        userTaskDefVersion?: number | undefined;
                                        notes?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                        onCancellationExceptionName?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    startMultipleThreads?: {
                                        threadSpecName?: string | undefined;
                                        variables?: {
                                            [x: string]: {
                                                jsonPath?: string | undefined;
                                                variableName?: string | undefined;
                                                literalValue?: {
                                                    jsonObj?: string | undefined;
                                                    jsonArr?: string | undefined;
                                                    double?: number | undefined;
                                                    bool?: boolean | undefined;
                                                    str?: string | undefined;
                                                    int?: number | undefined;
                                                    bytes?: Buffer | undefined;
                                                } | undefined;
                                                formatString?: {
                                                    format?: any | undefined;
                                                    args?: any[] | undefined;
                                                } | undefined;
                                            } | undefined;
                                        } | undefined;
                                        iterable?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                    throwEvent?: {
                                        eventDefId?: {
                                            name?: string | undefined;
                                        } | undefined;
                                        content?: {
                                            jsonPath?: string | undefined;
                                            variableName?: string | undefined;
                                            literalValue?: {
                                                jsonObj?: string | undefined;
                                                jsonArr?: string | undefined;
                                                double?: number | undefined;
                                                bool?: boolean | undefined;
                                                str?: string | undefined;
                                                int?: number | undefined;
                                                bytes?: Buffer | undefined;
                                            } | undefined;
                                            formatString?: {
                                                format?: any | undefined;
                                                args?: any[] | undefined;
                                            } | undefined;
                                        } | undefined;
                                    } | undefined;
                                } | undefined;
                            } | undefined;
                            variableDefs?: {
                                varDef?: {
                                    type?: VariableType | undefined;
                                    name?: string | undefined;
                                    defaultValue?: {
                                        jsonObj?: string | undefined;
                                        jsonArr?: string | undefined;
                                        double?: number | undefined;
                                        bool?: boolean | undefined;
                                        str?: string | undefined;
                                        int?: number | undefined;
                                        bytes?: Buffer | undefined;
                                    } | undefined;
                                } | undefined;
                                required?: boolean | undefined;
                                searchable?: boolean | undefined;
                                jsonIndexes?: {
                                    fieldPath?: string | undefined;
                                    fieldType?: VariableType | undefined;
                                }[] | undefined;
                                accessLevel?: import("./wf_spec").WfRunVariableAccessLevel | undefined;
                            }[] | undefined;
                            interruptDefs?: {
                                externalEventDefId?: {
                                    name?: string | undefined;
                                } | undefined;
                                handlerSpecName?: string | undefined;
                            }[] | undefined;
                            retentionPolicy?: {
                                secondsAfterThreadTermination?: number | undefined;
                            } | undefined;
                        } | undefined;
                    } | undefined;
                    entrypointThreadName?: string | undefined;
                    retentionPolicy?: {
                        secondsAfterWfTermination?: number | undefined;
                    } | undefined;
                    migration?: {
                        newMajorVersion?: number | undefined;
                        newRevision?: number | undefined;
                        threadSpecMigrations?: {
                            [x: string]: {
                                newThreadSpecName?: string | undefined;
                                nodeMigrations?: {
                                    [x: string]: {
                                        newNodeName?: string | undefined;
                                    } | undefined;
                                } | undefined;
                            } | undefined;
                        } | undefined;
                    } | undefined;
                    parentWfSpec?: {
                        wfSpecName?: string | undefined;
                        wfSpecMajorVersion?: number | undefined;
                    } | undefined;
                }): WfSpec;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Creates a UserTaskDef. */
        readonly putUserTaskDef: {
            readonly name: "PutUserTaskDef";
            readonly requestType: {
                encode(message: PutUserTaskDefRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): PutUserTaskDefRequest;
                create(base?: DeepPartial<PutUserTaskDefRequest>): PutUserTaskDefRequest;
                fromPartial(object: DeepPartial<PutUserTaskDefRequest>): PutUserTaskDefRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: UserTaskDef, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): UserTaskDef;
                create(base?: {
                    name?: string | undefined;
                    version?: number | undefined;
                    description?: string | undefined;
                    fields?: {
                        name?: string | undefined;
                        type?: VariableType | undefined;
                        description?: string | undefined;
                        displayName?: string | undefined;
                        required?: boolean | undefined;
                    }[] | undefined;
                    createdAt?: string | undefined;
                } | undefined): UserTaskDef;
                fromPartial(object: {
                    name?: string | undefined;
                    version?: number | undefined;
                    description?: string | undefined;
                    fields?: {
                        name?: string | undefined;
                        type?: VariableType | undefined;
                        description?: string | undefined;
                        displayName?: string | undefined;
                        required?: boolean | undefined;
                    }[] | undefined;
                    createdAt?: string | undefined;
                }): UserTaskDef;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Gets a specific UserTaskDef.
         *
         * This RPC is highly useful for applications built around
         * User Tasks. For example, a UI that dynamically displays form fields based on the User Task
         * might first receive a UserTaskRun, then use that UserTaskRun to look up the UserTaskDef.
         * The frontend would inspect the UserTaskDef and display a form field on the browser page
         * for each field in the UserTaskDef.
         */
        readonly getUserTaskDef: {
            readonly name: "GetUserTaskDef";
            readonly requestType: {
                encode(message: UserTaskDefId, writer?: _m0.Writer): _m0.Writer; /**
                 * Since a single WfRun may throw multiple WorkflowEvent's with the same WorkflowEventDefId, it
                 * is necessary to provide a client the ability to "ignore" WorkflowEvent's that have already been
                 * 'awaited'. Any WorkflowEvent specified by this field is ignored by the rpc.
                 */
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): UserTaskDefId;
                create(base?: {
                    name?: string | undefined;
                    version?: number | undefined;
                } | undefined): UserTaskDefId;
                fromPartial(object: {
                    name?: string | undefined;
                    version?: number | undefined;
                }): UserTaskDefId;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: UserTaskDef, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): UserTaskDef;
                create(base?: {
                    name?: string | undefined;
                    version?: number | undefined;
                    description?: string | undefined;
                    fields?: {
                        name?: string | undefined;
                        type?: VariableType | undefined;
                        description?: string | undefined;
                        displayName?: string | undefined;
                        required?: boolean | undefined;
                    }[] | undefined;
                    createdAt?: string | undefined;
                } | undefined): UserTaskDef;
                fromPartial(object: {
                    name?: string | undefined;
                    version?: number | undefined;
                    description?: string | undefined;
                    fields?: {
                        name?: string | undefined;
                        type?: VariableType | undefined;
                        description?: string | undefined;
                        displayName?: string | undefined;
                        required?: boolean | undefined;
                    }[] | undefined;
                    createdAt?: string | undefined;
                }): UserTaskDef;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Returns the most recent UserTaskDef with a specific name. */
        readonly getLatestUserTaskDef: {
            readonly name: "GetLatestUserTaskDef";
            readonly requestType: {
                encode(message: GetLatestUserTaskDefRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GetLatestUserTaskDefRequest;
                create(base?: DeepPartial<GetLatestUserTaskDefRequest>): GetLatestUserTaskDefRequest;
                fromPartial(object: DeepPartial<GetLatestUserTaskDefRequest>): GetLatestUserTaskDefRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: UserTaskDef, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): UserTaskDef;
                create(base?: {
                    name?: string | undefined;
                    version?: number | undefined;
                    description?: string | undefined;
                    fields?: {
                        name?: string | undefined;
                        type?: VariableType | undefined;
                        description?: string | undefined;
                        displayName?: string | undefined;
                        required?: boolean | undefined;
                    }[] | undefined;
                    createdAt?: string | undefined;
                } | undefined): UserTaskDef;
                fromPartial(object: {
                    name?: string | undefined;
                    version?: number | undefined;
                    description?: string | undefined;
                    fields?: {
                        name?: string | undefined;
                        type?: VariableType | undefined;
                        description?: string | undefined;
                        displayName?: string | undefined;
                        required?: boolean | undefined;
                    }[] | undefined;
                    createdAt?: string | undefined;
                }): UserTaskDef;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Runs a WfSpec to create a WfRun. */
        readonly runWf: {
            readonly name: "RunWf";
            readonly requestType: {
                encode(message: RunWfRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): RunWfRequest;
                create(base?: DeepPartial<RunWfRequest>): RunWfRequest;
                fromPartial(object: DeepPartial<RunWfRequest>): RunWfRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: WfRun, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): WfRun;
                create(base?: {
                    id?: {
                        id?: string | undefined;
                        parentWfRunId?: any | undefined;
                    } | undefined;
                    wfSpecId?: {
                        name?: string | undefined;
                        majorVersion?: number | undefined;
                        revision?: number | undefined;
                    } | undefined;
                    oldWfSpecVersions?: {
                        name?: string | undefined;
                        majorVersion?: number | undefined;
                        revision?: number | undefined;
                    }[] | undefined;
                    status?: LHStatus | undefined;
                    greatestThreadrunNumber?: number | undefined;
                    startTime?: string | undefined;
                    endTime?: string | undefined;
                    threadRuns?: {
                        wfSpecId?: {
                            name?: string | undefined;
                            majorVersion?: number | undefined;
                            revision?: number | undefined;
                        } | undefined;
                        number?: number | undefined;
                        status?: LHStatus | undefined;
                        threadSpecName?: string | undefined;
                        startTime?: string | undefined;
                        endTime?: string | undefined;
                        errorMessage?: string | undefined;
                        childThreadIds?: number[] | undefined;
                        parentThreadId?: number | undefined;
                        haltReasons?: {
                            parentHalted?: {
                                parentThreadId?: number | undefined;
                            } | undefined;
                            interrupted?: {
                                interruptThreadId?: number | undefined;
                            } | undefined;
                            pendingInterrupt?: {
                                externalEventId?: {
                                    wfRunId?: {
                                        id?: string | undefined;
                                        parentWfRunId?: any | undefined;
                                    } | undefined;
                                    externalEventDefId?: {
                                        name?: string | undefined;
                                    } | undefined;
                                    guid?: string | undefined;
                                } | undefined;
                            } | undefined;
                            pendingFailure?: {
                                nodeRunPosition?: number | undefined;
                            } | undefined;
                            handlingFailure?: {
                                handlerThreadId?: number | undefined;
                            } | undefined;
                            manualHalt?: {
                                meaningOfLife?: boolean | undefined;
                            } | undefined;
                        }[] | undefined;
                        interruptTriggerId?: {
                            wfRunId?: {
                                id?: string | undefined;
                                parentWfRunId?: any | undefined;
                            } | undefined;
                            externalEventDefId?: {
                                name?: string | undefined;
                            } | undefined;
                            guid?: string | undefined;
                        } | undefined;
                        failureBeingHandled?: {
                            threadRunNumber?: number | undefined;
                            nodeRunPosition?: number | undefined;
                            failureNumber?: number | undefined;
                        } | undefined;
                        currentNodePosition?: number | undefined;
                        handledFailedChildren?: number[] | undefined;
                        type?: import("./wf_run").ThreadType | undefined;
                    }[] | undefined;
                    pendingInterrupts?: {
                        externalEventId?: {
                            wfRunId?: {
                                id?: string | undefined;
                                parentWfRunId?: any | undefined;
                            } | undefined;
                            externalEventDefId?: {
                                name?: string | undefined;
                            } | undefined;
                            guid?: string | undefined;
                        } | undefined;
                        handlerSpecName?: string | undefined;
                        interruptedThreadId?: number | undefined;
                    }[] | undefined;
                    pendingFailures?: {
                        failedThreadRun?: number | undefined;
                        handlerSpecName?: string | undefined;
                    }[] | undefined;
                } | undefined): WfRun;
                fromPartial(object: {
                    id?: {
                        id?: string | undefined;
                        parentWfRunId?: any | undefined;
                    } | undefined;
                    wfSpecId?: {
                        name?: string | undefined;
                        majorVersion?: number | undefined;
                        revision?: number | undefined;
                    } | undefined;
                    oldWfSpecVersions?: {
                        name?: string | undefined;
                        majorVersion?: number | undefined;
                        revision?: number | undefined;
                    }[] | undefined;
                    status?: LHStatus | undefined;
                    greatestThreadrunNumber?: number | undefined;
                    startTime?: string | undefined;
                    endTime?: string | undefined;
                    threadRuns?: {
                        wfSpecId?: {
                            name?: string | undefined;
                            majorVersion?: number | undefined;
                            revision?: number | undefined;
                        } | undefined;
                        number?: number | undefined;
                        status?: LHStatus | undefined;
                        threadSpecName?: string | undefined;
                        startTime?: string | undefined;
                        endTime?: string | undefined;
                        errorMessage?: string | undefined;
                        childThreadIds?: number[] | undefined;
                        parentThreadId?: number | undefined;
                        haltReasons?: {
                            parentHalted?: {
                                parentThreadId?: number | undefined;
                            } | undefined;
                            interrupted?: {
                                interruptThreadId?: number | undefined;
                            } | undefined;
                            pendingInterrupt?: {
                                externalEventId?: {
                                    wfRunId?: {
                                        id?: string | undefined;
                                        parentWfRunId?: any | undefined;
                                    } | undefined;
                                    externalEventDefId?: {
                                        name?: string | undefined;
                                    } | undefined;
                                    guid?: string | undefined;
                                } | undefined;
                            } | undefined;
                            pendingFailure?: {
                                nodeRunPosition?: number | undefined;
                            } | undefined;
                            handlingFailure?: {
                                handlerThreadId?: number | undefined;
                            } | undefined;
                            manualHalt?: {
                                meaningOfLife?: boolean | undefined;
                            } | undefined;
                        }[] | undefined;
                        interruptTriggerId?: {
                            wfRunId?: {
                                id?: string | undefined;
                                parentWfRunId?: any | undefined;
                            } | undefined;
                            externalEventDefId?: {
                                name?: string | undefined;
                            } | undefined;
                            guid?: string | undefined;
                        } | undefined;
                        failureBeingHandled?: {
                            threadRunNumber?: number | undefined;
                            nodeRunPosition?: number | undefined;
                            failureNumber?: number | undefined;
                        } | undefined;
                        currentNodePosition?: number | undefined;
                        handledFailedChildren?: number[] | undefined;
                        type?: import("./wf_run").ThreadType | undefined;
                    }[] | undefined;
                    pendingInterrupts?: {
                        externalEventId?: {
                            wfRunId?: {
                                id?: string | undefined;
                                parentWfRunId?: any | undefined;
                            } | undefined;
                            externalEventDefId?: {
                                name?: string | undefined;
                            } | undefined;
                            guid?: string | undefined;
                        } | undefined;
                        handlerSpecName?: string | undefined;
                        interruptedThreadId?: number | undefined;
                    }[] | undefined;
                    pendingFailures?: {
                        failedThreadRun?: number | undefined;
                        handlerSpecName?: string | undefined;
                    }[] | undefined;
                }): WfRun;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Gets a WfRun. Although useful for development and debugging, this RPC is not often
         * used by applications.
         */
        readonly getWfRun: {
            readonly name: "GetWfRun";
            readonly requestType: {
                encode(message: WfRunId, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): WfRunId;
                create(base?: {
                    id?: string | undefined;
                    parentWfRunId?: any | undefined;
                } | undefined): WfRunId;
                fromPartial(object: {
                    id?: string | undefined;
                    parentWfRunId?: any | undefined;
                }): WfRunId;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: WfRun, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): WfRun;
                create(base?: {
                    id?: {
                        id?: string | undefined;
                        parentWfRunId?: any | undefined;
                    } | undefined;
                    wfSpecId?: {
                        name?: string | undefined;
                        majorVersion?: number | undefined;
                        revision?: number | undefined;
                    } | undefined;
                    oldWfSpecVersions?: {
                        name?: string | undefined;
                        majorVersion?: number | undefined;
                        revision?: number | undefined;
                    }[] | undefined;
                    status?: LHStatus | undefined;
                    greatestThreadrunNumber?: number | undefined;
                    startTime?: string | undefined;
                    endTime?: string | undefined;
                    threadRuns?: {
                        wfSpecId?: {
                            name?: string | undefined;
                            majorVersion?: number | undefined;
                            revision?: number | undefined;
                        } | undefined;
                        number?: number | undefined;
                        status?: LHStatus | undefined;
                        threadSpecName?: string | undefined;
                        startTime?: string | undefined;
                        endTime?: string | undefined;
                        errorMessage?: string | undefined;
                        childThreadIds?: number[] | undefined;
                        parentThreadId?: number | undefined;
                        haltReasons?: {
                            parentHalted?: {
                                parentThreadId?: number | undefined;
                            } | undefined;
                            interrupted?: {
                                interruptThreadId?: number | undefined;
                            } | undefined;
                            pendingInterrupt?: {
                                externalEventId?: {
                                    wfRunId?: {
                                        id?: string | undefined;
                                        parentWfRunId?: any | undefined;
                                    } | undefined;
                                    externalEventDefId?: {
                                        name?: string | undefined;
                                    } | undefined;
                                    guid?: string | undefined;
                                } | undefined;
                            } | undefined;
                            pendingFailure?: {
                                nodeRunPosition?: number | undefined;
                            } | undefined;
                            handlingFailure?: {
                                handlerThreadId?: number | undefined;
                            } | undefined;
                            manualHalt?: {
                                meaningOfLife?: boolean | undefined;
                            } | undefined;
                        }[] | undefined;
                        interruptTriggerId?: {
                            wfRunId?: {
                                id?: string | undefined;
                                parentWfRunId?: any | undefined;
                            } | undefined;
                            externalEventDefId?: {
                                name?: string | undefined;
                            } | undefined;
                            guid?: string | undefined;
                        } | undefined;
                        failureBeingHandled?: {
                            threadRunNumber?: number | undefined;
                            nodeRunPosition?: number | undefined;
                            failureNumber?: number | undefined;
                        } | undefined;
                        currentNodePosition?: number | undefined;
                        handledFailedChildren?: number[] | undefined;
                        type?: import("./wf_run").ThreadType | undefined;
                    }[] | undefined;
                    pendingInterrupts?: {
                        externalEventId?: {
                            wfRunId?: {
                                id?: string | undefined;
                                parentWfRunId?: any | undefined;
                            } | undefined;
                            externalEventDefId?: {
                                name?: string | undefined;
                            } | undefined;
                            guid?: string | undefined;
                        } | undefined;
                        handlerSpecName?: string | undefined;
                        interruptedThreadId?: number | undefined;
                    }[] | undefined;
                    pendingFailures?: {
                        failedThreadRun?: number | undefined;
                        handlerSpecName?: string | undefined;
                    }[] | undefined;
                } | undefined): WfRun;
                fromPartial(object: {
                    id?: {
                        id?: string | undefined;
                        parentWfRunId?: any | undefined;
                    } | undefined;
                    wfSpecId?: {
                        name?: string | undefined;
                        majorVersion?: number | undefined;
                        revision?: number | undefined;
                    } | undefined;
                    oldWfSpecVersions?: {
                        name?: string | undefined;
                        majorVersion?: number | undefined;
                        revision?: number | undefined;
                    }[] | undefined;
                    status?: LHStatus | undefined;
                    greatestThreadrunNumber?: number | undefined;
                    startTime?: string | undefined;
                    endTime?: string | undefined;
                    threadRuns?: {
                        wfSpecId?: {
                            name?: string | undefined;
                            majorVersion?: number | undefined;
                            revision?: number | undefined;
                        } | undefined;
                        number?: number | undefined;
                        status?: LHStatus | undefined;
                        threadSpecName?: string | undefined;
                        startTime?: string | undefined;
                        endTime?: string | undefined;
                        errorMessage?: string | undefined;
                        childThreadIds?: number[] | undefined;
                        parentThreadId?: number | undefined;
                        haltReasons?: {
                            parentHalted?: {
                                parentThreadId?: number | undefined;
                            } | undefined;
                            interrupted?: {
                                interruptThreadId?: number | undefined;
                            } | undefined;
                            pendingInterrupt?: {
                                externalEventId?: {
                                    wfRunId?: {
                                        id?: string | undefined;
                                        parentWfRunId?: any | undefined;
                                    } | undefined;
                                    externalEventDefId?: {
                                        name?: string | undefined;
                                    } | undefined;
                                    guid?: string | undefined;
                                } | undefined;
                            } | undefined;
                            pendingFailure?: {
                                nodeRunPosition?: number | undefined;
                            } | undefined;
                            handlingFailure?: {
                                handlerThreadId?: number | undefined;
                            } | undefined;
                            manualHalt?: {
                                meaningOfLife?: boolean | undefined;
                            } | undefined;
                        }[] | undefined;
                        interruptTriggerId?: {
                            wfRunId?: {
                                id?: string | undefined;
                                parentWfRunId?: any | undefined;
                            } | undefined;
                            externalEventDefId?: {
                                name?: string | undefined;
                            } | undefined;
                            guid?: string | undefined;
                        } | undefined;
                        failureBeingHandled?: {
                            threadRunNumber?: number | undefined;
                            nodeRunPosition?: number | undefined;
                            failureNumber?: number | undefined;
                        } | undefined;
                        currentNodePosition?: number | undefined;
                        handledFailedChildren?: number[] | undefined;
                        type?: import("./wf_run").ThreadType | undefined;
                    }[] | undefined;
                    pendingInterrupts?: {
                        externalEventId?: {
                            wfRunId?: {
                                id?: string | undefined;
                                parentWfRunId?: any | undefined;
                            } | undefined;
                            externalEventDefId?: {
                                name?: string | undefined;
                            } | undefined;
                            guid?: string | undefined;
                        } | undefined;
                        handlerSpecName?: string | undefined;
                        interruptedThreadId?: number | undefined;
                    }[] | undefined;
                    pendingFailures?: {
                        failedThreadRun?: number | undefined;
                        handlerSpecName?: string | undefined;
                    }[] | undefined;
                }): WfRun;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Loads a specific UserTaskRun. It includes information about to whom the UserTask is
         * currently assigned, history of assignments and reassignments, and any context for that
         * UserTaskRun which is specific to the WfRun.
         */
        readonly getUserTaskRun: {
            readonly name: "GetUserTaskRun";
            readonly requestType: {
                encode(message: UserTaskRunId, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): UserTaskRunId;
                create(base?: {
                    wfRunId?: {
                        id?: string | undefined;
                        parentWfRunId?: any | undefined;
                    } | undefined;
                    userTaskGuid?: string | undefined;
                } | undefined): UserTaskRunId;
                fromPartial(object: {
                    wfRunId?: {
                        id?: string | undefined;
                        parentWfRunId?: any | undefined;
                    } | undefined;
                    userTaskGuid?: string | undefined;
                }): UserTaskRunId;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: UserTaskRun, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): UserTaskRun;
                create(base?: {
                    id?: {
                        wfRunId?: {
                            id?: string | undefined;
                            parentWfRunId?: any | undefined;
                        } | undefined;
                        userTaskGuid?: string | undefined;
                    } | undefined;
                    userTaskDefId?: {
                        name?: string | undefined;
                        version?: number | undefined;
                    } | undefined;
                    userGroup?: string | undefined;
                    userId?: string | undefined;
                    results?: {
                        [x: string]: {
                            jsonObj?: string | undefined;
                            jsonArr?: string | undefined;
                            double?: number | undefined;
                            bool?: boolean | undefined;
                            str?: string | undefined;
                            int?: number | undefined;
                            bytes?: Buffer | undefined;
                        } | undefined;
                    } | undefined;
                    status?: UserTaskRunStatus | undefined;
                    events?: {
                        time?: string | undefined;
                        taskExecuted?: {
                            taskRun?: {
                                wfRunId?: {
                                    id?: string | undefined;
                                    parentWfRunId?: any | undefined;
                                } | undefined;
                                taskGuid?: string | undefined;
                            } | undefined;
                        } | undefined;
                        assigned?: {
                            oldUserId?: string | undefined;
                            oldUserGroup?: string | undefined;
                            newUserId?: string | undefined;
                            newUserGroup?: string | undefined;
                        } | undefined;
                        cancelled?: {
                            message?: string | undefined;
                        } | undefined;
                    }[] | undefined;
                    notes?: string | undefined;
                    scheduledTime?: string | undefined;
                    nodeRunId?: {
                        wfRunId?: {
                            id?: string | undefined;
                            parentWfRunId?: any | undefined;
                        } | undefined;
                        threadRunNumber?: number | undefined;
                        position?: number | undefined;
                    } | undefined;
                    epoch?: number | undefined;
                } | undefined): UserTaskRun;
                fromPartial(object: {
                    id?: {
                        wfRunId?: {
                            id?: string | undefined;
                            parentWfRunId?: any | undefined;
                        } | undefined;
                        userTaskGuid?: string | undefined;
                    } | undefined;
                    userTaskDefId?: {
                        name?: string | undefined;
                        version?: number | undefined;
                    } | undefined;
                    userGroup?: string | undefined;
                    userId?: string | undefined;
                    results?: {
                        [x: string]: {
                            jsonObj?: string | undefined;
                            jsonArr?: string | undefined;
                            double?: number | undefined;
                            bool?: boolean | undefined;
                            str?: string | undefined;
                            int?: number | undefined;
                            bytes?: Buffer | undefined;
                        } | undefined;
                    } | undefined;
                    status?: UserTaskRunStatus | undefined;
                    events?: {
                        time?: string | undefined;
                        taskExecuted?: {
                            taskRun?: {
                                wfRunId?: {
                                    id?: string | undefined;
                                    parentWfRunId?: any | undefined;
                                } | undefined;
                                taskGuid?: string | undefined;
                            } | undefined;
                        } | undefined;
                        assigned?: {
                            oldUserId?: string | undefined;
                            oldUserGroup?: string | undefined;
                            newUserId?: string | undefined;
                            newUserGroup?: string | undefined;
                        } | undefined;
                        cancelled?: {
                            message?: string | undefined;
                        } | undefined;
                    }[] | undefined;
                    notes?: string | undefined;
                    scheduledTime?: string | undefined;
                    nodeRunId?: {
                        wfRunId?: {
                            id?: string | undefined;
                            parentWfRunId?: any | undefined;
                        } | undefined;
                        threadRunNumber?: number | undefined;
                        position?: number | undefined;
                    } | undefined;
                    epoch?: number | undefined;
                }): UserTaskRun;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Change the ownership of a UserTaskRun to a new userId, userGroup, or both. The
         * action will be reflected in your next call to SearchUserTaskRun. This RPC is useful for
         * applications that are using User Tasks to build an internal task-list and wish to
         * administer the tasks.
         */
        readonly assignUserTaskRun: {
            readonly name: "AssignUserTaskRun";
            readonly requestType: {
                encode(message: AssignUserTaskRunRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): AssignUserTaskRunRequest;
                create(base?: {
                    userTaskRunId?: {
                        wfRunId?: {
                            id?: string | undefined;
                            parentWfRunId?: any | undefined;
                        } | undefined;
                        userTaskGuid?: string | undefined;
                    } | undefined;
                    overrideClaim?: boolean | undefined;
                    userGroup?: string | undefined;
                    userId?: string | undefined;
                } | undefined): AssignUserTaskRunRequest;
                fromPartial(object: {
                    userTaskRunId?: {
                        wfRunId?: {
                            id?: string | undefined;
                            parentWfRunId?: any | undefined;
                        } | undefined;
                        userTaskGuid?: string | undefined;
                    } | undefined;
                    overrideClaim?: boolean | undefined;
                    userGroup?: string | undefined;
                    userId?: string | undefined;
                }): AssignUserTaskRunRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): Empty;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Completes a UserTaskRun. Includes the results of the UserTaskRun, the UserTaskRun Id, and
         * the userId of the user who completes the UserTaskRun. Results in the UserTask NodeRun being
         * completed, and unblocks the associated ThreadRun in the WfRun.
         *
         * This RPC is highly useful for applications built around a WfSpec that uses USER_TASK nodes.
         */
        readonly completeUserTaskRun: {
            readonly name: "CompleteUserTaskRun";
            readonly requestType: {
                encode(message: CompleteUserTaskRunRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): CompleteUserTaskRunRequest;
                create(base?: {
                    userTaskRunId?: {
                        wfRunId?: {
                            id?: string | undefined;
                            parentWfRunId?: any | undefined;
                        } | undefined;
                        userTaskGuid?: string | undefined;
                    } | undefined;
                    results?: {
                        [x: string]: {
                            jsonObj?: string | undefined;
                            jsonArr?: string | undefined;
                            double?: number | undefined;
                            bool?: boolean | undefined;
                            str?: string | undefined;
                            int?: number | undefined;
                            bytes?: Buffer | undefined;
                        } | undefined;
                    } | undefined;
                    userId?: string | undefined;
                } | undefined): CompleteUserTaskRunRequest;
                fromPartial(object: {
                    userTaskRunId?: {
                        wfRunId?: {
                            id?: string | undefined;
                            parentWfRunId?: any | undefined;
                        } | undefined;
                        userTaskGuid?: string | undefined;
                    } | undefined;
                    results?: {
                        [x: string]: {
                            jsonObj?: string | undefined;
                            jsonArr?: string | undefined;
                            double?: number | undefined;
                            bool?: boolean | undefined;
                            str?: string | undefined;
                            int?: number | undefined;
                            bytes?: Buffer | undefined;
                        } | undefined;
                    } | undefined;
                    userId?: string | undefined;
                }): CompleteUserTaskRunRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): Empty;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Cancels a UserTaskRun. This will result in an EXCEPTION being propagated to the WfRun. */
        readonly cancelUserTaskRun: {
            readonly name: "CancelUserTaskRun";
            readonly requestType: {
                encode(message: CancelUserTaskRunRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): CancelUserTaskRunRequest;
                create(base?: {
                    userTaskRunId?: {
                        wfRunId?: {
                            id?: string | undefined;
                            parentWfRunId?: any | undefined;
                        } | undefined;
                        userTaskGuid?: string | undefined;
                    } | undefined;
                } | undefined): CancelUserTaskRunRequest;
                fromPartial(object: {
                    userTaskRunId?: {
                        wfRunId?: {
                            id?: string | undefined;
                            parentWfRunId?: any | undefined;
                        } | undefined;
                        userTaskGuid?: string | undefined;
                    } | undefined;
                }): CancelUserTaskRunRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): Empty;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Lists all UserTaskRun's for a specific WfRun. Can be useful when using a WfRun
         * to model an entity.
         */
        readonly listUserTaskRuns: {
            readonly name: "ListUserTaskRuns";
            readonly requestType: {
                encode(message: ListUserTaskRunRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ListUserTaskRunRequest;
                create(base?: DeepPartial<ListUserTaskRunRequest>): ListUserTaskRunRequest;
                fromPartial(object: DeepPartial<ListUserTaskRunRequest>): ListUserTaskRunRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: UserTaskRunList, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): UserTaskRunList;
                create(base?: DeepPartial<UserTaskRunList>): UserTaskRunList;
                fromPartial(object: DeepPartial<UserTaskRunList>): UserTaskRunList;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Gets a specific NodeRun. */
        readonly getNodeRun: {
            readonly name: "GetNodeRun";
            readonly requestType: {
                encode(message: NodeRunId, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): NodeRunId;
                create(base?: {
                    wfRunId?: {
                        id?: string | undefined;
                        parentWfRunId?: any | undefined;
                    } | undefined;
                    threadRunNumber?: number | undefined;
                    position?: number | undefined;
                } | undefined): NodeRunId;
                fromPartial(object: {
                    wfRunId?: {
                        id?: string | undefined;
                        parentWfRunId?: any | undefined;
                    } | undefined;
                    threadRunNumber?: number | undefined;
                    position?: number | undefined;
                }): NodeRunId;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: NodeRun, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): NodeRun;
                create(base?: {
                    id?: {
                        wfRunId?: {
                            id?: string | undefined;
                            parentWfRunId?: any | undefined;
                        } | undefined;
                        threadRunNumber?: number | undefined;
                        position?: number | undefined;
                    } | undefined;
                    wfSpecId?: {
                        name?: string | undefined;
                        majorVersion?: number | undefined;
                        revision?: number | undefined;
                    } | undefined;
                    failureHandlerIds?: number[] | undefined;
                    status?: LHStatus | undefined;
                    arrivalTime?: string | undefined;
                    endTime?: string | undefined;
                    threadSpecName?: string | undefined;
                    nodeName?: string | undefined;
                    errorMessage?: string | undefined;
                    failures?: {
                        failureName?: string | undefined;
                        message?: string | undefined;
                        content?: {
                            jsonObj?: string | undefined;
                            jsonArr?: string | undefined;
                            double?: number | undefined;
                            bool?: boolean | undefined;
                            str?: string | undefined;
                            int?: number | undefined;
                            bytes?: Buffer | undefined;
                        } | undefined;
                        wasProperlyHandled?: boolean | undefined;
                        failureHandlerThreadrunId?: number | undefined;
                    }[] | undefined;
                    task?: {
                        taskRunId?: {
                            wfRunId?: {
                                id?: string | undefined;
                                parentWfRunId?: any | undefined;
                            } | undefined;
                            taskGuid?: string | undefined;
                        } | undefined;
                    } | undefined;
                    externalEvent?: {
                        externalEventDefId?: {
                            name?: string | undefined;
                        } | undefined;
                        eventTime?: string | undefined;
                        externalEventId?: {
                            wfRunId?: {
                                id?: string | undefined;
                                parentWfRunId?: any | undefined;
                            } | undefined;
                            externalEventDefId?: {
                                name?: string | undefined;
                            } | undefined;
                            guid?: string | undefined;
                        } | undefined;
                        timedOut?: boolean | undefined;
                    } | undefined;
                    entrypoint?: {} | undefined;
                    exit?: {} | undefined;
                    startThread?: {
                        childThreadId?: number | undefined;
                        threadSpecName?: string | undefined;
                    } | undefined;
                    waitThreads?: {
                        threads?: {
                            threadEndTime?: string | undefined;
                            threadStatus?: LHStatus | undefined;
                            threadRunNumber?: number | undefined;
                            waitingStatus?: import("./node_run").WaitForThreadsRun_WaitingThreadStatus | undefined;
                            failureHandlerThreadRunId?: number | undefined;
                        }[] | undefined;
                    } | undefined;
                    sleep?: {
                        maturationTime?: string | undefined;
                        matured?: boolean | undefined;
                    } | undefined;
                    userTask?: {
                        userTaskRunId?: {
                            wfRunId?: {
                                id?: string | undefined;
                                parentWfRunId?: any | undefined;
                            } | undefined;
                            userTaskGuid?: string | undefined;
                        } | undefined;
                    } | undefined;
                    startMultipleThreads?: {
                        threadSpecName?: string | undefined;
                        childThreadIds?: number[] | undefined;
                    } | undefined;
                    throwEvent?: {
                        workflowEventId?: {
                            wfRunId?: {
                                id?: string | undefined;
                                parentWfRunId?: any | undefined;
                            } | undefined;
                            workflowEventDefId?: {
                                name?: string | undefined;
                            } | undefined;
                            number?: number | undefined;
                        } | undefined;
                    } | undefined;
                } | undefined): NodeRun;
                fromPartial(object: {
                    id?: {
                        wfRunId?: {
                            id?: string | undefined;
                            parentWfRunId?: any | undefined;
                        } | undefined;
                        threadRunNumber?: number | undefined;
                        position?: number | undefined;
                    } | undefined;
                    wfSpecId?: {
                        name?: string | undefined;
                        majorVersion?: number | undefined;
                        revision?: number | undefined;
                    } | undefined;
                    failureHandlerIds?: number[] | undefined;
                    status?: LHStatus | undefined;
                    arrivalTime?: string | undefined;
                    endTime?: string | undefined;
                    threadSpecName?: string | undefined;
                    nodeName?: string | undefined;
                    errorMessage?: string | undefined;
                    failures?: {
                        failureName?: string | undefined;
                        message?: string | undefined;
                        content?: {
                            jsonObj?: string | undefined;
                            jsonArr?: string | undefined;
                            double?: number | undefined;
                            bool?: boolean | undefined;
                            str?: string | undefined;
                            int?: number | undefined;
                            bytes?: Buffer | undefined;
                        } | undefined;
                        wasProperlyHandled?: boolean | undefined;
                        failureHandlerThreadrunId?: number | undefined;
                    }[] | undefined;
                    task?: {
                        taskRunId?: {
                            wfRunId?: {
                                id?: string | undefined;
                                parentWfRunId?: any | undefined;
                            } | undefined;
                            taskGuid?: string | undefined;
                        } | undefined;
                    } | undefined;
                    externalEvent?: {
                        externalEventDefId?: {
                            name?: string | undefined;
                        } | undefined;
                        eventTime?: string | undefined;
                        externalEventId?: {
                            wfRunId?: {
                                id?: string | undefined;
                                parentWfRunId?: any | undefined;
                            } | undefined;
                            externalEventDefId?: {
                                name?: string | undefined;
                            } | undefined;
                            guid?: string | undefined;
                        } | undefined;
                        timedOut?: boolean | undefined;
                    } | undefined;
                    entrypoint?: {} | undefined;
                    exit?: {} | undefined;
                    startThread?: {
                        childThreadId?: number | undefined;
                        threadSpecName?: string | undefined;
                    } | undefined;
                    waitThreads?: {
                        threads?: {
                            threadEndTime?: string | undefined;
                            threadStatus?: LHStatus | undefined;
                            threadRunNumber?: number | undefined;
                            waitingStatus?: import("./node_run").WaitForThreadsRun_WaitingThreadStatus | undefined;
                            failureHandlerThreadRunId?: number | undefined;
                        }[] | undefined;
                    } | undefined;
                    sleep?: {
                        maturationTime?: string | undefined;
                        matured?: boolean | undefined;
                    } | undefined;
                    userTask?: {
                        userTaskRunId?: {
                            wfRunId?: {
                                id?: string | undefined;
                                parentWfRunId?: any | undefined;
                            } | undefined;
                            userTaskGuid?: string | undefined;
                        } | undefined;
                    } | undefined;
                    startMultipleThreads?: {
                        threadSpecName?: string | undefined;
                        childThreadIds?: number[] | undefined;
                    } | undefined;
                    throwEvent?: {
                        workflowEventId?: {
                            wfRunId?: {
                                id?: string | undefined;
                                parentWfRunId?: any | undefined;
                            } | undefined;
                            workflowEventDefId?: {
                                name?: string | undefined;
                            } | undefined;
                            number?: number | undefined;
                        } | undefined;
                    } | undefined;
                }): NodeRun;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Lists all NodeRun's for a specific WfRun. */
        readonly listNodeRuns: {
            readonly name: "ListNodeRuns";
            readonly requestType: {
                encode(message: ListNodeRunsRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ListNodeRunsRequest;
                create(base?: DeepPartial<ListNodeRunsRequest>): ListNodeRunsRequest;
                fromPartial(object: DeepPartial<ListNodeRunsRequest>): ListNodeRunsRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: NodeRunList, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): NodeRunList;
                create(base?: DeepPartial<NodeRunList>): NodeRunList;
                fromPartial(object: DeepPartial<NodeRunList>): NodeRunList;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Gets a specific TaskRun. */
        readonly getTaskRun: {
            readonly name: "GetTaskRun";
            readonly requestType: {
                encode(message: TaskRunId, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): TaskRunId;
                create(base?: {
                    wfRunId?: {
                        id?: string | undefined;
                        parentWfRunId?: any | undefined;
                    } | undefined;
                    taskGuid?: string | undefined;
                } | undefined): TaskRunId;
                fromPartial(object: {
                    wfRunId?: {
                        id?: string | undefined;
                        parentWfRunId?: any | undefined;
                    } | undefined;
                    taskGuid?: string | undefined;
                }): TaskRunId;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: TaskRun, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): TaskRun;
                create(base?: {
                    id?: {
                        wfRunId?: {
                            id?: string | undefined;
                            parentWfRunId?: any | undefined;
                        } | undefined;
                        taskGuid?: string | undefined;
                    } | undefined;
                    taskDefId?: {
                        name?: string | undefined;
                    } | undefined;
                    attempts?: {
                        logOutput?: {
                            jsonObj?: string | undefined;
                            jsonArr?: string | undefined;
                            double?: number | undefined;
                            bool?: boolean | undefined;
                            str?: string | undefined;
                            int?: number | undefined;
                            bytes?: Buffer | undefined;
                        } | undefined;
                        scheduleTime?: string | undefined;
                        startTime?: string | undefined;
                        endTime?: string | undefined;
                        taskWorkerId?: string | undefined;
                        taskWorkerVersion?: string | undefined;
                        status?: TaskStatus | undefined;
                        output?: {
                            jsonObj?: string | undefined;
                            jsonArr?: string | undefined;
                            double?: number | undefined;
                            bool?: boolean | undefined;
                            str?: string | undefined;
                            int?: number | undefined;
                            bytes?: Buffer | undefined;
                        } | undefined;
                        error?: {
                            type?: import("./common_enums").LHErrorType | undefined;
                            message?: string | undefined;
                        } | undefined;
                        exception?: {
                            name?: string | undefined;
                            message?: string | undefined;
                            content?: {
                                jsonObj?: string | undefined;
                                jsonArr?: string | undefined;
                                double?: number | undefined;
                                bool?: boolean | undefined;
                                str?: string | undefined;
                                int?: number | undefined;
                                bytes?: Buffer | undefined;
                            } | undefined;
                        } | undefined;
                    }[] | undefined;
                    inputVariables?: {
                        varName?: string | undefined;
                        value?: {
                            jsonObj?: string | undefined;
                            jsonArr?: string | undefined;
                            double?: number | undefined;
                            bool?: boolean | undefined;
                            str?: string | undefined;
                            int?: number | undefined;
                            bytes?: Buffer | undefined;
                        } | undefined;
                    }[] | undefined;
                    source?: {
                        taskNode?: {
                            nodeRunId?: {
                                wfRunId?: {
                                    id?: string | undefined;
                                    parentWfRunId?: any | undefined;
                                } | undefined;
                                threadRunNumber?: number | undefined;
                                position?: number | undefined;
                            } | undefined;
                        } | undefined;
                        userTaskTrigger?: {
                            nodeRunId?: {
                                wfRunId?: {
                                    id?: string | undefined;
                                    parentWfRunId?: any | undefined;
                                } | undefined;
                                threadRunNumber?: number | undefined;
                                position?: number | undefined;
                            } | undefined;
                            userTaskEventNumber?: number | undefined;
                            userId?: string | undefined;
                            userGroup?: string | undefined;
                        } | undefined;
                        wfSpecId?: {
                            name?: string | undefined;
                            majorVersion?: number | undefined;
                            revision?: number | undefined;
                        } | undefined;
                    } | undefined;
                    scheduledAt?: string | undefined;
                    status?: TaskStatus | undefined;
                    timeoutSeconds?: number | undefined;
                    totalAttempts?: number | undefined;
                    exponentialBackoff?: {
                        baseIntervalMs?: number | undefined;
                        maxDelayMs?: number | undefined;
                        multiplier?: number | undefined;
                    } | undefined;
                } | undefined): TaskRun;
                fromPartial(object: {
                    id?: {
                        wfRunId?: {
                            id?: string | undefined;
                            parentWfRunId?: any | undefined;
                        } | undefined;
                        taskGuid?: string | undefined;
                    } | undefined;
                    taskDefId?: {
                        name?: string | undefined;
                    } | undefined;
                    attempts?: {
                        logOutput?: {
                            jsonObj?: string | undefined;
                            jsonArr?: string | undefined;
                            double?: number | undefined;
                            bool?: boolean | undefined;
                            str?: string | undefined;
                            int?: number | undefined;
                            bytes?: Buffer | undefined;
                        } | undefined;
                        scheduleTime?: string | undefined;
                        startTime?: string | undefined;
                        endTime?: string | undefined;
                        taskWorkerId?: string | undefined;
                        taskWorkerVersion?: string | undefined;
                        status?: TaskStatus | undefined;
                        output?: {
                            jsonObj?: string | undefined;
                            jsonArr?: string | undefined;
                            double?: number | undefined;
                            bool?: boolean | undefined;
                            str?: string | undefined;
                            int?: number | undefined;
                            bytes?: Buffer | undefined;
                        } | undefined;
                        error?: {
                            type?: import("./common_enums").LHErrorType | undefined;
                            message?: string | undefined;
                        } | undefined;
                        exception?: {
                            name?: string | undefined;
                            message?: string | undefined;
                            content?: {
                                jsonObj?: string | undefined;
                                jsonArr?: string | undefined;
                                double?: number | undefined;
                                bool?: boolean | undefined;
                                str?: string | undefined;
                                int?: number | undefined;
                                bytes?: Buffer | undefined;
                            } | undefined;
                        } | undefined;
                    }[] | undefined;
                    inputVariables?: {
                        varName?: string | undefined;
                        value?: {
                            jsonObj?: string | undefined;
                            jsonArr?: string | undefined;
                            double?: number | undefined;
                            bool?: boolean | undefined;
                            str?: string | undefined;
                            int?: number | undefined;
                            bytes?: Buffer | undefined;
                        } | undefined;
                    }[] | undefined;
                    source?: {
                        taskNode?: {
                            nodeRunId?: {
                                wfRunId?: {
                                    id?: string | undefined;
                                    parentWfRunId?: any | undefined;
                                } | undefined;
                                threadRunNumber?: number | undefined;
                                position?: number | undefined;
                            } | undefined;
                        } | undefined;
                        userTaskTrigger?: {
                            nodeRunId?: {
                                wfRunId?: {
                                    id?: string | undefined;
                                    parentWfRunId?: any | undefined;
                                } | undefined;
                                threadRunNumber?: number | undefined;
                                position?: number | undefined;
                            } | undefined;
                            userTaskEventNumber?: number | undefined;
                            userId?: string | undefined;
                            userGroup?: string | undefined;
                        } | undefined;
                        wfSpecId?: {
                            name?: string | undefined;
                            majorVersion?: number | undefined;
                            revision?: number | undefined;
                        } | undefined;
                    } | undefined;
                    scheduledAt?: string | undefined;
                    status?: TaskStatus | undefined;
                    timeoutSeconds?: number | undefined;
                    totalAttempts?: number | undefined;
                    exponentialBackoff?: {
                        baseIntervalMs?: number | undefined;
                        maxDelayMs?: number | undefined;
                        multiplier?: number | undefined;
                    } | undefined;
                }): TaskRun;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Lists all TaskRun's for a specific WfRun. */
        readonly listTaskRuns: {
            readonly name: "ListTaskRuns";
            readonly requestType: {
                encode(message: ListTaskRunsRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ListTaskRunsRequest;
                create(base?: DeepPartial<ListTaskRunsRequest>): ListTaskRunsRequest;
                fromPartial(object: DeepPartial<ListTaskRunsRequest>): ListTaskRunsRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: TaskRunList, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): TaskRunList;
                create(base?: DeepPartial<TaskRunList>): TaskRunList;
                fromPartial(object: DeepPartial<TaskRunList>): TaskRunList;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Get the value of a specific Variable. When using a WfRun to model an entity, this
         * RPC is useful for retrieving information. It is equivalent to looking up the value of a
         * column for a specific row in a SQL table.
         */
        readonly getVariable: {
            readonly name: "GetVariable";
            readonly requestType: {
                encode(message: VariableId, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): VariableId;
                create(base?: {
                    wfRunId?: {
                        id?: string | undefined;
                        parentWfRunId?: any | undefined;
                    } | undefined;
                    threadRunNumber?: number | undefined;
                    name?: string | undefined;
                } | undefined): VariableId;
                fromPartial(object: {
                    wfRunId?: {
                        id?: string | undefined;
                        parentWfRunId?: any | undefined;
                    } | undefined;
                    threadRunNumber?: number | undefined;
                    name?: string | undefined;
                }): VariableId;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: Variable, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): Variable;
                create(base?: {
                    id?: {
                        wfRunId?: {
                            id?: string | undefined;
                            parentWfRunId?: any | undefined;
                        } | undefined;
                        threadRunNumber?: number | undefined;
                        name?: string | undefined;
                    } | undefined;
                    value?: {
                        jsonObj?: string | undefined;
                        jsonArr?: string | undefined;
                        double?: number | undefined;
                        bool?: boolean | undefined;
                        str?: string | undefined;
                        int?: number | undefined;
                        bytes?: Buffer | undefined;
                    } | undefined;
                    createdAt?: string | undefined;
                    wfSpecId?: {
                        name?: string | undefined;
                        majorVersion?: number | undefined;
                        revision?: number | undefined;
                    } | undefined;
                } | undefined): Variable;
                fromPartial(object: {
                    id?: {
                        wfRunId?: {
                            id?: string | undefined;
                            parentWfRunId?: any | undefined;
                        } | undefined;
                        threadRunNumber?: number | undefined;
                        name?: string | undefined;
                    } | undefined;
                    value?: {
                        jsonObj?: string | undefined;
                        jsonArr?: string | undefined;
                        double?: number | undefined;
                        bool?: boolean | undefined;
                        str?: string | undefined;
                        int?: number | undefined;
                        bytes?: Buffer | undefined;
                    } | undefined;
                    createdAt?: string | undefined;
                    wfSpecId?: {
                        name?: string | undefined;
                        majorVersion?: number | undefined;
                        revision?: number | undefined;
                    } | undefined;
                }): Variable;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** List all Variables from a WfRun. */
        readonly listVariables: {
            readonly name: "ListVariables";
            readonly requestType: {
                encode(message: ListVariablesRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ListVariablesRequest;
                create(base?: DeepPartial<ListVariablesRequest>): ListVariablesRequest;
                fromPartial(object: DeepPartial<ListVariablesRequest>): ListVariablesRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: VariableList, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): VariableList;
                create(base?: DeepPartial<VariableList>): VariableList;
                fromPartial(object: DeepPartial<VariableList>): VariableList;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Post an ExternalEvent. This RPC is highly useful for */
        readonly putExternalEvent: {
            readonly name: "PutExternalEvent";
            readonly requestType: {
                encode(message: PutExternalEventRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): PutExternalEventRequest;
                create(base?: DeepPartial<PutExternalEventRequest>): PutExternalEventRequest;
                fromPartial(object: DeepPartial<PutExternalEventRequest>): PutExternalEventRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: ExternalEvent, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): ExternalEvent;
                create(base?: {
                    id?: {
                        wfRunId?: {
                            id?: string | undefined;
                            parentWfRunId?: any | undefined;
                        } | undefined;
                        externalEventDefId?: {
                            name?: string | undefined;
                        } | undefined;
                        guid?: string | undefined;
                    } | undefined;
                    createdAt?: string | undefined;
                    content?: {
                        jsonObj?: string | undefined;
                        jsonArr?: string | undefined;
                        double?: number | undefined;
                        bool?: boolean | undefined;
                        str?: string | undefined;
                        int?: number | undefined;
                        bytes?: Buffer | undefined;
                    } | undefined;
                    threadRunNumber?: number | undefined;
                    nodeRunPosition?: number | undefined;
                    claimed?: boolean | undefined;
                } | undefined): ExternalEvent; /** Field to create an ExternalEventDef. */
                fromPartial(object: {
                    id?: {
                        wfRunId?: {
                            id?: string | undefined;
                            parentWfRunId?: any | undefined;
                        } | undefined;
                        externalEventDefId?: {
                            name?: string | undefined;
                        } | undefined;
                        guid?: string | undefined;
                    } | undefined;
                    createdAt?: string | undefined;
                    content?: {
                        jsonObj?: string | undefined;
                        jsonArr?: string | undefined;
                        double?: number | undefined;
                        bool?: boolean | undefined;
                        str?: string | undefined;
                        int?: number | undefined;
                        bytes?: Buffer | undefined;
                    } | undefined;
                    threadRunNumber?: number | undefined;
                    nodeRunPosition?: number | undefined;
                    claimed?: boolean | undefined;
                }): ExternalEvent;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Get a specific ExternalEvent. */
        readonly getExternalEvent: {
            readonly name: "GetExternalEvent";
            readonly requestType: {
                encode(message: ExternalEventId, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): ExternalEventId;
                create(base?: {
                    wfRunId?: {
                        id?: string | undefined;
                        parentWfRunId?: any | undefined;
                    } | undefined;
                    externalEventDefId?: {
                        name?: string | undefined;
                    } | undefined;
                    guid?: string | undefined;
                } | undefined): ExternalEventId;
                fromPartial(object: {
                    wfRunId?: {
                        id?: string | undefined;
                        parentWfRunId?: any | undefined;
                    } | undefined;
                    externalEventDefId?: {
                        name?: string | undefined;
                    } | undefined;
                    guid?: string | undefined;
                }): ExternalEventId;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: ExternalEvent, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): ExternalEvent;
                create(base?: {
                    id?: {
                        wfRunId?: {
                            id?: string | undefined;
                            parentWfRunId?: any | undefined;
                        } | undefined;
                        externalEventDefId?: {
                            name?: string | undefined;
                        } | undefined;
                        guid?: string | undefined;
                    } | undefined;
                    createdAt?: string | undefined;
                    content?: {
                        jsonObj?: string | undefined;
                        jsonArr?: string | undefined;
                        double?: number | undefined;
                        bool?: boolean | undefined;
                        str?: string | undefined;
                        int?: number | undefined;
                        bytes?: Buffer | undefined;
                    } | undefined;
                    threadRunNumber?: number | undefined;
                    nodeRunPosition?: number | undefined;
                    claimed?: boolean | undefined;
                } | undefined): ExternalEvent; /** Field to create an ExternalEventDef. */
                fromPartial(object: {
                    id?: {
                        wfRunId?: {
                            id?: string | undefined;
                            parentWfRunId?: any | undefined;
                        } | undefined;
                        externalEventDefId?: {
                            name?: string | undefined;
                        } | undefined;
                        guid?: string | undefined;
                    } | undefined;
                    createdAt?: string | undefined;
                    content?: {
                        jsonObj?: string | undefined;
                        jsonArr?: string | undefined;
                        double?: number | undefined;
                        bool?: boolean | undefined;
                        str?: string | undefined;
                        int?: number | undefined;
                        bytes?: Buffer | undefined;
                    } | undefined;
                    threadRunNumber?: number | undefined;
                    nodeRunPosition?: number | undefined;
                    claimed?: boolean | undefined;
                }): ExternalEvent;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Waits for a WorkflowEvent to be thrown by a given WfRun. Returns immediately if a matching
         * WorkflowEvent has already been thrown; throws a DEADLINE_EXCEEDED error if the WorkflowEvent
         * is not thrown before the deadline specified by the client.
         *
         * To specify the deadline, the client should use GRPC deadlines.
         */
        readonly awaitWorkflowEvent: {
            readonly name: "AwaitWorkflowEvent";
            readonly requestType: {
                encode(message: AwaitWorkflowEventRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AwaitWorkflowEventRequest;
                create(base?: DeepPartial<AwaitWorkflowEventRequest>): AwaitWorkflowEventRequest;
                fromPartial(object: DeepPartial<AwaitWorkflowEventRequest>): AwaitWorkflowEventRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: WorkflowEvent, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): WorkflowEvent;
                create(base?: {
                    id?: {
                        wfRunId?: {
                            id?: string | undefined;
                            parentWfRunId?: any | undefined;
                        } | undefined;
                        workflowEventDefId?: {
                            name?: string | undefined;
                        } | undefined;
                        number?: number | undefined;
                    } | undefined;
                    content?: {
                        jsonObj?: string | undefined;
                        jsonArr?: string | undefined;
                        double?: number | undefined;
                        bool?: boolean | undefined;
                        str?: string | undefined;
                        int?: number | undefined;
                        bytes?: Buffer | undefined;
                    } | undefined;
                    createdAt?: string | undefined;
                } | undefined): WorkflowEvent;
                fromPartial(object: {
                    id?: {
                        wfRunId?: {
                            id?: string | undefined;
                            parentWfRunId?: any | undefined;
                        } | undefined;
                        workflowEventDefId?: {
                            name?: string | undefined;
                        } | undefined;
                        number?: number | undefined;
                    } | undefined;
                    content?: {
                        jsonObj?: string | undefined;
                        jsonArr?: string | undefined;
                        double?: number | undefined;
                        bool?: boolean | undefined;
                        str?: string | undefined;
                        int?: number | undefined;
                        bytes?: Buffer | undefined;
                    } | undefined;
                    createdAt?: string | undefined;
                }): WorkflowEvent;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** List ExternalEvent's for a specific WfRun. */
        readonly listExternalEvents: {
            readonly name: "ListExternalEvents";
            readonly requestType: {
                encode(message: ListExternalEventsRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ListExternalEventsRequest;
                create(base?: DeepPartial<ListExternalEventsRequest>): ListExternalEventsRequest;
                fromPartial(object: DeepPartial<ListExternalEventsRequest>): ListExternalEventsRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: ExternalEventList, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ExternalEventList;
                create(base?: DeepPartial<ExternalEventList>): ExternalEventList;
                fromPartial(object: DeepPartial<ExternalEventList>): ExternalEventList;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Search for WfRun's. This RPC is highly useful for applications that store data
         * in LittleHorse and need to find a specific WfRun based on certain indexed fields.
         */
        readonly searchWfRun: {
            readonly name: "SearchWfRun";
            readonly requestType: {
                encode(message: SearchWfRunRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): SearchWfRunRequest;
                create(base?: DeepPartial<SearchWfRunRequest>): SearchWfRunRequest;
                fromPartial(object: DeepPartial<SearchWfRunRequest>): SearchWfRunRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: WfRunIdList, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): WfRunIdList;
                create(base?: DeepPartial<WfRunIdList>): WfRunIdList;
                fromPartial(object: DeepPartial<WfRunIdList>): WfRunIdList;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Search for NodeRun's. This RPC is useful for monitoring and finding bugs in
         * your workflows or Task Workers.
         */
        readonly searchNodeRun: {
            readonly name: "SearchNodeRun";
            readonly requestType: {
                encode(message: SearchNodeRunRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): SearchNodeRunRequest;
                create(base?: DeepPartial<SearchNodeRunRequest>): SearchNodeRunRequest;
                fromPartial(object: DeepPartial<SearchNodeRunRequest>): SearchNodeRunRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: NodeRunIdList, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): NodeRunIdList;
                create(base?: DeepPartial<NodeRunIdList>): NodeRunIdList;
                fromPartial(object: DeepPartial<NodeRunIdList>): NodeRunIdList;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Search for TaskRun's. This RPC is useful for finding bugs in your Task Workers. */
        readonly searchTaskRun: {
            readonly name: "SearchTaskRun";
            readonly requestType: {
                encode(message: SearchTaskRunRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): SearchTaskRunRequest;
                create(base?: DeepPartial<SearchTaskRunRequest>): SearchTaskRunRequest;
                fromPartial(object: DeepPartial<SearchTaskRunRequest>): SearchTaskRunRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: TaskRunIdList, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): TaskRunIdList;
                create(base?: DeepPartial<TaskRunIdList>): TaskRunIdList;
                fromPartial(object: DeepPartial<TaskRunIdList>): TaskRunIdList;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Search for UserTaskRun's. This RPC is highly useful for applications that connect
         * human end-users to LittleHorse: it enables you to find all tasks assigned to a specific
         * person or group of people.
         */
        readonly searchUserTaskRun: {
            readonly name: "SearchUserTaskRun";
            readonly requestType: {
                encode(message: SearchUserTaskRunRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): SearchUserTaskRunRequest;
                create(base?: DeepPartial<SearchUserTaskRunRequest>): SearchUserTaskRunRequest;
                fromPartial(object: DeepPartial<SearchUserTaskRunRequest>): SearchUserTaskRunRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: UserTaskRunIdList, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): UserTaskRunIdList;
                create(base?: DeepPartial<UserTaskRunIdList>): UserTaskRunIdList;
                fromPartial(object: DeepPartial<UserTaskRunIdList>): UserTaskRunIdList;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Search for Variable's. This RPC is highly useful for applications that store data
         * in LittleHorse and need to find a specific WfRun based on certain indexed fields.
         */
        readonly searchVariable: {
            readonly name: "SearchVariable";
            readonly requestType: {
                encode(message: SearchVariableRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): SearchVariableRequest;
                create(base?: DeepPartial<SearchVariableRequest>): SearchVariableRequest;
                fromPartial(object: DeepPartial<SearchVariableRequest>): SearchVariableRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: VariableIdList, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): VariableIdList;
                create(base?: DeepPartial<VariableIdList>): VariableIdList;
                fromPartial(object: DeepPartial<VariableIdList>): VariableIdList;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Search for ExternalEvent's. */
        readonly searchExternalEvent: {
            readonly name: "SearchExternalEvent";
            readonly requestType: {
                encode(message: SearchExternalEventRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): SearchExternalEventRequest;
                create(base?: DeepPartial<SearchExternalEventRequest>): SearchExternalEventRequest;
                fromPartial(object: DeepPartial<SearchExternalEventRequest>): SearchExternalEventRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: ExternalEventIdList, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ExternalEventIdList;
                create(base?: DeepPartial<ExternalEventIdList>): ExternalEventIdList;
                fromPartial(object: DeepPartial<ExternalEventIdList>): ExternalEventIdList;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Search for TaskDef's. */
        readonly searchTaskDef: {
            readonly name: "SearchTaskDef";
            readonly requestType: {
                encode(message: SearchTaskDefRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): SearchTaskDefRequest;
                create(base?: DeepPartial<SearchTaskDefRequest>): SearchTaskDefRequest;
                fromPartial(object: DeepPartial<SearchTaskDefRequest>): SearchTaskDefRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: TaskDefIdList, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): TaskDefIdList;
                create(base?: DeepPartial<TaskDefIdList>): TaskDefIdList;
                fromPartial(object: DeepPartial<TaskDefIdList>): TaskDefIdList;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Search for UserTaskDef's. */
        readonly searchUserTaskDef: {
            readonly name: "SearchUserTaskDef";
            readonly requestType: {
                encode(message: SearchUserTaskDefRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): SearchUserTaskDefRequest;
                create(base?: DeepPartial<SearchUserTaskDefRequest>): SearchUserTaskDefRequest;
                fromPartial(object: DeepPartial<SearchUserTaskDefRequest>): SearchUserTaskDefRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: UserTaskDefIdList, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): UserTaskDefIdList;
                create(base?: DeepPartial<UserTaskDefIdList>): UserTaskDefIdList;
                fromPartial(object: DeepPartial<UserTaskDefIdList>): UserTaskDefIdList;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Search for WfSpec's. */
        readonly searchWfSpec: {
            readonly name: "SearchWfSpec";
            readonly requestType: {
                encode(message: SearchWfSpecRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): SearchWfSpecRequest;
                create(base?: DeepPartial<SearchWfSpecRequest>): SearchWfSpecRequest;
                fromPartial(object: DeepPartial<SearchWfSpecRequest>): SearchWfSpecRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: WfSpecIdList, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): WfSpecIdList;
                create(base?: DeepPartial<WfSpecIdList>): WfSpecIdList;
                fromPartial(object: DeepPartial<WfSpecIdList>): WfSpecIdList;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Search for ExternalEventDef's. */
        readonly searchExternalEventDef: {
            readonly name: "SearchExternalEventDef";
            readonly requestType: {
                encode(message: SearchExternalEventDefRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): SearchExternalEventDefRequest;
                create(base?: DeepPartial<SearchExternalEventDefRequest>): SearchExternalEventDefRequest;
                fromPartial(object: DeepPartial<SearchExternalEventDefRequest>): SearchExternalEventDefRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: ExternalEventDefIdList, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ExternalEventDefIdList;
                create(base?: DeepPartial<ExternalEventDefIdList>): ExternalEventDefIdList;
                fromPartial(object: DeepPartial<ExternalEventDefIdList>): ExternalEventDefIdList;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Search for all available TenantIds for current Principal */
        readonly searchTenant: {
            readonly name: "SearchTenant";
            readonly requestType: {
                encode(message: SearchTenantRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): SearchTenantRequest;
                create(base?: DeepPartial<SearchTenantRequest>): SearchTenantRequest;
                fromPartial(object: DeepPartial<SearchTenantRequest>): SearchTenantRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: TenantIdList, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): TenantIdList;
                create(base?: DeepPartial<TenantIdList>): TenantIdList;
                fromPartial(object: DeepPartial<TenantIdList>): TenantIdList;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**  */
        readonly searchPrincipal: {
            readonly name: "SearchPrincipal";
            readonly requestType: {
                encode(message: SearchPrincipalRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): SearchPrincipalRequest;
                create(base?: DeepPartial<SearchPrincipalRequest>): SearchPrincipalRequest;
                fromPartial(object: DeepPartial<SearchPrincipalRequest>): SearchPrincipalRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: PrincipalIdList, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): PrincipalIdList;
                create(base?: DeepPartial<PrincipalIdList>): PrincipalIdList;
                fromPartial(object: DeepPartial<PrincipalIdList>): PrincipalIdList;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Used by the Task Worker to:
         * 1. Tell the LH Server that the Task Worker has joined the Task Worker Group.
         * 2. Receive the assignemnt of LH Server's to poll from.
         * Generally, you won't use this request manually.
         */
        readonly registerTaskWorker: {
            readonly name: "RegisterTaskWorker";
            readonly requestType: {
                encode(message: RegisterTaskWorkerRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): RegisterTaskWorkerRequest;
                create(base?: DeepPartial<RegisterTaskWorkerRequest>): RegisterTaskWorkerRequest;
                fromPartial(object: DeepPartial<RegisterTaskWorkerRequest>): RegisterTaskWorkerRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: RegisterTaskWorkerResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): RegisterTaskWorkerResponse;
                create(base?: DeepPartial<RegisterTaskWorkerResponse>): RegisterTaskWorkerResponse;
                fromPartial(object: DeepPartial<RegisterTaskWorkerResponse>): RegisterTaskWorkerResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Used by Task Workers to listen for TaskRuns on the Task Queue. Generally, you won't
         * use this RPC manually.
         */
        readonly pollTask: {
            readonly name: "PollTask";
            readonly requestType: {
                encode(message: PollTaskRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): PollTaskRequest;
                create(base?: DeepPartial<PollTaskRequest>): PollTaskRequest;
                fromPartial(object: DeepPartial<PollTaskRequest>): PollTaskRequest;
            };
            readonly requestStream: true;
            readonly responseType: {
                encode(message: PollTaskResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): PollTaskResponse;
                create(base?: DeepPartial<PollTaskResponse>): PollTaskResponse;
                fromPartial(object: DeepPartial<PollTaskResponse>): PollTaskResponse;
            };
            readonly responseStream: true;
            readonly options: {};
        };
        /**
         * Used by Task Workers to report the result of a TaskRun. Generally, you won't use
         * this rpc manually.
         */
        readonly reportTask: {
            readonly name: "ReportTask";
            readonly requestType: {
                encode(message: ReportTaskRun, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ReportTaskRun;
                create(base?: DeepPartial<ReportTaskRun>): ReportTaskRun;
                fromPartial(object: DeepPartial<ReportTaskRun>): ReportTaskRun;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): Empty;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Move a WfRun or a specific ThreadRun in that WfRun to the HALTED state. */
        readonly stopWfRun: {
            readonly name: "StopWfRun";
            readonly requestType: {
                encode(message: StopWfRunRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): StopWfRunRequest;
                create(base?: DeepPartial<StopWfRunRequest>): StopWfRunRequest;
                fromPartial(object: DeepPartial<StopWfRunRequest>): StopWfRunRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): Empty;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Resumes a WfRun or a specific ThreadRun of a WfRun. */
        readonly resumeWfRun: {
            readonly name: "ResumeWfRun";
            readonly requestType: {
                encode(message: ResumeWfRunRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ResumeWfRunRequest;
                create(base?: DeepPartial<ResumeWfRunRequest>): ResumeWfRunRequest;
                fromPartial(object: DeepPartial<ResumeWfRunRequest>): ResumeWfRunRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): Empty;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Rescues a failed ThreadRun (in the ERROR state only) by restarting it from
         * the point of failure. Useful if a bug in Task Worker implementation caused
         * a WfRun to fail and you did not have a FailureHandler for that NodeRun.
         *
         * The specified `ThreadRun` must be in a state where it's latest `NodeRun` is: <br/>
         * - In the `ERROR` state.<br/>
         * - Has no `FailureHandler` `ThreadRun`s <br/>
         * - The parent `ThreadRun`, or any parent of the parent, has not handled the `Failure`
         * yet.
         *
         * If that is not true, then the `ThreadRun` cannot be rescued and the request
         * will return `FAILED_PRECONDITION`.
         */
        readonly rescueThreadRun: {
            readonly name: "RescueThreadRun";
            readonly requestType: {
                encode(message: RescueThreadRunRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): RescueThreadRunRequest;
                create(base?: DeepPartial<RescueThreadRunRequest>): RescueThreadRunRequest;
                fromPartial(object: DeepPartial<RescueThreadRunRequest>): RescueThreadRunRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: WfRun, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): WfRun;
                create(base?: {
                    id?: {
                        id?: string | undefined;
                        parentWfRunId?: any | undefined;
                    } | undefined;
                    wfSpecId?: {
                        name?: string | undefined;
                        majorVersion?: number | undefined;
                        revision?: number | undefined;
                    } | undefined;
                    oldWfSpecVersions?: {
                        name?: string | undefined;
                        majorVersion?: number | undefined;
                        revision?: number | undefined;
                    }[] | undefined;
                    status?: LHStatus | undefined;
                    greatestThreadrunNumber?: number | undefined;
                    startTime?: string | undefined;
                    endTime?: string | undefined;
                    threadRuns?: {
                        wfSpecId?: {
                            name?: string | undefined;
                            majorVersion?: number | undefined;
                            revision?: number | undefined;
                        } | undefined;
                        number?: number | undefined;
                        status?: LHStatus | undefined;
                        threadSpecName?: string | undefined;
                        startTime?: string | undefined;
                        endTime?: string | undefined;
                        errorMessage?: string | undefined;
                        childThreadIds?: number[] | undefined;
                        parentThreadId?: number | undefined;
                        haltReasons?: {
                            parentHalted?: {
                                parentThreadId?: number | undefined;
                            } | undefined;
                            interrupted?: {
                                interruptThreadId?: number | undefined;
                            } | undefined;
                            pendingInterrupt?: {
                                externalEventId?: {
                                    wfRunId?: {
                                        id?: string | undefined;
                                        parentWfRunId?: any | undefined;
                                    } | undefined;
                                    externalEventDefId?: {
                                        name?: string | undefined;
                                    } | undefined;
                                    guid?: string | undefined;
                                } | undefined;
                            } | undefined;
                            pendingFailure?: {
                                nodeRunPosition?: number | undefined;
                            } | undefined;
                            handlingFailure?: {
                                handlerThreadId?: number | undefined;
                            } | undefined;
                            manualHalt?: {
                                meaningOfLife?: boolean | undefined;
                            } | undefined;
                        }[] | undefined;
                        interruptTriggerId?: {
                            wfRunId?: {
                                id?: string | undefined;
                                parentWfRunId?: any | undefined;
                            } | undefined;
                            externalEventDefId?: {
                                name?: string | undefined;
                            } | undefined;
                            guid?: string | undefined;
                        } | undefined;
                        failureBeingHandled?: {
                            threadRunNumber?: number | undefined;
                            nodeRunPosition?: number | undefined;
                            failureNumber?: number | undefined;
                        } | undefined;
                        currentNodePosition?: number | undefined;
                        handledFailedChildren?: number[] | undefined;
                        type?: import("./wf_run").ThreadType | undefined;
                    }[] | undefined;
                    pendingInterrupts?: {
                        externalEventId?: {
                            wfRunId?: {
                                id?: string | undefined;
                                parentWfRunId?: any | undefined;
                            } | undefined;
                            externalEventDefId?: {
                                name?: string | undefined;
                            } | undefined;
                            guid?: string | undefined;
                        } | undefined;
                        handlerSpecName?: string | undefined;
                        interruptedThreadId?: number | undefined;
                    }[] | undefined;
                    pendingFailures?: {
                        failedThreadRun?: number | undefined;
                        handlerSpecName?: string | undefined;
                    }[] | undefined;
                } | undefined): WfRun;
                fromPartial(object: {
                    id?: {
                        id?: string | undefined;
                        parentWfRunId?: any | undefined;
                    } | undefined;
                    wfSpecId?: {
                        name?: string | undefined;
                        majorVersion?: number | undefined;
                        revision?: number | undefined;
                    } | undefined;
                    oldWfSpecVersions?: {
                        name?: string | undefined;
                        majorVersion?: number | undefined;
                        revision?: number | undefined;
                    }[] | undefined;
                    status?: LHStatus | undefined;
                    greatestThreadrunNumber?: number | undefined;
                    startTime?: string | undefined;
                    endTime?: string | undefined;
                    threadRuns?: {
                        wfSpecId?: {
                            name?: string | undefined;
                            majorVersion?: number | undefined;
                            revision?: number | undefined;
                        } | undefined;
                        number?: number | undefined;
                        status?: LHStatus | undefined;
                        threadSpecName?: string | undefined;
                        startTime?: string | undefined;
                        endTime?: string | undefined;
                        errorMessage?: string | undefined;
                        childThreadIds?: number[] | undefined;
                        parentThreadId?: number | undefined;
                        haltReasons?: {
                            parentHalted?: {
                                parentThreadId?: number | undefined;
                            } | undefined;
                            interrupted?: {
                                interruptThreadId?: number | undefined;
                            } | undefined;
                            pendingInterrupt?: {
                                externalEventId?: {
                                    wfRunId?: {
                                        id?: string | undefined;
                                        parentWfRunId?: any | undefined;
                                    } | undefined;
                                    externalEventDefId?: {
                                        name?: string | undefined;
                                    } | undefined;
                                    guid?: string | undefined;
                                } | undefined;
                            } | undefined;
                            pendingFailure?: {
                                nodeRunPosition?: number | undefined;
                            } | undefined;
                            handlingFailure?: {
                                handlerThreadId?: number | undefined;
                            } | undefined;
                            manualHalt?: {
                                meaningOfLife?: boolean | undefined;
                            } | undefined;
                        }[] | undefined;
                        interruptTriggerId?: {
                            wfRunId?: {
                                id?: string | undefined;
                                parentWfRunId?: any | undefined;
                            } | undefined;
                            externalEventDefId?: {
                                name?: string | undefined;
                            } | undefined;
                            guid?: string | undefined;
                        } | undefined;
                        failureBeingHandled?: {
                            threadRunNumber?: number | undefined;
                            nodeRunPosition?: number | undefined;
                            failureNumber?: number | undefined;
                        } | undefined;
                        currentNodePosition?: number | undefined;
                        handledFailedChildren?: number[] | undefined;
                        type?: import("./wf_run").ThreadType | undefined;
                    }[] | undefined;
                    pendingInterrupts?: {
                        externalEventId?: {
                            wfRunId?: {
                                id?: string | undefined;
                                parentWfRunId?: any | undefined;
                            } | undefined;
                            externalEventDefId?: {
                                name?: string | undefined;
                            } | undefined;
                            guid?: string | undefined;
                        } | undefined;
                        handlerSpecName?: string | undefined;
                        interruptedThreadId?: number | undefined;
                    }[] | undefined;
                    pendingFailures?: {
                        failedThreadRun?: number | undefined;
                        handlerSpecName?: string | undefined;
                    }[] | undefined;
                }): WfRun;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Deletes a WfRun. The WfRun cannot be in the RUNNING state. */
        readonly deleteWfRun: {
            readonly name: "DeleteWfRun";
            readonly requestType: {
                encode(message: DeleteWfRunRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): DeleteWfRunRequest;
                create(base?: DeepPartial<DeleteWfRunRequest>): DeleteWfRunRequest;
                fromPartial(object: DeepPartial<DeleteWfRunRequest>): DeleteWfRunRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): Empty;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Deletes a TaskDef. */
        readonly deleteTaskDef: {
            readonly name: "DeleteTaskDef";
            readonly requestType: {
                encode(message: DeleteTaskDefRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): DeleteTaskDefRequest;
                create(base?: DeepPartial<DeleteTaskDefRequest>): DeleteTaskDefRequest;
                fromPartial(object: DeepPartial<DeleteTaskDefRequest>): DeleteTaskDefRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): Empty;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Deletes a WfSpec. */
        readonly deleteWfSpec: {
            readonly name: "DeleteWfSpec";
            readonly requestType: {
                encode(message: DeleteWfSpecRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): DeleteWfSpecRequest;
                create(base?: DeepPartial<DeleteWfSpecRequest>): DeleteWfSpecRequest;
                fromPartial(object: DeepPartial<DeleteWfSpecRequest>): DeleteWfSpecRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): Empty;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Deletes a UserTaskDef. */
        readonly deleteUserTaskDef: {
            readonly name: "DeleteUserTaskDef";
            readonly requestType: {
                encode(message: DeleteUserTaskDefRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): DeleteUserTaskDefRequest;
                create(base?: DeepPartial<DeleteUserTaskDefRequest>): DeleteUserTaskDefRequest;
                fromPartial(object: DeepPartial<DeleteUserTaskDefRequest>): DeleteUserTaskDefRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): Empty;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Deletes an ExternalEventDef. */
        readonly deleteExternalEventDef: {
            readonly name: "DeleteExternalEventDef";
            readonly requestType: {
                encode(message: DeleteExternalEventDefRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): DeleteExternalEventDefRequest;
                create(base?: DeepPartial<DeleteExternalEventDefRequest>): DeleteExternalEventDefRequest;
                fromPartial(object: DeepPartial<DeleteExternalEventDefRequest>): DeleteExternalEventDefRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): Empty;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Deletes a `Principal`. Fails with `FAILED_PRECONDITION` if the specified `Principal`
         * is the last remaining `Principal` with admin permissions. Admin permissions are defined
         * as having the `global_acls` of `ALL_ACTIONS` over the `ACL_ALL_RESOURCES` scope.
         */
        readonly deletePrincipal: {
            readonly name: "DeletePrincipal";
            readonly requestType: {
                encode(message: DeletePrincipalRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): DeletePrincipalRequest;
                create(base?: {
                    id?: {
                        id?: string | undefined;
                    } | undefined;
                } | undefined): DeletePrincipalRequest;
                fromPartial(object: {
                    id?: {
                        id?: string | undefined;
                    } | undefined;
                }): DeletePrincipalRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): Empty;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Returns TaskDef Metrics for a specific TaskDef and a specific time window. */
        readonly getTaskDefMetricsWindow: {
            readonly name: "GetTaskDefMetricsWindow";
            readonly requestType: {
                encode(message: TaskDefMetricsQueryRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): TaskDefMetricsQueryRequest;
                create(base?: DeepPartial<TaskDefMetricsQueryRequest>): TaskDefMetricsQueryRequest;
                fromPartial(object: DeepPartial<TaskDefMetricsQueryRequest>): TaskDefMetricsQueryRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: TaskDefMetrics, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): TaskDefMetrics;
                create(base?: DeepPartial<TaskDefMetrics>): TaskDefMetrics;
                fromPartial(object: DeepPartial<TaskDefMetrics>): TaskDefMetrics;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Returns WfSpec Metrics for a specific WfSpec and a specific time window. */
        readonly getWfSpecMetricsWindow: {
            readonly name: "GetWfSpecMetricsWindow";
            readonly requestType: {
                encode(message: WfSpecMetricsQueryRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): WfSpecMetricsQueryRequest;
                create(base?: DeepPartial<WfSpecMetricsQueryRequest>): WfSpecMetricsQueryRequest;
                fromPartial(object: DeepPartial<WfSpecMetricsQueryRequest>): WfSpecMetricsQueryRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: WfSpecMetrics, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): WfSpecMetrics;
                create(base?: DeepPartial<WfSpecMetrics>): WfSpecMetrics;
                fromPartial(object: DeepPartial<WfSpecMetrics>): WfSpecMetrics;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Returns a list of TaskDef Metrics Windows. */
        readonly listTaskDefMetrics: {
            readonly name: "ListTaskDefMetrics";
            readonly requestType: {
                encode(message: ListTaskMetricsRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ListTaskMetricsRequest;
                create(base?: DeepPartial<ListTaskMetricsRequest>): ListTaskMetricsRequest;
                fromPartial(object: DeepPartial<ListTaskMetricsRequest>): ListTaskMetricsRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: ListTaskMetricsResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ListTaskMetricsResponse;
                create(base?: DeepPartial<ListTaskMetricsResponse>): ListTaskMetricsResponse;
                fromPartial(object: DeepPartial<ListTaskMetricsResponse>): ListTaskMetricsResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Returns a list of WfSpec Metrics Windows. */
        readonly listWfSpecMetrics: {
            readonly name: "ListWfSpecMetrics";
            readonly requestType: {
                encode(message: ListWfMetricsRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ListWfMetricsRequest;
                create(base?: DeepPartial<ListWfMetricsRequest>): ListWfMetricsRequest;
                fromPartial(object: DeepPartial<ListWfMetricsRequest>): ListWfMetricsRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: ListWfMetricsResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ListWfMetricsResponse;
                create(base?: DeepPartial<ListWfMetricsResponse>): ListWfMetricsResponse;
                fromPartial(object: DeepPartial<ListWfMetricsResponse>): ListWfMetricsResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** EXPERIMENTAL: Creates another Tenant in the LH Server. */
        readonly putTenant: {
            readonly name: "PutTenant";
            readonly requestType: {
                encode(message: PutTenantRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): PutTenantRequest;
                create(base?: {
                    id?: string | undefined;
                } | undefined): PutTenantRequest;
                fromPartial(object: {
                    id?: string | undefined;
                }): PutTenantRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: Tenant, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): Tenant;
                create(base?: {
                    id?: {
                        id?: string | undefined;
                    } | undefined;
                    createdAt?: string | undefined;
                } | undefined): Tenant;
                fromPartial(object: {
                    id?: {
                        id?: string | undefined;
                    } | undefined;
                    createdAt?: string | undefined;
                }): Tenant;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** EXPERIMENTAL: Gets a Tenant from the LH Server. */
        readonly getTenant: {
            readonly name: "GetTenant";
            readonly requestType: {
                encode(message: TenantId, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): TenantId;
                create(base?: {
                    id?: string | undefined;
                } | undefined): TenantId;
                fromPartial(object: {
                    id?: string | undefined;
                }): TenantId;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: Tenant, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): Tenant;
                create(base?: {
                    id?: {
                        id?: string | undefined;
                    } | undefined;
                    createdAt?: string | undefined;
                } | undefined): Tenant;
                fromPartial(object: {
                    id?: {
                        id?: string | undefined;
                    } | undefined;
                    createdAt?: string | undefined;
                }): Tenant;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** EXPERIMENTAL: Creates an Principal. */
        readonly putPrincipal: {
            readonly name: "PutPrincipal";
            readonly requestType: {
                encode(message: PutPrincipalRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): PutPrincipalRequest;
                create(base?: {
                    id?: string | undefined;
                    perTenantAcls?: {
                        [x: string]: {
                            acls?: {
                                resources?: import("./acls").ACLResource[] | undefined;
                                allowedActions?: import("./acls").ACLAction[] | undefined;
                                name?: string | undefined;
                                prefix?: string | undefined;
                            }[] | undefined;
                        } | undefined;
                    } | undefined;
                    globalAcls?: {
                        acls?: {
                            resources?: import("./acls").ACLResource[] | undefined;
                            allowedActions?: import("./acls").ACLAction[] | undefined;
                            name?: string | undefined;
                            prefix?: string | undefined;
                        }[] | undefined;
                    } | undefined;
                    overwrite?: boolean | undefined;
                } | undefined): PutPrincipalRequest;
                fromPartial(object: {
                    id?: string | undefined;
                    perTenantAcls?: {
                        [x: string]: {
                            acls?: {
                                resources?: import("./acls").ACLResource[] | undefined;
                                allowedActions?: import("./acls").ACLAction[] | undefined;
                                name?: string | undefined;
                                prefix?: string | undefined;
                            }[] | undefined;
                        } | undefined;
                    } | undefined;
                    globalAcls?: {
                        acls?: {
                            resources?: import("./acls").ACLResource[] | undefined;
                            allowedActions?: import("./acls").ACLAction[] | undefined;
                            name?: string | undefined;
                            prefix?: string | undefined;
                        }[] | undefined;
                    } | undefined;
                    overwrite?: boolean | undefined;
                }): PutPrincipalRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: Principal, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): Principal;
                create(base?: {
                    id?: {
                        id?: string | undefined;
                    } | undefined;
                    createdAt?: string | undefined;
                    perTenantAcls?: {
                        [x: string]: {
                            acls?: {
                                resources?: import("./acls").ACLResource[] | undefined;
                                allowedActions?: import("./acls").ACLAction[] | undefined;
                                name?: string | undefined;
                                prefix?: string | undefined;
                            }[] | undefined;
                        } | undefined;
                    } | undefined;
                    globalAcls?: {
                        acls?: {
                            resources?: import("./acls").ACLResource[] | undefined;
                            allowedActions?: import("./acls").ACLAction[] | undefined;
                            name?: string | undefined;
                            prefix?: string | undefined;
                        }[] | undefined;
                    } | undefined;
                } | undefined): Principal;
                fromPartial(object: {
                    id?: {
                        id?: string | undefined;
                    } | undefined;
                    createdAt?: string | undefined;
                    perTenantAcls?: {
                        [x: string]: {
                            acls?: {
                                resources?: import("./acls").ACLResource[] | undefined;
                                allowedActions?: import("./acls").ACLAction[] | undefined;
                                name?: string | undefined;
                                prefix?: string | undefined;
                            }[] | undefined;
                        } | undefined;
                    } | undefined;
                    globalAcls?: {
                        acls?: {
                            resources?: import("./acls").ACLResource[] | undefined;
                            allowedActions?: import("./acls").ACLAction[] | undefined;
                            name?: string | undefined;
                            prefix?: string | undefined;
                        }[] | undefined;
                    } | undefined;
                }): Principal;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Returns the Principal of the caller. */
        readonly whoami: {
            readonly name: "Whoami";
            readonly requestType: {
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): Empty;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: Principal, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): Principal;
                create(base?: {
                    id?: {
                        id?: string | undefined;
                    } | undefined;
                    createdAt?: string | undefined;
                    perTenantAcls?: {
                        [x: string]: {
                            acls?: {
                                resources?: import("./acls").ACLResource[] | undefined;
                                allowedActions?: import("./acls").ACLAction[] | undefined;
                                name?: string | undefined;
                                prefix?: string | undefined;
                            }[] | undefined;
                        } | undefined;
                    } | undefined;
                    globalAcls?: {
                        acls?: {
                            resources?: import("./acls").ACLResource[] | undefined;
                            allowedActions?: import("./acls").ACLAction[] | undefined;
                            name?: string | undefined;
                            prefix?: string | undefined;
                        }[] | undefined;
                    } | undefined;
                } | undefined): Principal;
                fromPartial(object: {
                    id?: {
                        id?: string | undefined;
                    } | undefined;
                    createdAt?: string | undefined;
                    perTenantAcls?: {
                        [x: string]: {
                            acls?: {
                                resources?: import("./acls").ACLResource[] | undefined;
                                allowedActions?: import("./acls").ACLAction[] | undefined;
                                name?: string | undefined;
                                prefix?: string | undefined;
                            }[] | undefined;
                        } | undefined;
                    } | undefined;
                    globalAcls?: {
                        acls?: {
                            resources?: import("./acls").ACLResource[] | undefined;
                            allowedActions?: import("./acls").ACLAction[] | undefined;
                            name?: string | undefined;
                            prefix?: string | undefined;
                        }[] | undefined;
                    } | undefined;
                }): Principal;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Gets the version of the LH Server. */
        readonly getServerVersion: {
            readonly name: "GetServerVersion";
            readonly requestType: {
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): Empty;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: ServerVersionResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ServerVersionResponse;
                create(base?: DeepPartial<ServerVersionResponse>): ServerVersionResponse;
                fromPartial(object: DeepPartial<ServerVersionResponse>): ServerVersionResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface LittleHorseServiceImplementation<CallContextExt = {}> {
    /** Creates a TaskDef. */
    putTaskDef(request: PutTaskDefRequest, context: CallContext & CallContextExt): Promise<DeepPartial<TaskDef>>;
    /** Gets a TaskDef. */
    getTaskDef(request: TaskDefId, context: CallContext & CallContextExt): Promise<DeepPartial<TaskDef>>;
    /** Gets the registered task worker group associated with a specific TaskDef. */
    getTaskWorkerGroup(request: TaskDefId, context: CallContext & CallContextExt): Promise<DeepPartial<TaskWorkerGroup>>;
    /** Creates an ExternalEventDef. */
    putExternalEventDef(request: PutExternalEventDefRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ExternalEventDef>>;
    /** Gets an ExternalEventDef. */
    getExternalEventDef(request: ExternalEventDefId, context: CallContext & CallContextExt): Promise<DeepPartial<ExternalEventDef>>;
    /** EXPERIMENTAL: Creates a WorkflowEventDef. */
    putWorkflowEventDef(request: PutWorkflowEventDefRequest, context: CallContext & CallContextExt): Promise<DeepPartial<WorkflowEventDef>>;
    /** Creates a WfSpec. */
    putWfSpec(request: PutWfSpecRequest, context: CallContext & CallContextExt): Promise<DeepPartial<WfSpec>>;
    /** Gets a WfSpec. */
    getWfSpec(request: WfSpecId, context: CallContext & CallContextExt): Promise<DeepPartial<WfSpec>>;
    /** Returns the latest WfSpec with a specified name (and optionally a specified Major Version). */
    getLatestWfSpec(request: GetLatestWfSpecRequest, context: CallContext & CallContextExt): Promise<DeepPartial<WfSpec>>;
    /**
     * EXPERIMENTAL: Migrates all WfRun's from one version of a WfSpec onto a newer version of the
     * same WfSpec. This is useful for long-running WfRun's (eg. a 60-day marketing campaign) where
     * you must update WfRun's that are in the RUNNING state rather than allowing them to run to
     * completion.
     *
     * As of 0.7.2, this feature is only partially implemented.
     */
    migrateWfSpec(request: MigrateWfSpecRequest, context: CallContext & CallContextExt): Promise<DeepPartial<WfSpec>>;
    /** Creates a UserTaskDef. */
    putUserTaskDef(request: PutUserTaskDefRequest, context: CallContext & CallContextExt): Promise<DeepPartial<UserTaskDef>>;
    /**
     * Gets a specific UserTaskDef.
     *
     * This RPC is highly useful for applications built around
     * User Tasks. For example, a UI that dynamically displays form fields based on the User Task
     * might first receive a UserTaskRun, then use that UserTaskRun to look up the UserTaskDef.
     * The frontend would inspect the UserTaskDef and display a form field on the browser page
     * for each field in the UserTaskDef.
     */
    getUserTaskDef(request: UserTaskDefId, context: CallContext & CallContextExt): Promise<DeepPartial<UserTaskDef>>;
    /** Returns the most recent UserTaskDef with a specific name. */
    getLatestUserTaskDef(request: GetLatestUserTaskDefRequest, context: CallContext & CallContextExt): Promise<DeepPartial<UserTaskDef>>;
    /** Runs a WfSpec to create a WfRun. */
    runWf(request: RunWfRequest, context: CallContext & CallContextExt): Promise<DeepPartial<WfRun>>;
    /**
     * Gets a WfRun. Although useful for development and debugging, this RPC is not often
     * used by applications.
     */
    getWfRun(request: WfRunId, context: CallContext & CallContextExt): Promise<DeepPartial<WfRun>>;
    /**
     * Loads a specific UserTaskRun. It includes information about to whom the UserTask is
     * currently assigned, history of assignments and reassignments, and any context for that
     * UserTaskRun which is specific to the WfRun.
     */
    getUserTaskRun(request: UserTaskRunId, context: CallContext & CallContextExt): Promise<DeepPartial<UserTaskRun>>;
    /**
     * Change the ownership of a UserTaskRun to a new userId, userGroup, or both. The
     * action will be reflected in your next call to SearchUserTaskRun. This RPC is useful for
     * applications that are using User Tasks to build an internal task-list and wish to
     * administer the tasks.
     */
    assignUserTaskRun(request: AssignUserTaskRunRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
    /**
     * Completes a UserTaskRun. Includes the results of the UserTaskRun, the UserTaskRun Id, and
     * the userId of the user who completes the UserTaskRun. Results in the UserTask NodeRun being
     * completed, and unblocks the associated ThreadRun in the WfRun.
     *
     * This RPC is highly useful for applications built around a WfSpec that uses USER_TASK nodes.
     */
    completeUserTaskRun(request: CompleteUserTaskRunRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
    /** Cancels a UserTaskRun. This will result in an EXCEPTION being propagated to the WfRun. */
    cancelUserTaskRun(request: CancelUserTaskRunRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
    /**
     * Lists all UserTaskRun's for a specific WfRun. Can be useful when using a WfRun
     * to model an entity.
     */
    listUserTaskRuns(request: ListUserTaskRunRequest, context: CallContext & CallContextExt): Promise<DeepPartial<UserTaskRunList>>;
    /** Gets a specific NodeRun. */
    getNodeRun(request: NodeRunId, context: CallContext & CallContextExt): Promise<DeepPartial<NodeRun>>;
    /** Lists all NodeRun's for a specific WfRun. */
    listNodeRuns(request: ListNodeRunsRequest, context: CallContext & CallContextExt): Promise<DeepPartial<NodeRunList>>;
    /** Gets a specific TaskRun. */
    getTaskRun(request: TaskRunId, context: CallContext & CallContextExt): Promise<DeepPartial<TaskRun>>;
    /** Lists all TaskRun's for a specific WfRun. */
    listTaskRuns(request: ListTaskRunsRequest, context: CallContext & CallContextExt): Promise<DeepPartial<TaskRunList>>;
    /**
     * Get the value of a specific Variable. When using a WfRun to model an entity, this
     * RPC is useful for retrieving information. It is equivalent to looking up the value of a
     * column for a specific row in a SQL table.
     */
    getVariable(request: VariableId, context: CallContext & CallContextExt): Promise<DeepPartial<Variable>>;
    /** List all Variables from a WfRun. */
    listVariables(request: ListVariablesRequest, context: CallContext & CallContextExt): Promise<DeepPartial<VariableList>>;
    /** Post an ExternalEvent. This RPC is highly useful for */
    putExternalEvent(request: PutExternalEventRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ExternalEvent>>;
    /** Get a specific ExternalEvent. */
    getExternalEvent(request: ExternalEventId, context: CallContext & CallContextExt): Promise<DeepPartial<ExternalEvent>>;
    /**
     * Waits for a WorkflowEvent to be thrown by a given WfRun. Returns immediately if a matching
     * WorkflowEvent has already been thrown; throws a DEADLINE_EXCEEDED error if the WorkflowEvent
     * is not thrown before the deadline specified by the client.
     *
     * To specify the deadline, the client should use GRPC deadlines.
     */
    awaitWorkflowEvent(request: AwaitWorkflowEventRequest, context: CallContext & CallContextExt): Promise<DeepPartial<WorkflowEvent>>;
    /** List ExternalEvent's for a specific WfRun. */
    listExternalEvents(request: ListExternalEventsRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ExternalEventList>>;
    /**
     * Search for WfRun's. This RPC is highly useful for applications that store data
     * in LittleHorse and need to find a specific WfRun based on certain indexed fields.
     */
    searchWfRun(request: SearchWfRunRequest, context: CallContext & CallContextExt): Promise<DeepPartial<WfRunIdList>>;
    /**
     * Search for NodeRun's. This RPC is useful for monitoring and finding bugs in
     * your workflows or Task Workers.
     */
    searchNodeRun(request: SearchNodeRunRequest, context: CallContext & CallContextExt): Promise<DeepPartial<NodeRunIdList>>;
    /** Search for TaskRun's. This RPC is useful for finding bugs in your Task Workers. */
    searchTaskRun(request: SearchTaskRunRequest, context: CallContext & CallContextExt): Promise<DeepPartial<TaskRunIdList>>;
    /**
     * Search for UserTaskRun's. This RPC is highly useful for applications that connect
     * human end-users to LittleHorse: it enables you to find all tasks assigned to a specific
     * person or group of people.
     */
    searchUserTaskRun(request: SearchUserTaskRunRequest, context: CallContext & CallContextExt): Promise<DeepPartial<UserTaskRunIdList>>;
    /**
     * Search for Variable's. This RPC is highly useful for applications that store data
     * in LittleHorse and need to find a specific WfRun based on certain indexed fields.
     */
    searchVariable(request: SearchVariableRequest, context: CallContext & CallContextExt): Promise<DeepPartial<VariableIdList>>;
    /** Search for ExternalEvent's. */
    searchExternalEvent(request: SearchExternalEventRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ExternalEventIdList>>;
    /** Search for TaskDef's. */
    searchTaskDef(request: SearchTaskDefRequest, context: CallContext & CallContextExt): Promise<DeepPartial<TaskDefIdList>>;
    /** Search for UserTaskDef's. */
    searchUserTaskDef(request: SearchUserTaskDefRequest, context: CallContext & CallContextExt): Promise<DeepPartial<UserTaskDefIdList>>;
    /** Search for WfSpec's. */
    searchWfSpec(request: SearchWfSpecRequest, context: CallContext & CallContextExt): Promise<DeepPartial<WfSpecIdList>>;
    /** Search for ExternalEventDef's. */
    searchExternalEventDef(request: SearchExternalEventDefRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ExternalEventDefIdList>>;
    /** Search for all available TenantIds for current Principal */
    searchTenant(request: SearchTenantRequest, context: CallContext & CallContextExt): Promise<DeepPartial<TenantIdList>>;
    /**  */
    searchPrincipal(request: SearchPrincipalRequest, context: CallContext & CallContextExt): Promise<DeepPartial<PrincipalIdList>>;
    /**
     * Used by the Task Worker to:
     * 1. Tell the LH Server that the Task Worker has joined the Task Worker Group.
     * 2. Receive the assignemnt of LH Server's to poll from.
     * Generally, you won't use this request manually.
     */
    registerTaskWorker(request: RegisterTaskWorkerRequest, context: CallContext & CallContextExt): Promise<DeepPartial<RegisterTaskWorkerResponse>>;
    /**
     * Used by Task Workers to listen for TaskRuns on the Task Queue. Generally, you won't
     * use this RPC manually.
     */
    pollTask(request: AsyncIterable<PollTaskRequest>, context: CallContext & CallContextExt): ServerStreamingMethodResult<DeepPartial<PollTaskResponse>>;
    /**
     * Used by Task Workers to report the result of a TaskRun. Generally, you won't use
     * this rpc manually.
     */
    reportTask(request: ReportTaskRun, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
    /** Move a WfRun or a specific ThreadRun in that WfRun to the HALTED state. */
    stopWfRun(request: StopWfRunRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
    /** Resumes a WfRun or a specific ThreadRun of a WfRun. */
    resumeWfRun(request: ResumeWfRunRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
    /**
     * Rescues a failed ThreadRun (in the ERROR state only) by restarting it from
     * the point of failure. Useful if a bug in Task Worker implementation caused
     * a WfRun to fail and you did not have a FailureHandler for that NodeRun.
     *
     * The specified `ThreadRun` must be in a state where it's latest `NodeRun` is: <br/>
     * - In the `ERROR` state.<br/>
     * - Has no `FailureHandler` `ThreadRun`s <br/>
     * - The parent `ThreadRun`, or any parent of the parent, has not handled the `Failure`
     * yet.
     *
     * If that is not true, then the `ThreadRun` cannot be rescued and the request
     * will return `FAILED_PRECONDITION`.
     */
    rescueThreadRun(request: RescueThreadRunRequest, context: CallContext & CallContextExt): Promise<DeepPartial<WfRun>>;
    /** Deletes a WfRun. The WfRun cannot be in the RUNNING state. */
    deleteWfRun(request: DeleteWfRunRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
    /** Deletes a TaskDef. */
    deleteTaskDef(request: DeleteTaskDefRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
    /** Deletes a WfSpec. */
    deleteWfSpec(request: DeleteWfSpecRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
    /** Deletes a UserTaskDef. */
    deleteUserTaskDef(request: DeleteUserTaskDefRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
    /** Deletes an ExternalEventDef. */
    deleteExternalEventDef(request: DeleteExternalEventDefRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
    /**
     * Deletes a `Principal`. Fails with `FAILED_PRECONDITION` if the specified `Principal`
     * is the last remaining `Principal` with admin permissions. Admin permissions are defined
     * as having the `global_acls` of `ALL_ACTIONS` over the `ACL_ALL_RESOURCES` scope.
     */
    deletePrincipal(request: DeletePrincipalRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
    /** Returns TaskDef Metrics for a specific TaskDef and a specific time window. */
    getTaskDefMetricsWindow(request: TaskDefMetricsQueryRequest, context: CallContext & CallContextExt): Promise<DeepPartial<TaskDefMetrics>>;
    /** Returns WfSpec Metrics for a specific WfSpec and a specific time window. */
    getWfSpecMetricsWindow(request: WfSpecMetricsQueryRequest, context: CallContext & CallContextExt): Promise<DeepPartial<WfSpecMetrics>>;
    /** Returns a list of TaskDef Metrics Windows. */
    listTaskDefMetrics(request: ListTaskMetricsRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ListTaskMetricsResponse>>;
    /** Returns a list of WfSpec Metrics Windows. */
    listWfSpecMetrics(request: ListWfMetricsRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ListWfMetricsResponse>>;
    /** EXPERIMENTAL: Creates another Tenant in the LH Server. */
    putTenant(request: PutTenantRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Tenant>>;
    /** EXPERIMENTAL: Gets a Tenant from the LH Server. */
    getTenant(request: TenantId, context: CallContext & CallContextExt): Promise<DeepPartial<Tenant>>;
    /** EXPERIMENTAL: Creates an Principal. */
    putPrincipal(request: PutPrincipalRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Principal>>;
    /** Returns the Principal of the caller. */
    whoami(request: Empty, context: CallContext & CallContextExt): Promise<DeepPartial<Principal>>;
    /** Gets the version of the LH Server. */
    getServerVersion(request: Empty, context: CallContext & CallContextExt): Promise<DeepPartial<ServerVersionResponse>>;
}
export interface LittleHorseClient<CallOptionsExt = {}> {
    /** Creates a TaskDef. */
    putTaskDef(request: DeepPartial<PutTaskDefRequest>, options?: CallOptions & CallOptionsExt): Promise<TaskDef>;
    /** Gets a TaskDef. */
    getTaskDef(request: DeepPartial<TaskDefId>, options?: CallOptions & CallOptionsExt): Promise<TaskDef>;
    /** Gets the registered task worker group associated with a specific TaskDef. */
    getTaskWorkerGroup(request: DeepPartial<TaskDefId>, options?: CallOptions & CallOptionsExt): Promise<TaskWorkerGroup>;
    /** Creates an ExternalEventDef. */
    putExternalEventDef(request: DeepPartial<PutExternalEventDefRequest>, options?: CallOptions & CallOptionsExt): Promise<ExternalEventDef>;
    /** Gets an ExternalEventDef. */
    getExternalEventDef(request: DeepPartial<ExternalEventDefId>, options?: CallOptions & CallOptionsExt): Promise<ExternalEventDef>;
    /** EXPERIMENTAL: Creates a WorkflowEventDef. */
    putWorkflowEventDef(request: DeepPartial<PutWorkflowEventDefRequest>, options?: CallOptions & CallOptionsExt): Promise<WorkflowEventDef>;
    /** Creates a WfSpec. */
    putWfSpec(request: DeepPartial<PutWfSpecRequest>, options?: CallOptions & CallOptionsExt): Promise<WfSpec>;
    /** Gets a WfSpec. */
    getWfSpec(request: DeepPartial<WfSpecId>, options?: CallOptions & CallOptionsExt): Promise<WfSpec>;
    /** Returns the latest WfSpec with a specified name (and optionally a specified Major Version). */
    getLatestWfSpec(request: DeepPartial<GetLatestWfSpecRequest>, options?: CallOptions & CallOptionsExt): Promise<WfSpec>;
    /**
     * EXPERIMENTAL: Migrates all WfRun's from one version of a WfSpec onto a newer version of the
     * same WfSpec. This is useful for long-running WfRun's (eg. a 60-day marketing campaign) where
     * you must update WfRun's that are in the RUNNING state rather than allowing them to run to
     * completion.
     *
     * As of 0.7.2, this feature is only partially implemented.
     */
    migrateWfSpec(request: DeepPartial<MigrateWfSpecRequest>, options?: CallOptions & CallOptionsExt): Promise<WfSpec>;
    /** Creates a UserTaskDef. */
    putUserTaskDef(request: DeepPartial<PutUserTaskDefRequest>, options?: CallOptions & CallOptionsExt): Promise<UserTaskDef>;
    /**
     * Gets a specific UserTaskDef.
     *
     * This RPC is highly useful for applications built around
     * User Tasks. For example, a UI that dynamically displays form fields based on the User Task
     * might first receive a UserTaskRun, then use that UserTaskRun to look up the UserTaskDef.
     * The frontend would inspect the UserTaskDef and display a form field on the browser page
     * for each field in the UserTaskDef.
     */
    getUserTaskDef(request: DeepPartial<UserTaskDefId>, options?: CallOptions & CallOptionsExt): Promise<UserTaskDef>;
    /** Returns the most recent UserTaskDef with a specific name. */
    getLatestUserTaskDef(request: DeepPartial<GetLatestUserTaskDefRequest>, options?: CallOptions & CallOptionsExt): Promise<UserTaskDef>;
    /** Runs a WfSpec to create a WfRun. */
    runWf(request: DeepPartial<RunWfRequest>, options?: CallOptions & CallOptionsExt): Promise<WfRun>;
    /**
     * Gets a WfRun. Although useful for development and debugging, this RPC is not often
     * used by applications.
     */
    getWfRun(request: DeepPartial<WfRunId>, options?: CallOptions & CallOptionsExt): Promise<WfRun>;
    /**
     * Loads a specific UserTaskRun. It includes information about to whom the UserTask is
     * currently assigned, history of assignments and reassignments, and any context for that
     * UserTaskRun which is specific to the WfRun.
     */
    getUserTaskRun(request: DeepPartial<UserTaskRunId>, options?: CallOptions & CallOptionsExt): Promise<UserTaskRun>;
    /**
     * Change the ownership of a UserTaskRun to a new userId, userGroup, or both. The
     * action will be reflected in your next call to SearchUserTaskRun. This RPC is useful for
     * applications that are using User Tasks to build an internal task-list and wish to
     * administer the tasks.
     */
    assignUserTaskRun(request: DeepPartial<AssignUserTaskRunRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
    /**
     * Completes a UserTaskRun. Includes the results of the UserTaskRun, the UserTaskRun Id, and
     * the userId of the user who completes the UserTaskRun. Results in the UserTask NodeRun being
     * completed, and unblocks the associated ThreadRun in the WfRun.
     *
     * This RPC is highly useful for applications built around a WfSpec that uses USER_TASK nodes.
     */
    completeUserTaskRun(request: DeepPartial<CompleteUserTaskRunRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
    /** Cancels a UserTaskRun. This will result in an EXCEPTION being propagated to the WfRun. */
    cancelUserTaskRun(request: DeepPartial<CancelUserTaskRunRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
    /**
     * Lists all UserTaskRun's for a specific WfRun. Can be useful when using a WfRun
     * to model an entity.
     */
    listUserTaskRuns(request: DeepPartial<ListUserTaskRunRequest>, options?: CallOptions & CallOptionsExt): Promise<UserTaskRunList>;
    /** Gets a specific NodeRun. */
    getNodeRun(request: DeepPartial<NodeRunId>, options?: CallOptions & CallOptionsExt): Promise<NodeRun>;
    /** Lists all NodeRun's for a specific WfRun. */
    listNodeRuns(request: DeepPartial<ListNodeRunsRequest>, options?: CallOptions & CallOptionsExt): Promise<NodeRunList>;
    /** Gets a specific TaskRun. */
    getTaskRun(request: DeepPartial<TaskRunId>, options?: CallOptions & CallOptionsExt): Promise<TaskRun>;
    /** Lists all TaskRun's for a specific WfRun. */
    listTaskRuns(request: DeepPartial<ListTaskRunsRequest>, options?: CallOptions & CallOptionsExt): Promise<TaskRunList>;
    /**
     * Get the value of a specific Variable. When using a WfRun to model an entity, this
     * RPC is useful for retrieving information. It is equivalent to looking up the value of a
     * column for a specific row in a SQL table.
     */
    getVariable(request: DeepPartial<VariableId>, options?: CallOptions & CallOptionsExt): Promise<Variable>;
    /** List all Variables from a WfRun. */
    listVariables(request: DeepPartial<ListVariablesRequest>, options?: CallOptions & CallOptionsExt): Promise<VariableList>;
    /** Post an ExternalEvent. This RPC is highly useful for */
    putExternalEvent(request: DeepPartial<PutExternalEventRequest>, options?: CallOptions & CallOptionsExt): Promise<ExternalEvent>;
    /** Get a specific ExternalEvent. */
    getExternalEvent(request: DeepPartial<ExternalEventId>, options?: CallOptions & CallOptionsExt): Promise<ExternalEvent>;
    /**
     * Waits for a WorkflowEvent to be thrown by a given WfRun. Returns immediately if a matching
     * WorkflowEvent has already been thrown; throws a DEADLINE_EXCEEDED error if the WorkflowEvent
     * is not thrown before the deadline specified by the client.
     *
     * To specify the deadline, the client should use GRPC deadlines.
     */
    awaitWorkflowEvent(request: DeepPartial<AwaitWorkflowEventRequest>, options?: CallOptions & CallOptionsExt): Promise<WorkflowEvent>;
    /** List ExternalEvent's for a specific WfRun. */
    listExternalEvents(request: DeepPartial<ListExternalEventsRequest>, options?: CallOptions & CallOptionsExt): Promise<ExternalEventList>;
    /**
     * Search for WfRun's. This RPC is highly useful for applications that store data
     * in LittleHorse and need to find a specific WfRun based on certain indexed fields.
     */
    searchWfRun(request: DeepPartial<SearchWfRunRequest>, options?: CallOptions & CallOptionsExt): Promise<WfRunIdList>;
    /**
     * Search for NodeRun's. This RPC is useful for monitoring and finding bugs in
     * your workflows or Task Workers.
     */
    searchNodeRun(request: DeepPartial<SearchNodeRunRequest>, options?: CallOptions & CallOptionsExt): Promise<NodeRunIdList>;
    /** Search for TaskRun's. This RPC is useful for finding bugs in your Task Workers. */
    searchTaskRun(request: DeepPartial<SearchTaskRunRequest>, options?: CallOptions & CallOptionsExt): Promise<TaskRunIdList>;
    /**
     * Search for UserTaskRun's. This RPC is highly useful for applications that connect
     * human end-users to LittleHorse: it enables you to find all tasks assigned to a specific
     * person or group of people.
     */
    searchUserTaskRun(request: DeepPartial<SearchUserTaskRunRequest>, options?: CallOptions & CallOptionsExt): Promise<UserTaskRunIdList>;
    /**
     * Search for Variable's. This RPC is highly useful for applications that store data
     * in LittleHorse and need to find a specific WfRun based on certain indexed fields.
     */
    searchVariable(request: DeepPartial<SearchVariableRequest>, options?: CallOptions & CallOptionsExt): Promise<VariableIdList>;
    /** Search for ExternalEvent's. */
    searchExternalEvent(request: DeepPartial<SearchExternalEventRequest>, options?: CallOptions & CallOptionsExt): Promise<ExternalEventIdList>;
    /** Search for TaskDef's. */
    searchTaskDef(request: DeepPartial<SearchTaskDefRequest>, options?: CallOptions & CallOptionsExt): Promise<TaskDefIdList>;
    /** Search for UserTaskDef's. */
    searchUserTaskDef(request: DeepPartial<SearchUserTaskDefRequest>, options?: CallOptions & CallOptionsExt): Promise<UserTaskDefIdList>;
    /** Search for WfSpec's. */
    searchWfSpec(request: DeepPartial<SearchWfSpecRequest>, options?: CallOptions & CallOptionsExt): Promise<WfSpecIdList>;
    /** Search for ExternalEventDef's. */
    searchExternalEventDef(request: DeepPartial<SearchExternalEventDefRequest>, options?: CallOptions & CallOptionsExt): Promise<ExternalEventDefIdList>;
    /** Search for all available TenantIds for current Principal */
    searchTenant(request: DeepPartial<SearchTenantRequest>, options?: CallOptions & CallOptionsExt): Promise<TenantIdList>;
    /**  */
    searchPrincipal(request: DeepPartial<SearchPrincipalRequest>, options?: CallOptions & CallOptionsExt): Promise<PrincipalIdList>;
    /**
     * Used by the Task Worker to:
     * 1. Tell the LH Server that the Task Worker has joined the Task Worker Group.
     * 2. Receive the assignemnt of LH Server's to poll from.
     * Generally, you won't use this request manually.
     */
    registerTaskWorker(request: DeepPartial<RegisterTaskWorkerRequest>, options?: CallOptions & CallOptionsExt): Promise<RegisterTaskWorkerResponse>;
    /**
     * Used by Task Workers to listen for TaskRuns on the Task Queue. Generally, you won't
     * use this RPC manually.
     */
    pollTask(request: AsyncIterable<DeepPartial<PollTaskRequest>>, options?: CallOptions & CallOptionsExt): AsyncIterable<PollTaskResponse>;
    /**
     * Used by Task Workers to report the result of a TaskRun. Generally, you won't use
     * this rpc manually.
     */
    reportTask(request: DeepPartial<ReportTaskRun>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
    /** Move a WfRun or a specific ThreadRun in that WfRun to the HALTED state. */
    stopWfRun(request: DeepPartial<StopWfRunRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
    /** Resumes a WfRun or a specific ThreadRun of a WfRun. */
    resumeWfRun(request: DeepPartial<ResumeWfRunRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
    /**
     * Rescues a failed ThreadRun (in the ERROR state only) by restarting it from
     * the point of failure. Useful if a bug in Task Worker implementation caused
     * a WfRun to fail and you did not have a FailureHandler for that NodeRun.
     *
     * The specified `ThreadRun` must be in a state where it's latest `NodeRun` is: <br/>
     * - In the `ERROR` state.<br/>
     * - Has no `FailureHandler` `ThreadRun`s <br/>
     * - The parent `ThreadRun`, or any parent of the parent, has not handled the `Failure`
     * yet.
     *
     * If that is not true, then the `ThreadRun` cannot be rescued and the request
     * will return `FAILED_PRECONDITION`.
     */
    rescueThreadRun(request: DeepPartial<RescueThreadRunRequest>, options?: CallOptions & CallOptionsExt): Promise<WfRun>;
    /** Deletes a WfRun. The WfRun cannot be in the RUNNING state. */
    deleteWfRun(request: DeepPartial<DeleteWfRunRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
    /** Deletes a TaskDef. */
    deleteTaskDef(request: DeepPartial<DeleteTaskDefRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
    /** Deletes a WfSpec. */
    deleteWfSpec(request: DeepPartial<DeleteWfSpecRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
    /** Deletes a UserTaskDef. */
    deleteUserTaskDef(request: DeepPartial<DeleteUserTaskDefRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
    /** Deletes an ExternalEventDef. */
    deleteExternalEventDef(request: DeepPartial<DeleteExternalEventDefRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
    /**
     * Deletes a `Principal`. Fails with `FAILED_PRECONDITION` if the specified `Principal`
     * is the last remaining `Principal` with admin permissions. Admin permissions are defined
     * as having the `global_acls` of `ALL_ACTIONS` over the `ACL_ALL_RESOURCES` scope.
     */
    deletePrincipal(request: DeepPartial<DeletePrincipalRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
    /** Returns TaskDef Metrics for a specific TaskDef and a specific time window. */
    getTaskDefMetricsWindow(request: DeepPartial<TaskDefMetricsQueryRequest>, options?: CallOptions & CallOptionsExt): Promise<TaskDefMetrics>;
    /** Returns WfSpec Metrics for a specific WfSpec and a specific time window. */
    getWfSpecMetricsWindow(request: DeepPartial<WfSpecMetricsQueryRequest>, options?: CallOptions & CallOptionsExt): Promise<WfSpecMetrics>;
    /** Returns a list of TaskDef Metrics Windows. */
    listTaskDefMetrics(request: DeepPartial<ListTaskMetricsRequest>, options?: CallOptions & CallOptionsExt): Promise<ListTaskMetricsResponse>;
    /** Returns a list of WfSpec Metrics Windows. */
    listWfSpecMetrics(request: DeepPartial<ListWfMetricsRequest>, options?: CallOptions & CallOptionsExt): Promise<ListWfMetricsResponse>;
    /** EXPERIMENTAL: Creates another Tenant in the LH Server. */
    putTenant(request: DeepPartial<PutTenantRequest>, options?: CallOptions & CallOptionsExt): Promise<Tenant>;
    /** EXPERIMENTAL: Gets a Tenant from the LH Server. */
    getTenant(request: DeepPartial<TenantId>, options?: CallOptions & CallOptionsExt): Promise<Tenant>;
    /** EXPERIMENTAL: Creates an Principal. */
    putPrincipal(request: DeepPartial<PutPrincipalRequest>, options?: CallOptions & CallOptionsExt): Promise<Principal>;
    /** Returns the Principal of the caller. */
    whoami(request: DeepPartial<Empty>, options?: CallOptions & CallOptionsExt): Promise<Principal>;
    /** Gets the version of the LH Server. */
    getServerVersion(request: DeepPartial<Empty>, options?: CallOptions & CallOptionsExt): Promise<ServerVersionResponse>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export type ServerStreamingMethodResult<Response> = {
    [Symbol.asyncIterator](): AsyncIterator<Response, void>;
};
export {};
//# sourceMappingURL=service.d.ts.map