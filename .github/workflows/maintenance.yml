name: System Maintenance

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      maintenance_type:
        description: 'Type of maintenance to run'
        required: true
        default: 'health-check'
        type: choice
        options:
        - health-check
        - database-maintenance
        - backup
        - performance-monitor
        - cleanup
        - full-maintenance

env:
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
  health-check:
    name: System Health Check
    runs-on: ubuntu-latest
    if: github.event.inputs.maintenance_type == 'health-check' || github.event.inputs.maintenance_type == 'full-maintenance' || github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup flyctl
      uses: superfly/flyctl-actions/setup-flyctl@master
    
    - name: Run health check
      id: health_check
      run: |
        echo "Running system health check..."
        ./deploy/maintenance.sh health > health_report.txt 2>&1
        
        # Check if all services are healthy
        if grep -q "All services are healthy" health_report.txt; then
          echo "health_status=healthy" >> $GITHUB_OUTPUT
        else
          echo "health_status=unhealthy" >> $GITHUB_OUTPUT
        fi
        
        cat health_report.txt
    
    - name: Upload health report
      uses: actions/upload-artifact@v4
      with:
        name: health-report-${{ github.run_number }}
        path: health_report.txt
    
    - name: Notify health status
      run: |
        if [ "${{ steps.health_check.outputs.health_status }}" = "healthy" ]; then
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"✅ Daily health check: All systems healthy"}' \
            ${{ secrets.SLACK_WEBHOOK_URL }} || true
        else
          REPORT=$(cat health_report.txt | head -20)
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"⚠️ Daily health check: Issues detected\\n\`\`\`\\n$REPORT\\n\`\`\`\"}" \
            ${{ secrets.SLACK_WEBHOOK_URL }} || true
        fi

  database-maintenance:
    name: Database Maintenance
    runs-on: ubuntu-latest
    if: github.event.inputs.maintenance_type == 'database-maintenance' || github.event.inputs.maintenance_type == 'full-maintenance'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup flyctl
      uses: superfly/flyctl-actions/setup-flyctl@master
    
    - name: Run database maintenance
      run: |
        echo "Running database maintenance..."
        ./deploy/maintenance.sh db-maintenance > db_maintenance_report.txt 2>&1
        cat db_maintenance_report.txt
    
    - name: Upload database maintenance report
      uses: actions/upload-artifact@v4
      with:
        name: db-maintenance-report-${{ github.run_number }}
        path: db_maintenance_report.txt
    
    - name: Notify database maintenance completion
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"🗄️ Database maintenance completed successfully"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }} || true

  backup:
    name: System Backup
    runs-on: ubuntu-latest
    if: github.event.inputs.maintenance_type == 'backup' || github.event.inputs.maintenance_type == 'full-maintenance' || github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup flyctl
      uses: superfly/flyctl-actions/setup-flyctl@master
    
    - name: Create system backup
      run: |
        echo "Creating system backup..."
        ./deploy/maintenance.sh backup full > backup_report.txt 2>&1
        cat backup_report.txt
    
    - name: Upload backup report
      uses: actions/upload-artifact@v4
      with:
        name: backup-report-${{ github.run_number }}
        path: |
          backup_report.txt
          backups/
    
    - name: Notify backup completion
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"💾 System backup completed successfully"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }} || true

  performance-monitor:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    if: github.event.inputs.maintenance_type == 'performance-monitor' || github.event.inputs.maintenance_type == 'full-maintenance'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup flyctl
      uses: superfly/flyctl-actions/setup-flyctl@master
    
    - name: Run performance monitoring
      run: |
        echo "Running performance monitoring..."
        ./deploy/maintenance.sh monitor 600 > performance_report.txt 2>&1
        cat performance_report.txt
    
    - name: Check auto-scaling status
      run: |
        echo "Checking auto-scaling status..."
        ./deploy/scaling-cli.js status >> performance_report.txt 2>&1 || true
        ./deploy/scaling-cli.js metrics >> performance_report.txt 2>&1 || true
    
    - name: Upload performance report
      uses: actions/upload-artifact@v4
      with:
        name: performance-report-${{ github.run_number }}
        path: |
          performance_report.txt
          monitoring/
    
    - name: Notify performance monitoring completion
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"📊 Performance monitoring completed"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }} || true

  cleanup:
    name: System Cleanup
    runs-on: ubuntu-latest
    if: github.event.inputs.maintenance_type == 'cleanup' || github.event.inputs.maintenance_type == 'full-maintenance' || github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup flyctl
      uses: superfly/flyctl-actions/setup-flyctl@master
    
    - name: Run system cleanup
      run: |
        echo "Running system cleanup..."
        ./deploy/maintenance.sh cleanup > cleanup_report.txt 2>&1
        cat cleanup_report.txt
    
    - name: Upload cleanup report
      uses: actions/upload-artifact@v4
      with:
        name: cleanup-report-${{ github.run_number }}
        path: cleanup_report.txt
    
    - name: Notify cleanup completion
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"🧹 System cleanup completed"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }} || true

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    if: github.event.inputs.maintenance_type == 'full-maintenance' || github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install dependencies
      run: |
        npm ci
        cd workers && npm ci
    
    - name: Run security audit
      run: |
        echo "Running security audit..."
        {
          echo "=== Main Application Security Audit ==="
          npm audit --audit-level moderate || true
          echo ""
          echo "=== Workers Security Audit ==="
          cd workers && npm audit --audit-level moderate || true
          echo ""
          echo "=== Outdated Dependencies ==="
          cd .. && npm outdated || true
          cd workers && npm outdated || true
        } > security_audit_report.txt 2>&1
        
        cat security_audit_report.txt
    
    - name: Upload security audit report
      uses: actions/upload-artifact@v4
      with:
        name: security-audit-report-${{ github.run_number }}
        path: security_audit_report.txt
    
    - name: Check for critical vulnerabilities
      run: |
        if grep -q "critical" security_audit_report.txt; then
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"🚨 CRITICAL: Security audit found critical vulnerabilities!"}' \
            ${{ secrets.SLACK_WEBHOOK_URL }} || true
        else
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"🔒 Security audit completed - no critical issues"}' \
            ${{ secrets.SLACK_WEBHOOK_URL }} || true
        fi

  scaling-analysis:
    name: Auto-scaling Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.maintenance_type == 'full-maintenance' || github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup flyctl
      uses: superfly/flyctl-actions/setup-flyctl@master
    
    - name: Run scaling analysis
      run: |
        echo "Running auto-scaling analysis..."
        {
          echo "=== Auto-scaling Status ==="
          ./deploy/scaling-cli.js status || true
          echo ""
          echo "=== Application Metrics ==="
          ./deploy/scaling-cli.js metrics || true
          echo ""
          echo "=== Scaling History ==="
          ./deploy/scaling-cli.js history --limit 20 || true
          echo ""
          echo "=== Manual Analysis ==="
          ./deploy/scaling-cli.js analyze || true
        } > scaling_analysis_report.txt 2>&1
        
        cat scaling_analysis_report.txt
    
    - name: Upload scaling analysis report
      uses: actions/upload-artifact@v4
      with:
        name: scaling-analysis-report-${{ github.run_number }}
        path: scaling_analysis_report.txt
    
    - name: Notify scaling analysis completion
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"📈 Auto-scaling analysis completed"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }} || true

  summary:
    name: Maintenance Summary
    runs-on: ubuntu-latest
    needs: [health-check, database-maintenance, backup, performance-monitor, cleanup, security-audit, scaling-analysis]
    if: always()
    
    steps:
    - name: Generate maintenance summary
      run: |
        echo "# Maintenance Summary" > maintenance_summary.md
        echo "- **Date**: $(date)" >> maintenance_summary.md
        echo "- **Trigger**: ${{ github.event_name }}" >> maintenance_summary.md
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "- **Type**: ${{ github.event.inputs.maintenance_type }}" >> maintenance_summary.md
        fi
        echo "" >> maintenance_summary.md
        echo "## Job Results" >> maintenance_summary.md
        echo "- Health Check: ${{ needs.health-check.result }}" >> maintenance_summary.md
        echo "- Database Maintenance: ${{ needs.database-maintenance.result }}" >> maintenance_summary.md
        echo "- Backup: ${{ needs.backup.result }}" >> maintenance_summary.md
        echo "- Performance Monitor: ${{ needs.performance-monitor.result }}" >> maintenance_summary.md
        echo "- Cleanup: ${{ needs.cleanup.result }}" >> maintenance_summary.md
        echo "- Security Audit: ${{ needs.security-audit.result }}" >> maintenance_summary.md
        echo "- Scaling Analysis: ${{ needs.scaling-analysis.result }}" >> maintenance_summary.md
        
        cat maintenance_summary.md
    
    - name: Upload maintenance summary
      uses: actions/upload-artifact@v4
      with:
        name: maintenance-summary-${{ github.run_number }}
        path: maintenance_summary.md
    
    - name: Send maintenance summary notification
      run: |
        SUMMARY=$(cat maintenance_summary.md)
        curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\"🔧 Maintenance Summary:\\n\`\`\`\\n$SUMMARY\\n\`\`\`\"}" \
          ${{ secrets.SLACK_WEBHOOK_URL }} || true