name: Deploy to Fly.io

on:
  push:
    branches: [main, production]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - staging
        - production
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean

env:
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    if: ${{ !github.event.inputs.skip_tests }}
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install worker dependencies
      run: |
        cd workers
        npm ci

    - name: Run linting
      run: |
        npm run lint || true
        cd workers && npm run lint || true

    - name: Run type checking
      run: |
        npm run typecheck || true
        cd workers && npm run typecheck || true

    - name: Run tests
      run: |
        npm test
        cd workers && npm test
      env:
        DATABASE_URL: postgres://test_user:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        NODE_ENV: test

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          coverage/
          workers/coverage/
          test-results.xml
          workers/test-results.xml

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run npm audit
      run: |
        npm audit --audit-level moderate || true
        cd workers && npm audit --audit-level moderate || true
    
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped') && needs.security-scan.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install worker dependencies
      run: |
        cd workers
        npm ci

    - name: Build main application
      run: npm run build

    - name: Build workers
      run: |
        cd workers
        npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          dist/
          workers/dist/
          package.json
          workers/package.json
        retention-days: 7

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts

    - name: Setup flyctl
      uses: superfly/flyctl-actions/setup-flyctl@master

    - name: Notify deployment start
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"🚀 Starting deployment to staging..."}' \
          ${{ secrets.SLACK_WEBHOOK_URL }} || true

    - name: Deploy to staging
      run: |
        export SKIP_TESTS=true
        export DRY_RUN=false
        ./deploy/deploy.sh staging
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

    - name: Run health checks
      run: |
        sleep 60  # Wait for services to start
        ./deploy/maintenance.sh health

    - name: Notify deployment success
      if: success()
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"✅ Staging deployment completed successfully!"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }} || true

    - name: Notify deployment failure
      if: failure()
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"❌ Staging deployment failed!"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }} || true

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/production' || github.event.inputs.environment == 'production'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts

    - name: Setup flyctl
      uses: superfly/flyctl-actions/setup-flyctl@master

    - name: Notify deployment start
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"🚀 Starting PRODUCTION deployment..."}' \
          ${{ secrets.SLACK_WEBHOOK_URL }} || true

    - name: Create backup before deployment
      run: |
        ./deploy/maintenance.sh backup production

    - name: Deploy to production
      run: |
        export SKIP_TESTS=true
        export DRY_RUN=false
        ./deploy/deploy.sh production
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

    - name: Run comprehensive health checks
      run: |
        sleep 120  # Wait longer for production services
        ./deploy/maintenance.sh health

    - name: Monitor deployment
      run: |
        ./deploy/maintenance.sh monitor 300

    - name: Notify deployment success
      if: success()
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"🎉 PRODUCTION deployment completed successfully!"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }} || true

    - name: Notify deployment failure and rollback
      if: failure()
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"❌ PRODUCTION deployment failed! Initiating rollback..."}' \
          ${{ secrets.SLACK_WEBHOOK_URL }} || true
        
        # Attempt rollback
        ./deploy/deploy.sh production --rollback || true
        
        curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"🔄 Rollback attempted. Please check system status."}' \
          ${{ secrets.SLACK_WEBHOOK_URL }} || true

  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: always() && needs.deploy-staging.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
    
    - name: Run performance tests
      run: |
        # Create basic performance test
        cat > performance-test.js << 'EOF'
        import http from 'k6/http';
        import { check, sleep } from 'k6';
        
        export let options = {
          stages: [
            { duration: '30s', target: 10 },
            { duration: '1m', target: 20 },
            { duration: '30s', target: 0 },
          ],
        };
        
        export default function() {
          let response = http.get('https://connexio-ai-littlehorse.fly.dev/health');
          check(response, {
            'status is 200': (r) => r.status === 200,
            'response time < 1000ms': (r) => r.timings.duration < 1000,
          });
          sleep(1);
        }
        EOF
        
        k6 run performance-test.js || true
    
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results
        path: performance-test.js

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production, performance-test]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup flyctl
      uses: superfly/flyctl-actions/setup-flyctl@master
      
    - name: Cleanup old releases
      run: |
        ./deploy/maintenance.sh cleanup
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  post-deployment:
    name: Post-Deployment Tasks
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success() && (github.ref == 'refs/heads/production' || github.event.inputs.environment == 'production')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup flyctl
      uses: superfly/flyctl-actions/setup-flyctl@master
    
    - name: Update auto-scaling configuration
      run: |
        # Check if auto-scaling service is healthy
        ./deploy/scaling-cli.js health
        
        # Update scaling configuration if needed
        ./deploy/scaling-cli.js analyze
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
    
    - name: Generate deployment report
      run: |
        echo "# Deployment Report" > deployment-report.md
        echo "- **Timestamp**: $(date)" >> deployment-report.md
        echo "- **Environment**: production" >> deployment-report.md
        echo "- **Commit**: ${{ github.sha }}" >> deployment-report.md
        echo "- **Branch**: ${{ github.ref_name }}" >> deployment-report.md
        echo "" >> deployment-report.md
        echo "## Service Status" >> deployment-report.md
        ./deploy/maintenance.sh status >> deployment-report.md 2>&1 || true
        echo "" >> deployment-report.md
        echo "## Auto-scaling Status" >> deployment-report.md
        ./deploy/scaling-cli.js status >> deployment-report.md 2>&1 || true
    
    - name: Upload deployment report
      uses: actions/upload-artifact@v4
      with:
        name: deployment-report
        path: deployment-report.md
    
    - name: Send deployment summary
      run: |
        REPORT_CONTENT=$(cat deployment-report.md | head -20)
        curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\"📊 Deployment Report:\\n\`\`\`\\n$REPORT_CONTENT\\n\`\`\`\"}" \
          ${{ secrets.SLACK_WEBHOOK_URL }} || true