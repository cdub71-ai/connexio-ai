import _m0 from "protobufjs/minimal";
import { MetricsWindowLength } from "./common_enums";
/** The ID of a WfSpec. */
export interface WfSpecId {
    /** Name of the WfSpec. */
    name: string;
    /**
     * Major Version of a WfSpec.
     *
     * Note that WfSpec's are versioned. Creating a new WfSpec with the same name
     * and no breaking changes to the public Variables API results in a new WfSpec
     * being created with the same MajorVersion and a new revision. Creating a
     * WfSpec with a breaking change to the public Variables API results in a
     * new WfSpec being created with the same name, an incremented major_version,
     * and revision = 0.
     */
    majorVersion: number;
    /**
     * Revision of a WfSpec.
     *
     * Note that WfSpec's are versioned. Creating a new WfSpec with the same name
     * and no breaking changes to the public Variables API results in a new WfSpec
     * being created with the same MajorVersion and a new revision. Creating a
     * WfSpec with a breaking change to the public Variables API results in a
     * new WfSpec being created with the same name, an incremented major_version,
     * and revision = 0.
     */
    revision: number;
}
/** ID for a TaskDef. */
export interface TaskDefId {
    /** TaskDef's are uniquely identified by their name. */
    name: string;
}
/** ID for ExternalEventDef */
export interface ExternalEventDefId {
    /** ExternalEventDef's are uniquedly identified by their name. */
    name: string;
}
/** ID for a UserTaskDef */
export interface UserTaskDefId {
    /** The name of a UserTaskDef */
    name: string;
    /** Note that UserTaskDef's use simple versioning. */
    version: number;
}
/** ID for a WorkflowEventDef. */
export interface WorkflowEventDefId {
    /** The name of the WorkflowEventDef */
    name: string;
}
/** ID for a TaskWorkerGroup. */
export interface TaskWorkerGroupId {
    /** TaskWorkerGroups are uniquely identified by their TaskDefId. */
    taskDefId: TaskDefId | undefined;
}
/** Id for a Variable. */
export interface VariableId {
    /**
     * WfRunId for the variable. Note that every Variable is associated with
     * a WfRun.
     */
    wfRunId: WfRunId | undefined;
    /**
     * Each Variable is owned by a specific ThreadRun inside the WfRun it belongs
     * to. This is that ThreadRun's number.
     */
    threadRunNumber: number;
    /** The name of the variable. */
    name: string;
}
/** ID for an ExternalEvent. */
export interface ExternalEventId {
    /**
     * WfRunId for the ExternalEvent. Note that every ExternalEvent is associated
     * with a WfRun.
     */
    wfRunId: WfRunId | undefined;
    /** The ExternalEventDef for this ExternalEvent. */
    externalEventDefId: ExternalEventDefId | undefined;
    /**
     * A unique guid allowing for distinguishing this ExternalEvent from other events
     * of the same ExternalEventDef and WfRun.
     */
    guid: string;
}
/** ID for a WfRun */
export interface WfRunId {
    /** The ID for this WfRun instance. */
    id: string;
    /** A WfRun may have a parent WfRun. If so, this field is set to the parent's ID. */
    parentWfRunId?: WfRunId | undefined;
}
/** ID for a NodeRun. */
export interface NodeRunId {
    /**
     * ID of the WfRun for this NodeRun. Note that every NodeRun is associated with
     * a WfRun.
     */
    wfRunId: WfRunId | undefined;
    /** ThreadRun of this NodeRun. Note that each NodeRun belongs to a ThreadRun. */
    threadRunNumber: number;
    /** Position of this NodeRun within its ThreadRun. */
    position: number;
}
/** An ID for a WorkflowEvent. */
export interface WorkflowEventId {
    /** The Id of the WfRun that threw the event. */
    wfRunId: WfRunId | undefined;
    /** The ID of the WorkflowEventDef that this WorkflowEvent is a member of. */
    workflowEventDefId: WorkflowEventDefId | undefined;
    /**
     * A sequence number that makes the WorkflowEventId unique among all WorkflowEvent's of the
     * same type thrown by the WfRun. This field starts at zero and is incremented every
     * time a WorkflowEvent of the same type is thrown by the same WfRun.
     */
    number: number;
}
/** ID for a TaskRun. */
export interface TaskRunId {
    /**
     * WfRunId for this TaskRun. Note that every TaskRun is associated with
     * a WfRun.
     */
    wfRunId: WfRunId | undefined;
    /** Unique identifier for this TaskRun. Unique among the WfRun. */
    taskGuid: string;
}
/** ID for a UserTaskRun */
export interface UserTaskRunId {
    /**
     * WfRunId for this UserTaskRun. Note that every UserTaskRun is associated
     * with a WfRun.
     */
    wfRunId: WfRunId | undefined;
    /** Unique identifier for this UserTaskRun. */
    userTaskGuid: string;
}
/** ID for a specific window of TaskDef metrics. */
export interface TaskDefMetricsId {
    /** The timestamp at which this metrics window starts. */
    windowStart: string | undefined;
    /** The length of this window. */
    windowType: MetricsWindowLength;
    /** The TaskDefId that this metrics window reports on. */
    taskDefId: TaskDefId | undefined;
}
/** ID for a specific window of WfSpec metrics. */
export interface WfSpecMetricsId {
    /** The timestamp at which this metrics window starts. */
    windowStart: string | undefined;
    /** The length of this window. */
    windowType: MetricsWindowLength;
    /** The WfSpecId that this metrics window reports on. */
    wfSpecId: WfSpecId | undefined;
}
/** ID for a Principal. */
export interface PrincipalId {
    /**
     * The id of this principal. In OAuth, this is the OAuth Client ID (for
     * machine principals) or the OAuth User Id (for human principals).
     */
    id: string;
}
/** ID for a Tenant. */
export interface TenantId {
    /** The Tenant ID. */
    id: string;
}
export declare const WfSpecId: {
    encode(message: WfSpecId, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WfSpecId;
    create(base?: DeepPartial<WfSpecId>): WfSpecId;
    fromPartial(object: DeepPartial<WfSpecId>): WfSpecId;
};
export declare const TaskDefId: {
    encode(message: TaskDefId, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TaskDefId;
    create(base?: DeepPartial<TaskDefId>): TaskDefId;
    fromPartial(object: DeepPartial<TaskDefId>): TaskDefId;
};
export declare const ExternalEventDefId: {
    encode(message: ExternalEventDefId, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ExternalEventDefId;
    create(base?: DeepPartial<ExternalEventDefId>): ExternalEventDefId;
    fromPartial(object: DeepPartial<ExternalEventDefId>): ExternalEventDefId;
};
export declare const UserTaskDefId: {
    encode(message: UserTaskDefId, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserTaskDefId;
    create(base?: DeepPartial<UserTaskDefId>): UserTaskDefId;
    fromPartial(object: DeepPartial<UserTaskDefId>): UserTaskDefId;
};
export declare const WorkflowEventDefId: {
    encode(message: WorkflowEventDefId, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WorkflowEventDefId;
    create(base?: DeepPartial<WorkflowEventDefId>): WorkflowEventDefId;
    fromPartial(object: DeepPartial<WorkflowEventDefId>): WorkflowEventDefId;
};
export declare const TaskWorkerGroupId: {
    encode(message: TaskWorkerGroupId, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TaskWorkerGroupId;
    create(base?: DeepPartial<TaskWorkerGroupId>): TaskWorkerGroupId;
    fromPartial(object: DeepPartial<TaskWorkerGroupId>): TaskWorkerGroupId;
};
export declare const VariableId: {
    encode(message: VariableId, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): VariableId;
    create(base?: DeepPartial<VariableId>): VariableId;
    fromPartial(object: DeepPartial<VariableId>): VariableId;
};
export declare const ExternalEventId: {
    encode(message: ExternalEventId, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ExternalEventId;
    create(base?: DeepPartial<ExternalEventId>): ExternalEventId;
    fromPartial(object: DeepPartial<ExternalEventId>): ExternalEventId;
};
export declare const WfRunId: {
    encode(message: WfRunId, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WfRunId;
    create(base?: DeepPartial<WfRunId>): WfRunId;
    fromPartial(object: DeepPartial<WfRunId>): WfRunId;
};
export declare const NodeRunId: {
    encode(message: NodeRunId, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): NodeRunId;
    create(base?: DeepPartial<NodeRunId>): NodeRunId;
    fromPartial(object: DeepPartial<NodeRunId>): NodeRunId;
};
export declare const WorkflowEventId: {
    encode(message: WorkflowEventId, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WorkflowEventId;
    create(base?: DeepPartial<WorkflowEventId>): WorkflowEventId;
    fromPartial(object: DeepPartial<WorkflowEventId>): WorkflowEventId;
};
export declare const TaskRunId: {
    encode(message: TaskRunId, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TaskRunId;
    create(base?: DeepPartial<TaskRunId>): TaskRunId;
    fromPartial(object: DeepPartial<TaskRunId>): TaskRunId;
};
export declare const UserTaskRunId: {
    encode(message: UserTaskRunId, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserTaskRunId;
    create(base?: DeepPartial<UserTaskRunId>): UserTaskRunId;
    fromPartial(object: DeepPartial<UserTaskRunId>): UserTaskRunId;
};
export declare const TaskDefMetricsId: {
    encode(message: TaskDefMetricsId, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TaskDefMetricsId;
    create(base?: DeepPartial<TaskDefMetricsId>): TaskDefMetricsId;
    fromPartial(object: DeepPartial<TaskDefMetricsId>): TaskDefMetricsId;
};
export declare const WfSpecMetricsId: {
    encode(message: WfSpecMetricsId, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WfSpecMetricsId;
    create(base?: DeepPartial<WfSpecMetricsId>): WfSpecMetricsId;
    fromPartial(object: DeepPartial<WfSpecMetricsId>): WfSpecMetricsId;
};
export declare const PrincipalId: {
    encode(message: PrincipalId, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PrincipalId;
    create(base?: DeepPartial<PrincipalId>): PrincipalId;
    fromPartial(object: DeepPartial<PrincipalId>): PrincipalId;
};
export declare const TenantId: {
    encode(message: TenantId, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TenantId;
    create(base?: DeepPartial<TenantId>): TenantId;
    fromPartial(object: DeepPartial<TenantId>): TenantId;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=object_id.d.ts.map