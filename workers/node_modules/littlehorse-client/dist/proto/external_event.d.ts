import _m0 from "protobufjs/minimal";
import { ExternalEventDefId, ExternalEventId } from "./object_id";
import { VariableValue } from "./variable";
/**
 * An ExternalEvent represents A Thing That Happened outside the context of a WfRun.
 * Generally, an ExternalEvent is used to represent a document getting signed, an incident
 * being resolved, an order being fulfilled, etc.
 *
 * ExternalEvent's are created via the 'rpc PutExternalEvent'
 *
 * For more context on ExternalEvents, check our documentation here:
 * https://littlehorse.dev/docs/concepts/external-events
 */
export interface ExternalEvent {
    /**
     * The ID of the ExternalEvent. This contains WfRunId, ExternalEventDefId,
     * and a unique guid which can be used for idempotency of the `PutExternalEvent`
     * rpc call.
     */
    id: ExternalEventId | undefined;
    /** The time the ExternalEvent was registered with LittleHorse. */
    createdAt: string | undefined;
    /** The payload of this ExternalEvent. */
    content: VariableValue | undefined;
    /**
     * If the ExternalEvent was claimed by a specific ThreadRun (via Interrupt or
     * EXTERNAL_EVENT Node), this is set to the number of the relevant ThreadRun.
     */
    threadRunNumber?: number | undefined;
    /**
     * If the ExternalEvent was claimed by a specific ThreadRun (via EXTERNAL_EVENT
     * Node; note that in the case of an Interrupt the node_run_position will never
     * be set), this is set to the number of the relevant NodeRun.
     */
    nodeRunPosition?: number | undefined;
    /** Whether the ExternalEvent has been claimed by a WfRun. */
    claimed: boolean;
}
/** The ExternalEventDef defines the blueprint for an ExternalEvent. */
export interface ExternalEventDef {
    /** The id of the ExternalEventDef. */
    id: ExternalEventDefId | undefined;
    /** When the ExternalEventDef was created. */
    createdAt: string | undefined;
    /**
     * The retention policy for ExternalEvent's of this ExternalEventDef. This applies to the
     * ExternalEvent **only before** it is matched with a WfRun.
     */
    retentionPolicy: ExternalEventRetentionPolicy | undefined;
}
/**
 * Policy to determine how long an ExternalEvent is retained after creation if it
 * is not yet claimed by a WfRun. Note that once a WfRun has been matched with the
 * ExternalEvent, the ExternalEvent is deleted if/when that WfRun is deleted.
 * If not set, then ExternalEvent's are not deleted if they are not matched with
 * a WfRun.
 *
 * A future version of LittleHorse will allow changing the retention_policy, which
 * will trigger a cleanup of old `ExternalEvent`s.
 */
export interface ExternalEventRetentionPolicy {
    /**
     * Delete such an ExternalEvent X seconds after it has been registered if it
     * has not yet been claimed by a WfRun.
     */
    secondsAfterPut?: number | undefined;
}
export declare const ExternalEvent: {
    encode(message: ExternalEvent, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ExternalEvent;
    create(base?: DeepPartial<ExternalEvent>): ExternalEvent;
    fromPartial(object: DeepPartial<ExternalEvent>): ExternalEvent;
};
export declare const ExternalEventDef: {
    encode(message: ExternalEventDef, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ExternalEventDef;
    create(base?: DeepPartial<ExternalEventDef>): ExternalEventDef;
    fromPartial(object: DeepPartial<ExternalEventDef>): ExternalEventDef;
};
export declare const ExternalEventRetentionPolicy: {
    encode(message: ExternalEventRetentionPolicy, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ExternalEventRetentionPolicy;
    create(base?: DeepPartial<ExternalEventRetentionPolicy>): ExternalEventRetentionPolicy;
    fromPartial(object: DeepPartial<ExternalEventRetentionPolicy>): ExternalEventRetentionPolicy;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=external_event.d.ts.map