"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               v4.23.4
// source: user_tasks.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserTaskEvent_UTEAssigned = exports.UserTaskEvent_UTETaskExecuted = exports.UserTaskEvent_UTECancelled = exports.UserTaskEvent = exports.UserTaskTriggerReference = exports.CancelUserTaskRunRequest = exports.CompleteUserTaskRunRequest_ResultsEntry = exports.CompleteUserTaskRunRequest = exports.AssignUserTaskRunRequest = exports.UserTaskRun_ResultsEntry = exports.UserTaskRun = exports.UserTaskField = exports.UserTaskDef = exports.userTaskRunStatusToNumber = exports.userTaskRunStatusFromJSON = exports.UserTaskRunStatus = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const common_enums_1 = require("./common_enums");
const timestamp_1 = require("./google/protobuf/timestamp");
const object_id_1 = require("./object_id");
const variable_1 = require("./variable");
/** The status that a UserTaskRun can be in. */
var UserTaskRunStatus;
(function (UserTaskRunStatus) {
    /** UNASSIGNED - Not assigned to a specific user yet. */
    UserTaskRunStatus["UNASSIGNED"] = "UNASSIGNED";
    /** ASSIGNED - Assigned to a specific user, but not completed or cancelled yet. */
    UserTaskRunStatus["ASSIGNED"] = "ASSIGNED";
    /** DONE - Done. */
    UserTaskRunStatus["DONE"] = "DONE";
    /** CANCELLED - Cancelled. */
    UserTaskRunStatus["CANCELLED"] = "CANCELLED";
    UserTaskRunStatus["UNRECOGNIZED"] = "UNRECOGNIZED";
})(UserTaskRunStatus || (exports.UserTaskRunStatus = UserTaskRunStatus = {}));
function userTaskRunStatusFromJSON(object) {
    switch (object) {
        case 0:
        case "UNASSIGNED":
            return UserTaskRunStatus.UNASSIGNED;
        case 1:
        case "ASSIGNED":
            return UserTaskRunStatus.ASSIGNED;
        case 3:
        case "DONE":
            return UserTaskRunStatus.DONE;
        case 4:
        case "CANCELLED":
            return UserTaskRunStatus.CANCELLED;
        case -1:
        case "UNRECOGNIZED":
        default:
            return UserTaskRunStatus.UNRECOGNIZED;
    }
}
exports.userTaskRunStatusFromJSON = userTaskRunStatusFromJSON;
function userTaskRunStatusToNumber(object) {
    switch (object) {
        case UserTaskRunStatus.UNASSIGNED:
            return 0;
        case UserTaskRunStatus.ASSIGNED:
            return 1;
        case UserTaskRunStatus.DONE:
            return 3;
        case UserTaskRunStatus.CANCELLED:
            return 4;
        case UserTaskRunStatus.UNRECOGNIZED:
        default:
            return -1;
    }
}
exports.userTaskRunStatusToNumber = userTaskRunStatusToNumber;
function createBaseUserTaskDef() {
    return { name: "", version: 0, description: undefined, fields: [], createdAt: undefined };
}
exports.UserTaskDef = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.version !== 0) {
            writer.uint32(16).int32(message.version);
        }
        if (message.description !== undefined) {
            writer.uint32(26).string(message.description);
        }
        for (const v of message.fields) {
            exports.UserTaskField.encode(v, writer.uint32(34).fork()).ldelim();
        }
        if (message.createdAt !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserTaskDef();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.version = reader.int32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.fields.push(exports.UserTaskField.decode(reader, reader.uint32()));
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.createdAt = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.UserTaskDef.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseUserTaskDef();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.version = (_b = object.version) !== null && _b !== void 0 ? _b : 0;
        message.description = (_c = object.description) !== null && _c !== void 0 ? _c : undefined;
        message.fields = ((_d = object.fields) === null || _d === void 0 ? void 0 : _d.map((e) => exports.UserTaskField.fromPartial(e))) || [];
        message.createdAt = (_e = object.createdAt) !== null && _e !== void 0 ? _e : undefined;
        return message;
    },
};
function createBaseUserTaskField() {
    return { name: "", type: common_enums_1.VariableType.JSON_OBJ, description: undefined, displayName: "", required: false };
}
exports.UserTaskField = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.type !== common_enums_1.VariableType.JSON_OBJ) {
            writer.uint32(16).int32((0, common_enums_1.variableTypeToNumber)(message.type));
        }
        if (message.description !== undefined) {
            writer.uint32(26).string(message.description);
        }
        if (message.displayName !== "") {
            writer.uint32(34).string(message.displayName);
        }
        if (message.required !== false) {
            writer.uint32(40).bool(message.required);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserTaskField();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.type = (0, common_enums_1.variableTypeFromJSON)(reader.int32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.displayName = reader.string();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.required = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.UserTaskField.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseUserTaskField();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.type = (_b = object.type) !== null && _b !== void 0 ? _b : common_enums_1.VariableType.JSON_OBJ;
        message.description = (_c = object.description) !== null && _c !== void 0 ? _c : undefined;
        message.displayName = (_d = object.displayName) !== null && _d !== void 0 ? _d : "";
        message.required = (_e = object.required) !== null && _e !== void 0 ? _e : false;
        return message;
    },
};
function createBaseUserTaskRun() {
    return {
        id: undefined,
        userTaskDefId: undefined,
        userGroup: undefined,
        userId: undefined,
        results: {},
        status: UserTaskRunStatus.UNASSIGNED,
        events: [],
        notes: undefined,
        scheduledTime: undefined,
        nodeRunId: undefined,
        epoch: 0,
    };
}
exports.UserTaskRun = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== undefined) {
            object_id_1.UserTaskRunId.encode(message.id, writer.uint32(10).fork()).ldelim();
        }
        if (message.userTaskDefId !== undefined) {
            object_id_1.UserTaskDefId.encode(message.userTaskDefId, writer.uint32(18).fork()).ldelim();
        }
        if (message.userGroup !== undefined) {
            writer.uint32(26).string(message.userGroup);
        }
        if (message.userId !== undefined) {
            writer.uint32(34).string(message.userId);
        }
        Object.entries(message.results).forEach(([key, value]) => {
            exports.UserTaskRun_ResultsEntry.encode({ key: key, value }, writer.uint32(50).fork()).ldelim();
        });
        if (message.status !== UserTaskRunStatus.UNASSIGNED) {
            writer.uint32(56).int32(userTaskRunStatusToNumber(message.status));
        }
        for (const v of message.events) {
            exports.UserTaskEvent.encode(v, writer.uint32(66).fork()).ldelim();
        }
        if (message.notes !== undefined) {
            writer.uint32(74).string(message.notes);
        }
        if (message.scheduledTime !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.scheduledTime), writer.uint32(82).fork()).ldelim();
        }
        if (message.nodeRunId !== undefined) {
            object_id_1.NodeRunId.encode(message.nodeRunId, writer.uint32(90).fork()).ldelim();
        }
        if (message.epoch !== 0) {
            writer.uint32(96).int32(message.epoch);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserTaskRun();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = object_id_1.UserTaskRunId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.userTaskDefId = object_id_1.UserTaskDefId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.userGroup = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    const entry6 = exports.UserTaskRun_ResultsEntry.decode(reader, reader.uint32());
                    if (entry6.value !== undefined) {
                        message.results[entry6.key] = entry6.value;
                    }
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.status = userTaskRunStatusFromJSON(reader.int32());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.events.push(exports.UserTaskEvent.decode(reader, reader.uint32()));
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.notes = reader.string();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.scheduledTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.nodeRunId = object_id_1.NodeRunId.decode(reader, reader.uint32());
                    continue;
                case 12:
                    if (tag !== 96) {
                        break;
                    }
                    message.epoch = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.UserTaskRun.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseUserTaskRun();
        message.id = (object.id !== undefined && object.id !== null) ? object_id_1.UserTaskRunId.fromPartial(object.id) : undefined;
        message.userTaskDefId = (object.userTaskDefId !== undefined && object.userTaskDefId !== null)
            ? object_id_1.UserTaskDefId.fromPartial(object.userTaskDefId)
            : undefined;
        message.userGroup = (_a = object.userGroup) !== null && _a !== void 0 ? _a : undefined;
        message.userId = (_b = object.userId) !== null && _b !== void 0 ? _b : undefined;
        message.results = Object.entries((_c = object.results) !== null && _c !== void 0 ? _c : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = variable_1.VariableValue.fromPartial(value);
            }
            return acc;
        }, {});
        message.status = (_d = object.status) !== null && _d !== void 0 ? _d : UserTaskRunStatus.UNASSIGNED;
        message.events = ((_e = object.events) === null || _e === void 0 ? void 0 : _e.map((e) => exports.UserTaskEvent.fromPartial(e))) || [];
        message.notes = (_f = object.notes) !== null && _f !== void 0 ? _f : undefined;
        message.scheduledTime = (_g = object.scheduledTime) !== null && _g !== void 0 ? _g : undefined;
        message.nodeRunId = (object.nodeRunId !== undefined && object.nodeRunId !== null)
            ? object_id_1.NodeRunId.fromPartial(object.nodeRunId)
            : undefined;
        message.epoch = (_h = object.epoch) !== null && _h !== void 0 ? _h : 0;
        return message;
    },
};
function createBaseUserTaskRun_ResultsEntry() {
    return { key: "", value: undefined };
}
exports.UserTaskRun_ResultsEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            variable_1.VariableValue.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserTaskRun_ResultsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = variable_1.VariableValue.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.UserTaskRun_ResultsEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseUserTaskRun_ResultsEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (object.value !== undefined && object.value !== null)
            ? variable_1.VariableValue.fromPartial(object.value)
            : undefined;
        return message;
    },
};
function createBaseAssignUserTaskRunRequest() {
    return { userTaskRunId: undefined, overrideClaim: false, userGroup: undefined, userId: undefined };
}
exports.AssignUserTaskRunRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.userTaskRunId !== undefined) {
            object_id_1.UserTaskRunId.encode(message.userTaskRunId, writer.uint32(10).fork()).ldelim();
        }
        if (message.overrideClaim !== false) {
            writer.uint32(16).bool(message.overrideClaim);
        }
        if (message.userGroup !== undefined) {
            writer.uint32(26).string(message.userGroup);
        }
        if (message.userId !== undefined) {
            writer.uint32(34).string(message.userId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAssignUserTaskRunRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.userTaskRunId = object_id_1.UserTaskRunId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.overrideClaim = reader.bool();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.userGroup = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.AssignUserTaskRunRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseAssignUserTaskRunRequest();
        message.userTaskRunId = (object.userTaskRunId !== undefined && object.userTaskRunId !== null)
            ? object_id_1.UserTaskRunId.fromPartial(object.userTaskRunId)
            : undefined;
        message.overrideClaim = (_a = object.overrideClaim) !== null && _a !== void 0 ? _a : false;
        message.userGroup = (_b = object.userGroup) !== null && _b !== void 0 ? _b : undefined;
        message.userId = (_c = object.userId) !== null && _c !== void 0 ? _c : undefined;
        return message;
    },
};
function createBaseCompleteUserTaskRunRequest() {
    return { userTaskRunId: undefined, results: {}, userId: "" };
}
exports.CompleteUserTaskRunRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.userTaskRunId !== undefined) {
            object_id_1.UserTaskRunId.encode(message.userTaskRunId, writer.uint32(10).fork()).ldelim();
        }
        Object.entries(message.results).forEach(([key, value]) => {
            exports.CompleteUserTaskRunRequest_ResultsEntry.encode({ key: key, value }, writer.uint32(18).fork()).ldelim();
        });
        if (message.userId !== "") {
            writer.uint32(26).string(message.userId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCompleteUserTaskRunRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.userTaskRunId = object_id_1.UserTaskRunId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    const entry2 = exports.CompleteUserTaskRunRequest_ResultsEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.results[entry2.key] = entry2.value;
                    }
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.CompleteUserTaskRunRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseCompleteUserTaskRunRequest();
        message.userTaskRunId = (object.userTaskRunId !== undefined && object.userTaskRunId !== null)
            ? object_id_1.UserTaskRunId.fromPartial(object.userTaskRunId)
            : undefined;
        message.results = Object.entries((_a = object.results) !== null && _a !== void 0 ? _a : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = variable_1.VariableValue.fromPartial(value);
            }
            return acc;
        }, {});
        message.userId = (_b = object.userId) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseCompleteUserTaskRunRequest_ResultsEntry() {
    return { key: "", value: undefined };
}
exports.CompleteUserTaskRunRequest_ResultsEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            variable_1.VariableValue.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCompleteUserTaskRunRequest_ResultsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = variable_1.VariableValue.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.CompleteUserTaskRunRequest_ResultsEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseCompleteUserTaskRunRequest_ResultsEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (object.value !== undefined && object.value !== null)
            ? variable_1.VariableValue.fromPartial(object.value)
            : undefined;
        return message;
    },
};
function createBaseCancelUserTaskRunRequest() {
    return { userTaskRunId: undefined };
}
exports.CancelUserTaskRunRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.userTaskRunId !== undefined) {
            object_id_1.UserTaskRunId.encode(message.userTaskRunId, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCancelUserTaskRunRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.userTaskRunId = object_id_1.UserTaskRunId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.CancelUserTaskRunRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseCancelUserTaskRunRequest();
        message.userTaskRunId = (object.userTaskRunId !== undefined && object.userTaskRunId !== null)
            ? object_id_1.UserTaskRunId.fromPartial(object.userTaskRunId)
            : undefined;
        return message;
    },
};
function createBaseUserTaskTriggerReference() {
    return { nodeRunId: undefined, userTaskEventNumber: 0, userId: undefined, userGroup: undefined };
}
exports.UserTaskTriggerReference = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.nodeRunId !== undefined) {
            object_id_1.NodeRunId.encode(message.nodeRunId, writer.uint32(10).fork()).ldelim();
        }
        if (message.userTaskEventNumber !== 0) {
            writer.uint32(16).int32(message.userTaskEventNumber);
        }
        if (message.userId !== undefined) {
            writer.uint32(26).string(message.userId);
        }
        if (message.userGroup !== undefined) {
            writer.uint32(34).string(message.userGroup);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserTaskTriggerReference();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.nodeRunId = object_id_1.NodeRunId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.userTaskEventNumber = reader.int32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.userGroup = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.UserTaskTriggerReference.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseUserTaskTriggerReference();
        message.nodeRunId = (object.nodeRunId !== undefined && object.nodeRunId !== null)
            ? object_id_1.NodeRunId.fromPartial(object.nodeRunId)
            : undefined;
        message.userTaskEventNumber = (_a = object.userTaskEventNumber) !== null && _a !== void 0 ? _a : 0;
        message.userId = (_b = object.userId) !== null && _b !== void 0 ? _b : undefined;
        message.userGroup = (_c = object.userGroup) !== null && _c !== void 0 ? _c : undefined;
        return message;
    },
};
function createBaseUserTaskEvent() {
    return { time: undefined, taskExecuted: undefined, assigned: undefined, cancelled: undefined };
}
exports.UserTaskEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.time !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.time), writer.uint32(10).fork()).ldelim();
        }
        if (message.taskExecuted !== undefined) {
            exports.UserTaskEvent_UTETaskExecuted.encode(message.taskExecuted, writer.uint32(18).fork()).ldelim();
        }
        if (message.assigned !== undefined) {
            exports.UserTaskEvent_UTEAssigned.encode(message.assigned, writer.uint32(26).fork()).ldelim();
        }
        if (message.cancelled !== undefined) {
            exports.UserTaskEvent_UTECancelled.encode(message.cancelled, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserTaskEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.taskExecuted = exports.UserTaskEvent_UTETaskExecuted.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.assigned = exports.UserTaskEvent_UTEAssigned.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.cancelled = exports.UserTaskEvent_UTECancelled.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.UserTaskEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseUserTaskEvent();
        message.time = (_a = object.time) !== null && _a !== void 0 ? _a : undefined;
        message.taskExecuted = (object.taskExecuted !== undefined && object.taskExecuted !== null)
            ? exports.UserTaskEvent_UTETaskExecuted.fromPartial(object.taskExecuted)
            : undefined;
        message.assigned = (object.assigned !== undefined && object.assigned !== null)
            ? exports.UserTaskEvent_UTEAssigned.fromPartial(object.assigned)
            : undefined;
        message.cancelled = (object.cancelled !== undefined && object.cancelled !== null)
            ? exports.UserTaskEvent_UTECancelled.fromPartial(object.cancelled)
            : undefined;
        return message;
    },
};
function createBaseUserTaskEvent_UTECancelled() {
    return { message: "" };
}
exports.UserTaskEvent_UTECancelled = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.message !== "") {
            writer.uint32(10).string(message.message);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserTaskEvent_UTECancelled();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.UserTaskEvent_UTECancelled.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseUserTaskEvent_UTECancelled();
        message.message = (_a = object.message) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseUserTaskEvent_UTETaskExecuted() {
    return { taskRun: undefined };
}
exports.UserTaskEvent_UTETaskExecuted = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.taskRun !== undefined) {
            object_id_1.TaskRunId.encode(message.taskRun, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserTaskEvent_UTETaskExecuted();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.taskRun = object_id_1.TaskRunId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.UserTaskEvent_UTETaskExecuted.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseUserTaskEvent_UTETaskExecuted();
        message.taskRun = (object.taskRun !== undefined && object.taskRun !== null)
            ? object_id_1.TaskRunId.fromPartial(object.taskRun)
            : undefined;
        return message;
    },
};
function createBaseUserTaskEvent_UTEAssigned() {
    return { oldUserId: undefined, oldUserGroup: undefined, newUserId: undefined, newUserGroup: undefined };
}
exports.UserTaskEvent_UTEAssigned = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.oldUserId !== undefined) {
            writer.uint32(10).string(message.oldUserId);
        }
        if (message.oldUserGroup !== undefined) {
            writer.uint32(18).string(message.oldUserGroup);
        }
        if (message.newUserId !== undefined) {
            writer.uint32(26).string(message.newUserId);
        }
        if (message.newUserGroup !== undefined) {
            writer.uint32(34).string(message.newUserGroup);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserTaskEvent_UTEAssigned();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.oldUserId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.oldUserGroup = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.newUserId = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.newUserGroup = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.UserTaskEvent_UTEAssigned.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseUserTaskEvent_UTEAssigned();
        message.oldUserId = (_a = object.oldUserId) !== null && _a !== void 0 ? _a : undefined;
        message.oldUserGroup = (_b = object.oldUserGroup) !== null && _b !== void 0 ? _b : undefined;
        message.newUserId = (_c = object.newUserId) !== null && _c !== void 0 ? _c : undefined;
        message.newUserGroup = (_d = object.newUserGroup) !== null && _d !== void 0 ? _d : undefined;
        return message;
    },
};
function toTimestamp(dateStr) {
    const date = new globalThis.Date(dateStr);
    const seconds = Math.trunc(date.getTime() / 1000);
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis).toISOString();
}
//# sourceMappingURL=user_tasks.js.map