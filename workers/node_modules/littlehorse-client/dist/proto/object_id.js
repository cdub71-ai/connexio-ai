"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               v4.23.4
// source: object_id.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TenantId = exports.PrincipalId = exports.WfSpecMetricsId = exports.TaskDefMetricsId = exports.UserTaskRunId = exports.TaskRunId = exports.WorkflowEventId = exports.NodeRunId = exports.WfRunId = exports.ExternalEventId = exports.VariableId = exports.TaskWorkerGroupId = exports.WorkflowEventDefId = exports.UserTaskDefId = exports.ExternalEventDefId = exports.TaskDefId = exports.WfSpecId = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const common_enums_1 = require("./common_enums");
const timestamp_1 = require("./google/protobuf/timestamp");
function createBaseWfSpecId() {
    return { name: "", majorVersion: 0, revision: 0 };
}
exports.WfSpecId = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.majorVersion !== 0) {
            writer.uint32(16).int32(message.majorVersion);
        }
        if (message.revision !== 0) {
            writer.uint32(24).int32(message.revision);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWfSpecId();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.majorVersion = reader.int32();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.revision = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.WfSpecId.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseWfSpecId();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.majorVersion = (_b = object.majorVersion) !== null && _b !== void 0 ? _b : 0;
        message.revision = (_c = object.revision) !== null && _c !== void 0 ? _c : 0;
        return message;
    },
};
function createBaseTaskDefId() {
    return { name: "" };
}
exports.TaskDefId = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTaskDefId();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.TaskDefId.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseTaskDefId();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseExternalEventDefId() {
    return { name: "" };
}
exports.ExternalEventDefId = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExternalEventDefId();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.ExternalEventDefId.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseExternalEventDefId();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseUserTaskDefId() {
    return { name: "", version: 0 };
}
exports.UserTaskDefId = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.version !== 0) {
            writer.uint32(16).int32(message.version);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserTaskDefId();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.version = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.UserTaskDefId.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseUserTaskDefId();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.version = (_b = object.version) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseWorkflowEventDefId() {
    return { name: "" };
}
exports.WorkflowEventDefId = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWorkflowEventDefId();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.WorkflowEventDefId.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseWorkflowEventDefId();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseTaskWorkerGroupId() {
    return { taskDefId: undefined };
}
exports.TaskWorkerGroupId = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.taskDefId !== undefined) {
            exports.TaskDefId.encode(message.taskDefId, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTaskWorkerGroupId();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.taskDefId = exports.TaskDefId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.TaskWorkerGroupId.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseTaskWorkerGroupId();
        message.taskDefId = (object.taskDefId !== undefined && object.taskDefId !== null)
            ? exports.TaskDefId.fromPartial(object.taskDefId)
            : undefined;
        return message;
    },
};
function createBaseVariableId() {
    return { wfRunId: undefined, threadRunNumber: 0, name: "" };
}
exports.VariableId = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.wfRunId !== undefined) {
            exports.WfRunId.encode(message.wfRunId, writer.uint32(10).fork()).ldelim();
        }
        if (message.threadRunNumber !== 0) {
            writer.uint32(16).int32(message.threadRunNumber);
        }
        if (message.name !== "") {
            writer.uint32(26).string(message.name);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVariableId();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.wfRunId = exports.WfRunId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.threadRunNumber = reader.int32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.VariableId.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseVariableId();
        message.wfRunId = (object.wfRunId !== undefined && object.wfRunId !== null)
            ? exports.WfRunId.fromPartial(object.wfRunId)
            : undefined;
        message.threadRunNumber = (_a = object.threadRunNumber) !== null && _a !== void 0 ? _a : 0;
        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseExternalEventId() {
    return { wfRunId: undefined, externalEventDefId: undefined, guid: "" };
}
exports.ExternalEventId = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.wfRunId !== undefined) {
            exports.WfRunId.encode(message.wfRunId, writer.uint32(10).fork()).ldelim();
        }
        if (message.externalEventDefId !== undefined) {
            exports.ExternalEventDefId.encode(message.externalEventDefId, writer.uint32(18).fork()).ldelim();
        }
        if (message.guid !== "") {
            writer.uint32(26).string(message.guid);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExternalEventId();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.wfRunId = exports.WfRunId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.externalEventDefId = exports.ExternalEventDefId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.guid = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.ExternalEventId.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseExternalEventId();
        message.wfRunId = (object.wfRunId !== undefined && object.wfRunId !== null)
            ? exports.WfRunId.fromPartial(object.wfRunId)
            : undefined;
        message.externalEventDefId = (object.externalEventDefId !== undefined && object.externalEventDefId !== null)
            ? exports.ExternalEventDefId.fromPartial(object.externalEventDefId)
            : undefined;
        message.guid = (_a = object.guid) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseWfRunId() {
    return { id: "", parentWfRunId: undefined };
}
exports.WfRunId = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.parentWfRunId !== undefined) {
            exports.WfRunId.encode(message.parentWfRunId, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWfRunId();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.parentWfRunId = exports.WfRunId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.WfRunId.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseWfRunId();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.parentWfRunId = (object.parentWfRunId !== undefined && object.parentWfRunId !== null)
            ? exports.WfRunId.fromPartial(object.parentWfRunId)
            : undefined;
        return message;
    },
};
function createBaseNodeRunId() {
    return { wfRunId: undefined, threadRunNumber: 0, position: 0 };
}
exports.NodeRunId = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.wfRunId !== undefined) {
            exports.WfRunId.encode(message.wfRunId, writer.uint32(10).fork()).ldelim();
        }
        if (message.threadRunNumber !== 0) {
            writer.uint32(16).int32(message.threadRunNumber);
        }
        if (message.position !== 0) {
            writer.uint32(24).int32(message.position);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNodeRunId();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.wfRunId = exports.WfRunId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.threadRunNumber = reader.int32();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.position = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.NodeRunId.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseNodeRunId();
        message.wfRunId = (object.wfRunId !== undefined && object.wfRunId !== null)
            ? exports.WfRunId.fromPartial(object.wfRunId)
            : undefined;
        message.threadRunNumber = (_a = object.threadRunNumber) !== null && _a !== void 0 ? _a : 0;
        message.position = (_b = object.position) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseWorkflowEventId() {
    return { wfRunId: undefined, workflowEventDefId: undefined, number: 0 };
}
exports.WorkflowEventId = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.wfRunId !== undefined) {
            exports.WfRunId.encode(message.wfRunId, writer.uint32(10).fork()).ldelim();
        }
        if (message.workflowEventDefId !== undefined) {
            exports.WorkflowEventDefId.encode(message.workflowEventDefId, writer.uint32(18).fork()).ldelim();
        }
        if (message.number !== 0) {
            writer.uint32(24).int32(message.number);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWorkflowEventId();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.wfRunId = exports.WfRunId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.workflowEventDefId = exports.WorkflowEventDefId.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.number = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.WorkflowEventId.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseWorkflowEventId();
        message.wfRunId = (object.wfRunId !== undefined && object.wfRunId !== null)
            ? exports.WfRunId.fromPartial(object.wfRunId)
            : undefined;
        message.workflowEventDefId = (object.workflowEventDefId !== undefined && object.workflowEventDefId !== null)
            ? exports.WorkflowEventDefId.fromPartial(object.workflowEventDefId)
            : undefined;
        message.number = (_a = object.number) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function createBaseTaskRunId() {
    return { wfRunId: undefined, taskGuid: "" };
}
exports.TaskRunId = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.wfRunId !== undefined) {
            exports.WfRunId.encode(message.wfRunId, writer.uint32(10).fork()).ldelim();
        }
        if (message.taskGuid !== "") {
            writer.uint32(18).string(message.taskGuid);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTaskRunId();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.wfRunId = exports.WfRunId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.taskGuid = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.TaskRunId.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseTaskRunId();
        message.wfRunId = (object.wfRunId !== undefined && object.wfRunId !== null)
            ? exports.WfRunId.fromPartial(object.wfRunId)
            : undefined;
        message.taskGuid = (_a = object.taskGuid) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseUserTaskRunId() {
    return { wfRunId: undefined, userTaskGuid: "" };
}
exports.UserTaskRunId = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.wfRunId !== undefined) {
            exports.WfRunId.encode(message.wfRunId, writer.uint32(10).fork()).ldelim();
        }
        if (message.userTaskGuid !== "") {
            writer.uint32(18).string(message.userTaskGuid);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserTaskRunId();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.wfRunId = exports.WfRunId.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.userTaskGuid = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.UserTaskRunId.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseUserTaskRunId();
        message.wfRunId = (object.wfRunId !== undefined && object.wfRunId !== null)
            ? exports.WfRunId.fromPartial(object.wfRunId)
            : undefined;
        message.userTaskGuid = (_a = object.userTaskGuid) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseTaskDefMetricsId() {
    return { windowStart: undefined, windowType: common_enums_1.MetricsWindowLength.MINUTES_5, taskDefId: undefined };
}
exports.TaskDefMetricsId = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.windowStart !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.windowStart), writer.uint32(10).fork()).ldelim();
        }
        if (message.windowType !== common_enums_1.MetricsWindowLength.MINUTES_5) {
            writer.uint32(16).int32((0, common_enums_1.metricsWindowLengthToNumber)(message.windowType));
        }
        if (message.taskDefId !== undefined) {
            exports.TaskDefId.encode(message.taskDefId, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTaskDefMetricsId();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.windowStart = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.windowType = (0, common_enums_1.metricsWindowLengthFromJSON)(reader.int32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.taskDefId = exports.TaskDefId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.TaskDefMetricsId.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTaskDefMetricsId();
        message.windowStart = (_a = object.windowStart) !== null && _a !== void 0 ? _a : undefined;
        message.windowType = (_b = object.windowType) !== null && _b !== void 0 ? _b : common_enums_1.MetricsWindowLength.MINUTES_5;
        message.taskDefId = (object.taskDefId !== undefined && object.taskDefId !== null)
            ? exports.TaskDefId.fromPartial(object.taskDefId)
            : undefined;
        return message;
    },
};
function createBaseWfSpecMetricsId() {
    return { windowStart: undefined, windowType: common_enums_1.MetricsWindowLength.MINUTES_5, wfSpecId: undefined };
}
exports.WfSpecMetricsId = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.windowStart !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.windowStart), writer.uint32(10).fork()).ldelim();
        }
        if (message.windowType !== common_enums_1.MetricsWindowLength.MINUTES_5) {
            writer.uint32(16).int32((0, common_enums_1.metricsWindowLengthToNumber)(message.windowType));
        }
        if (message.wfSpecId !== undefined) {
            exports.WfSpecId.encode(message.wfSpecId, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWfSpecMetricsId();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.windowStart = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.windowType = (0, common_enums_1.metricsWindowLengthFromJSON)(reader.int32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.wfSpecId = exports.WfSpecId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.WfSpecMetricsId.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseWfSpecMetricsId();
        message.windowStart = (_a = object.windowStart) !== null && _a !== void 0 ? _a : undefined;
        message.windowType = (_b = object.windowType) !== null && _b !== void 0 ? _b : common_enums_1.MetricsWindowLength.MINUTES_5;
        message.wfSpecId = (object.wfSpecId !== undefined && object.wfSpecId !== null)
            ? exports.WfSpecId.fromPartial(object.wfSpecId)
            : undefined;
        return message;
    },
};
function createBasePrincipalId() {
    return { id: "" };
}
exports.PrincipalId = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePrincipalId();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.PrincipalId.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBasePrincipalId();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseTenantId() {
    return { id: "" };
}
exports.TenantId = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTenantId();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.TenantId.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseTenantId();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function toTimestamp(dateStr) {
    const date = new globalThis.Date(dateStr);
    const seconds = Math.trunc(date.getTime() / 1000);
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis).toISOString();
}
//# sourceMappingURL=object_id.js.map